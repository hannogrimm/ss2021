 1/1: # Prepare datasets
 1/2: import pandas as pd
 1/3:
import pandas as pd
import seaborn as sns
 6/1:
# Apple & Tesla - Analysis on Risk & Return
_Which stock is more valuable to invest into?_
 6/2:
# Apple & Tesla - Analysis on Risk & Return
_Which stock is more valuable to invest into?_
 6/3:
# Apple & Tesla - Analysis on Risk & Return
_Which stock is more valuable to invest into?_
 6/4:
# Apple & Tesla - Analysis on Risk & Return
_Which stock is more valuable to invest into?_
 6/5:
## Frame of Project
We will analyse the stocks based on the *daily historical data* of both stocks in a **5-year timespan** (Apr 07, 2016 - Apr 07, 2021). 
The data-provider is an export of the yahoo! Finance terminal for [AMZN](https://finance.yahoo.com/quote/AMZN/history?period1=1459987200&period2=1617753600&interval=1d&filter=history&frequency=1d&includeAdjustedClose=true) and [TSLA](https://finance.yahoo.com/quote/TSLA/history?period1=1459987200&period2=1617753600&interval=1d&filter=history&frequency=1d&includeAdjustedClose=true).
 6/6:
import pandas as pd
import seaborn as sns

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")
10/1:
import pandas as pd
import seaborn as sns

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")
12/1:
amzn.head()
tsla.head()
12/2:
breakpoint()
import pandas as pd
import seaborn as sns

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")
12/3:
import pandas as pd
import seaborn as sns

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")
12/4:
amzn.head()
tsla.head()
12/5:
import pandas as pd
import seaborn as sns

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")
12/6:
import pandas as pd
import seaborn as sns

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")
14/1:
import pandas as pd
import seaborn as sns

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")
14/2:
amzn.head()
tsla.head()
14/3:
amzn.head();
tsla.head()
14/4:
amzn.head();
tsla.head();
14/5:
amzn.head();
tsla.head();
14/6:
print(amzn.head())
print(tsla.head())
14/7:
amzn.head()
print(tsla.head())
14/8:
amzn.head();
print(tsla.head())
14/9:
print(tsla.head())
print(amzn.head())
14/10: print(tsla.head())
14/11: Each row documents a trading-day of the stock in each year. The `Date` column holds the date of the trading-day. `High` and `Low` describe the highest/lowest stock value in the timeframe of the day. `Open` indicates the stock value in the beginning of the day (market open), while `Close` holds the terminating value at the end of the day (market close).
14/12: ## Visualizing our Data
14/13: sns.lineplot(x = "Date", y = "Close" data=amzn)
14/14: sns.lineplot(x = "Date", y = "Close", data=amzn)
14/15:
sns.lineplot(x = "Date", y = "Close", data=amzn)
plt.show()
14/16:
sns.lineplot(x = "Date", y = "Close", data=amzn)
plt.show()
14/17:
sns.lineplot(x = "Date", y = "Close", data=amzn)
plt.show()
14/18:
sns.lineplot(x = "Date", y = "Close", data=amzn)
plt.show()
15/1:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")
15/2: print(tsla.head())
15/3: sns.lineplot(x = "Date", y = "Adj. Close", data=amzn)
15/4: sns.lineplot(x = "Date", y = "Adj. Close", data=tsla)
15/5: sns.lineplot(x = "Date", y = "Adj Close", data=amzn)
15/6: sns.lineplot(x = "Date", y = "Adj. Close", data=tsla)
15/7:
sns.lineplot(x = "Date", y = "Adj. Close", data=tsla)
plt.show()
15/8:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla)
plt.show()
15/9: # Adjusting to daily percentage change
15/10: amzn["Pct Change"] = amzn.pct_change()
15/11: amzn["Pct Change"] = amzn["Adj Close"].pct_change()
15/12:
amzn["Pct Change"] = amzn["Adj Close"].pct_change()
tsla["Pct Change"] = tsla["Adj Close"].pct_change()
15/13: ### Visualizing percental change
15/14:
sns.lineplot(x = "Date", y = "Pct Change", data=amzn)
sns.lineplot(x = "Date", y = "Pct Change", data=tsla)
plt.show()
15/15:
fig, ax = plt.subplots(2, 1, figsize= (14,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0][0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla ax=ax[0][1])

ax[0][0].xlabel("Amazon Percental Change")
ax[0][0].xlabel("Tesla Percental Change")

plt.show()
15/16:
fig, ax = plt.subplots(2, 1, figsize= (14,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0][0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[0][1])

ax[0][0].xlabel("Amazon Percental Change")
ax[0][0].xlabel("Tesla Percental Change")

plt.show()
15/17:
fig, ax = plt.subplots(2, 2, figsize= (14,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0][0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[0][1])

ax[0][0].xlabel("Amazon Percental Change")
ax[0][0].xlabel("Tesla Percental Change")

plt.show()
15/18:
fig, ax = plt.subplots(2, 2, figsize= (14,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0][0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[0][1])

ax[0][0].set_xlabel("Amazon Percental Change")
ax[0][0].xlabel("Tesla Percental Change")

plt.show()
15/19:
fig, ax = plt.subplots(2, 2, figsize= (14,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0][0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[0][1])

ax[0][0].set_xlabel("Amazon Percental Change")
ax[0][0].set_xlabel("Tesla Percental Change")

plt.show()
15/20:
fig, ax = plt.subplots(2, 2, figsize= (14,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0][0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[0][1])

ax[0][0].set_xlabel("Amazon Percental Change")
ax[0][1].set_xlabel("Tesla Percental Change")

plt.show()
15/21:
fig, ax = plt.subplots(2, 2, figsize= (14,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0][0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[0][1])

ax[0][0].set_xlabel("Amazon Percental Change")
ax[0][1].set_xlabel("Tesla Percental Change")

plt.show()
15/22:
fig, ax = plt.subplots(1, 2, figsize= (14,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0][0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[0][1])

# describe axes
ax[0][0].set(xlabel="Amazon", ylabel="Percental Change")
ax[0][1].set(xlabel="Tesla", ylabel="Percental Change")

# define same y-limits (range: 40% change in one day -> statistically very unlikely to exceed)
ax[0][0].set_ylim(-0.2,0.2)
ax[0][1].set_ylim(-0.2,0.2)

plt.show()
15/23:
fig, ax = plt.subplots(1, 2, figsize= (14,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xlabel="Amazon", ylabel="Percental Change")
ax[1].set(xlabel="Tesla", ylabel="Percental Change")

# define same y-limits (range: 40% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.2,0.2)
ax[1].set_ylim(-0.2,0.2)

plt.show()
15/24:
fig, ax = plt.subplots(1, 2, figsize= (24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xlabel="Amazon (w/ mean indicator)", ylabel="Percental Change")
ax[1].set(xlabel="Tesla (w/ mean indicator)", ylabel="Percental Change")

# define same y-limits (max-range: 40% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.2,0.2)
ax[1].set_ylim(-0.2,0.2)

# display mean as horizontal line
ax[0].axhline(y=amzn["Pct Change"].mean(), linewidth=3.0)
ax[1].axhline(y=tsla["Pct Change"].mean(), linewidth=3.0)

plt.show()
15/25: We derive a significantly higher historical volatility for the Tesla stock in comparison to the Amazon stock. This is relevant for our determination of risk as a high spread of value over time for a stock can be a leading factor to rapid loss (but also: rapid gain).
15/26: print(amzn["Pct Change"].mean())
15/27:
print(amzn["Pct Change"].mean())
print(amzn["Pct Change"].std())
15/28:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")
15/29:
fig, ax = plt.subplots(1, 2, figsize= (24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xlabel="Amazon (w/ mean indicator)", ylabel="Percental Change")
ax[1].set(xlabel="Tesla (w/ mean indicator)", ylabel="Percental Change")

# define same y-limits (max-range: 40% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.2,0.2)
ax[1].set_ylim(-0.2,0.2)

# display mean as horizontal line
ax[0].axhline(y=amzn["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + round(amzn["Pct Change"].mean(), 4) + ")")
ax[1].axhline(y=tsla["Pct Change"].mean(), linewidth=3.0, color="orange" label="Mean (" + round(amzn["Pct Change"].mean(), 4) + ")")

# add legend
ax[0].legend(loc="upper right")

plt.show()
15/30:
fig, ax = plt.subplots(1, 2, figsize= (24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xlabel="Amazon (w/ mean indicator)", ylabel="Percental Change")
ax[1].set(xlabel="Tesla (w/ mean indicator)", ylabel="Percental Change")

# define same y-limits (max-range: 40% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.2,0.2)
ax[1].set_ylim(-0.2,0.2)

# display mean as horizontal line
ax[0].axhline(y=amzn["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + round(amzn["Pct Change"].mean(), 4) + ")")
ax[1].axhline(y=tsla["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + round(amzn["Pct Change"].mean(), 4) + ")")

# add legend
ax[0].legend(loc="upper right")

plt.show()
15/31:
amzn["Pct Change"] = amzn["Adj Close"].pct_change()
tsla["Pct Change"] = tsla["Adj Close"].pct_change()
15/32:
fig, ax = plt.subplots(1, 2, figsize= (24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xlabel="Amazon (w/ mean indicator)", ylabel="Percental Change")
ax[1].set(xlabel="Tesla (w/ mean indicator)", ylabel="Percental Change")

# define same y-limits (max-range: 40% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.2,0.2)
ax[1].set_ylim(-0.2,0.2)

# display mean as horizontal line
ax[0].axhline(y=amzn["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + round(amzn["Pct Change"].mean(), 4) + ")")
ax[1].axhline(y=tsla["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + round(amzn["Pct Change"].mean(), 4) + ")")

# add legend
ax[0].legend(loc="upper right")

plt.show()
15/33:
fig, ax = plt.subplots(1, 2, figsize= (24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xlabel="Amazon (w/ mean indicator)", ylabel="Percental Change")
ax[1].set(xlabel="Tesla (w/ mean indicator)", ylabel="Percental Change")

# define same y-limits (max-range: 40% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.2,0.2)
ax[1].set_ylim(-0.2,0.2)

# display mean as horizontal line
ax[0].axhline(y=amzn["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + amzn["Pct Change"].mean().round(4) + ")")
ax[1].axhline(y=tsla["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + amzn["Pct Change"].mean().round(4) + ")")

# add legend
ax[0].legend(loc="upper right")

plt.show()
15/34:
fig, ax = plt.subplots(1, 2, figsize= (24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xlabel="Amazon (w/ mean indicator)", ylabel="Percental Change")
ax[1].set(xlabel="Tesla (w/ mean indicator)", ylabel="Percental Change")

# define same y-limits (max-range: 40% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.2,0.2)
ax[1].set_ylim(-0.2,0.2)

# display mean as horizontal line
ax[0].axhline(y=amzn["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=tsla["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")

# add legend
ax[0].legend(loc="upper right")

plt.show()
15/35:
rounded_changes = np.amzn["Pct Change"].round(4).value_counts()

rounded_changes.plot(kind="bar")
15/36:
rounded_changes = amzn["Pct Change"].round(4).value_counts()

rounded_changes.plot(kind="bar")
15/37:
fig, ax = plt.subplots(1, 2, figsize= (24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xlabel="Amazon (w/ mean indicator)", ylabel="Percental Change")
ax[1].set(xlabel="Tesla (w/ mean indicator)", ylabel="Percental Change")

# define same y-limits (max-range: 40% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.2,0.2)
ax[1].set_ylim(-0.2,0.2)

# display mean as horizontal line
ax[0].axhline(y=amzn["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=tsla["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")

# add legend
ax[0].legend(loc="upper right")

plt.show()
15/38:
rounded_changes = amzn["Pct Change"].round(4).value_counts()

print(rounded_changes)
15/39:
rounded_changes = amzn["Pct Change"].round(4).value_counts()

plt.scatter(x = rounded_changes[0], y = rounded_changes[1], marker = "o", s = 25, color = "red")
15/40:
rounded_changes = amzn["Pct Change"].round(4).value_counts()
print(rounded_changes)

rounded_changes.scatter(x = rounded_changes[0], y = rounded_changes[1], marker = "o", s = 25, color = "red")
15/41:
rounded_changes = amzn["Pct Change"].round(4).value_counts()
rounded_changes.plot(type="scatter")
15/42:
rounded_changes = amzn["Pct Change"].round(4).value_counts()
rounded_changes.plot.scatter()
15/43:
rounded_changes = amzn["Pct Change"].round(4).value_counts()
rounded_changes.plot.scatter(x="Pct Change")
15/44:
rounded_changes = amzn["Pct Change"].round(4).value_counts()
rounded_changes.plot.scatter(x="Pct Change", y="index")
15/45:
rounded_changes = amzn["Pct Change"].round(4).value_counts()

plt.scatter(x=rounded_changes[0], y=rounded_changes.index)
15/46:
rounded_changes = amzn["Pct Change"].round(4).value_counts()

plt.scatter(x=rounded_changes, y=rounded_changes.index)
15/47:
rounded_changes = amzn["Pct Change"].round(4).value_counts()

plt.scatter(y=rounded_changes, x=rounded_changes.index)
15/48:
rounded_changes = amzn["Pct Change"].round(4).value_counts()

plt.scatter(x=rounded_changes.index, x=rounded_changes)
15/49:
rounded_changes = amzn["Pct Change"].round(4).value_counts()

plt.scatter(x=rounded_changes.index, y=rounded_changes)
15/50:
rounded_changes = amzn["Pct Change"].round(4).value_counts()

plt.scatter(x=rounded_changes.index, y=rounded_changes, xlim=[-0.2, 0.2])
15/51:
rounded_changes = amzn["Pct Change"].round(4).value_counts()

plt.scatter(x=rounded_changes.index, y=rounded_changes)
plt.xlim([-0.2,0.2])
15/52:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.scatter(x=rounded_changes.index, y=rounded_changes)
plt.xlim([-0.2,0.2])
15/53:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.bar(x=rounded_changes.index, y=rounded_changes)
plt.xlim([-0.2,0.2])
15/54:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.bar(x=rounded_changes.index, height=rounded_changes)
plt.xlim([-0.2,0.2])
15/55:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.bar(height=rounded_changes.index, x=rounded_changes)
plt.xlim([-0.2,0.2])
plt.show()
15/56:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.bar(x=rounded_changes.index, height=rounded_changes)
plt.xlim([-0.2,0.2])
plt.show()
15/57:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.hist(x=rounded_changes.index, height=rounded_changes)
plt.xlim([-0.2,0.2])
plt.show()
15/58:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.hist(x=rounded_changes.index, y=rounded_changes)
plt.xlim([-0.2,0.2])
plt.show()
15/59:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.hist(ax=rounded_changes.index)
plt.xlim([-0.2,0.2])
plt.show()
15/60:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.hist(x=rounded_changes.index)
plt.xlim([-0.2,0.2])
plt.show()
15/61:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.hist(x=rounded_changes.index)
plt.axvline(x=tsla["Pct Change"].mean(), color="orange")
plt.xlim([-0.2,0.2])
plt.show()
15/62:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.hist(x=rounded_changes.index)
plt.axvline(x=tsla["Pct Change"].median(), color="orange")
plt.xlim([-0.2,0.2])
plt.show()
15/63:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.hist(x=rounded_changes.index)
plt.axvline(x=tsla["Pct Change"].std(), color="orange")
plt.xlim([-0.2,0.2])
plt.show()
15/64:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.hist(x=rounded_changes.index)
plt.axvline(x=tsla["Pct Change"].mean(), color="orange")
plt.xlim([-0.2,0.2])
plt.show()
15/65:
fig, ax = plt.subplots(1, 2, figsize= (24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xlabel="Amazon (w/ mean indicator)", ylabel="Percental Change")
ax[1].set(xlabel="Tesla (w/ mean indicator)", ylabel="Percental Change")

# define same y-limits (max-range: 40% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.2,0.2)
ax[1].set_ylim(-0.2,0.2)

# display mean as horizontal line
ax[0].axhline(y=amzn["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=tsla["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
15/66:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.hist(x=rounded_changes.index)
plt.axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
plt.xlim([-0.2,0.2])
plt.legend(loc="upper right")
plt.show()
15/67:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.hist(x=rounded_changes.index)
plt.axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")
plt.xlim([-0.2,0.2])
plt.legend(loc="upper right")
plt.show()
15/68:
fig, ax = plt.subplots(1, 2, figsize= (24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xlabel="Amazon (w/ mean indicator)", ylabel="Percental Change")
ax[1].set(xlabel="Tesla (w/ mean indicator)", ylabel="Percental Change")

# define same y-limits (max-range: 40% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.2,0.2)
ax[1].set_ylim(-0.2,0.2)

# display mean as horizontal line
ax[0].axhline(y=amzn["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=tsla["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
15/69:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.hist(x=rounded_changes.index, bins=20)
plt.axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")
plt.xlim([-0.2,0.2])
plt.legend(loc="upper right")
plt.show()
15/70:
rounded_changes = tsla["Pct Change"].round(4).value_counts()

plt.hist(x=rounded_changes.index, bins=30)
plt.axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")
plt.xlim([-0.2,0.2])
plt.legend(loc="upper right")
plt.show()
15/71:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.join(tsla)
print(combined.head())
15/72:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = (amzn["stock"] = "Amazon")
print(combined.head())
15/73:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(stock="Amazon").set_index("stock").join(tsla.assign(stock="Tesla").set_index("stock"))
print(combined.head())
15/74:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(stock="Amazon").set_index("stock").join(tsla.assign(stock="Tesla").set_index("stock"), on="stock")
print(combined.head())
15/75:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(stock="Amazon").set_index("stock").append(tsla.assign(stock="Tesla").set_index("stock"))
print(combined.head())
15/76:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(stock="Amazon").append(tsla.assign(stock="Tesla"))
print(combined.head())
15/77:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(stock="Amazon").append(tsla.assign(stock="Tesla"))
combined.set_index(("stock", "Date"))
print(combined.head())
15/78:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla"))
combined.set_index(["Stock", "Date"])
print(combined.head())
15/79:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined.head())
15/80:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
15/81:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes, bins=30 ax=ax[0])
sns.histplot(x=rounded_tsla_changes, bins=30, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

plt.xlim([-0.2,0.2])
plt.legend(loc="upper right")
plt.show()
15/82:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes, bins=30 ax=ax[0])
sns.histplot(x=rounded_tsla_changes, bins=30, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].xlim([-0.2,0.2])
ax[1].xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
15/83:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes, bins=30, ax=ax[0])
sns.histplot(x=rounded_tsla_changes, bins=30, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].xlim([-0.2,0.2])
ax[1].xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
15/84:
amzn["Pct Change"] = amzn["Adj Close"].pct_change()
tsla["Pct Change"] = tsla["Adj Close"].pct_change()
15/85:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes, bins=30, ax=ax[0])
sns.histplot(x=rounded_tsla_changes, bins=30, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].xlim([-0.2,0.2])
ax[1].xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
15/86:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes, bins=30, ax=ax[0])
sns.histplot(x=rounded_tsla_changes, bins=30, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
15/87:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
15/88:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes, bins=30, ax=ax[0])
sns.histplot(x=rounded_tsla_changes, bins=30, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
15/89:
amzn["Pct Change"] = amzn["Adj Close"].pct_change()
tsla["Pct Change"] = tsla["Adj Close"].pct_change()
15/90:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes, bins=30, ax=ax[0])
sns.histplot(x=rounded_tsla_changes, bins=30, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
15/91:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=30, ax=ax[0])
sns.histplot(x=rounded_tsla_changes, bins=30, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
15/92:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=30, ax=ax[0])
sns.histplot(x=rounded_tsla_changes.index, bins=30, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
15/93:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0])
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
15/94:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0])
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

sns.histplot(x="Pct Change", data=combined, hue="Stock")

plt.show()
15/95:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0])
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

sns.histplot(data=combined, hue="Stock")

plt.show()
15/96:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0])
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

sns.histplot(data=combined)

plt.show()
17/1:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined.head())
18/1:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined["Stock"].head())
19/1:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined["Stock"].head())
19/2:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined.loc["Stock"].head())
19/3:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined[combined["Stock"]].head())
19/4:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined[combined["Stock"] == "Amazon"].head())
19/5:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined[combined["Stock"] == "Amazon"].head())
19/6:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla"))
print(combined[combined["Stock"] == "Amazon"].head())
19/7:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined[combined["Stock"] == "Amazon"].head())
19/8:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined[combined.index == "Amazon"].head())
19/9:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined["Amazon", :].head())
19/10:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined["Stock", :].head())
19/11:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined[:, "Amazon"].head())
19/12:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined[:, "Stock"].head())
19/13:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined.loc["Amazon", :].head())
19/14:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined.loc["Amazon"].head())
19/15:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"])
print(combined.loc["Tesla"].head())
19/16:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1)
print(combined.loc["Tesla"].head())
19/17:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
print(combined.loc["Tesla"].head())
19/18:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
print(combined.loc["Amazon"].head())
19/19:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon")
.append(tsla.assign(Stock="Tesla"))
.set_index(["Stock", "Date"])
.sort_index(axis=0, level=1, ascending=False)
print(combined.loc["Amazon"].head())
19/20:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./data/AMZN.csv")
tsla = pd.read_csv("./data/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
19/21:
amzn["Pct Change"] = amzn["Adj Close"].pct_change()
tsla["Pct Change"] = tsla["Adj Close"].pct_change()
19/22:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0])
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()

sns.histplot(data=combined, hue="Stock")
plt.show()
19/23:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0])
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()

sns.histplot(x="Pct Change", y=amzn["Pct Change"].round(4).value_counts(), data=combined, hue="Stock")
plt.show()
19/24:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0])
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()

sns.histplot(x="Open", y="Close", data=combined, hue="Stock")
plt.show()
19/25:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0])
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()

sns.histplot(x="Pct Change", y="Close", data=combined, hue="Stock")
plt.show()
19/26:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0])
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()

sns.histplot(data=combined["Pct Change"], hue="Stock")
plt.show()
19/27:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0])
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()

sns.histplot(data=combined.pct_change(, hue="Stock")
plt.show()
19/28:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0])
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()

sns.histplot(data=combined.pct_change(), hue="Stock")
plt.show()
19/29:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0])
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/30:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.distplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0])
sns.displot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/31:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.displot(x=rounded_amzn_changes.index, bins=20, ax=ax[0])
sns.displot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/32:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde_kws=dict(bw=0.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/33:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], hist_kws= dict(edgecolor="k"), kde_kws=dict(bw=0.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/34:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde_kws=dict(bw=0.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/35:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.distplot(rounded_amzn_changes.index, bins=20, ax=ax[0], kde_kws=dict(bw=0.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/36:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.distplot(rounded_amzn_changes.index, bins=20, ax=ax[0], kde_kws=dict(bw=0.5))
sns.distplot(rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/37:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde_kws=dict(bw=0.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/38:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde=True, kde_kws=dict(bw=0.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/39:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde=True)
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1])

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/40:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde=True)
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1], kde=True)

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/41:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1], kde=True)

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/42:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.2,0.2])
ax[1].set_xlim([-0.2,0.2])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/43:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/44:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xlabel="Amazon (w/ mean indicator)", ylabel="Percental Change")
ax[1].set(xlabel="Tesla (w/ mean indicator)", ylabel="Percental Change")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amzn["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=tsla["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/45:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/46:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xticks=[], xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/47:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/48:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xticks=[], xlabel="Amazon (w/ mean indicator)", ylabel="Percental Change")
ax[1].set(xticks=[], xlabel="Tesla (w/ mean indicator)", ylabel="Percental Change")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amzn["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=tsla["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/49:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xticks=[], xlabel="Amazon", ylabel="Percental Change")
ax[1].set(xticks=[], xlabel="Tesla", ylabel="Percental Change")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amzn["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=tsla["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/50:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xticks=[], xlabel="Amazon Percental Change", ylabel="Percental Change (%)")
ax[1].set(xticks=[], xlabel="Tesla Percental Change", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amzn["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=tsla["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/51:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xticks=[], xlabel="Amazon", ylabel="Percental Change (%)")
ax[1].set(xticks=[], xlabel="Tesla", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amzn["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=tsla["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/52:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn);
plt.show()
19/53:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla);
plt.set(xticks=[])
plt.show()
19/54:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla, xticks=[]);
plt.show()
19/55:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla).set_xticks([])
plt.show()
19/56:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn).set_xticks([]);
plt.show()
19/57:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla).set_xticks([]);
plt.show()
19/58:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla).set(xticks=[]);
plt.show()
19/59:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla).set(xticks=[], xlabel="Date History", ylabel="Adjusted Closing Position");
plt.show()
19/60:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn).set(xticks=[], xlabel="Date History", ylabel="Adjusted Closing Position");
plt.show()
19/61:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla).set(xticks=[], xlabel="Date History", ylabel="Adjusted Closing Position");
plt.show()
19/62: In the distribution of percental change of both stocks, the Tesla stock has a wider spread, i.e. the variance of the daily change over time was higher. Visualized as a histogram, the previously graphed volatility (see lineplot above) is neatly displayed here to be in relation to the variance or standard deviation of the historical values.
19/63:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn).set(xticks=[], xlabel="Amazon Value History", ylabel="Adjusted Closing Position");
plt.show()
19/64:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla).set(xticks=[], xlabel="Tesla Value History", ylabel="Adjusted Closing Position");
plt.show()
19/65:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla).set(xticks=[], xlabel="Tesla Value History (2016-2021)", ylabel="Adjusted Closing Position");
plt.show()
19/66: amzn_recent = amzn[amzn["Date"] >= "2020-10-03" & amzn["Date"] =< "2021-04-06"]
19/67: amzn_recent = amzn[amzn["Date"] >= "2020-10-03" & amzn["Date"] <= "2021-04-06"]
19/68: amzn_recent = amzn[amzn["Date"] > "2020-10-02" & amzn["Date"] < "2021-04-07"]
19/69: amzn_recent = amzn[(amzn["Date"] > "2020-10-02") & (amzn["Date"] < "2021-04-07")]
19/70:
amzn_recent = amzn[(amzn["Date"] > "2020-10-02") & (amzn["Date"] < "2021-04-07")]
tsla_recent = tsla[(tsla["Date"] > "2020-10-02") & (tsla["Date"] < "2021-04-07")]
19/71:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/72:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/73:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/74:
amzn_recent = amzn[(amzn["Date"] > "2020-10-02") & (amzn["Date"] < "2021-04-07")]
tsla_recent = tsla[(tsla["Date"] > "2020-10-02") & (tsla["Date"] < "2021-04-07")]
19/75:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla).set(xticks=[], xlabel="Tesla Value History (2016-2021)", ylabel="Adjusted Closing Position");
plt.show()
19/76:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla_recent).set(xticks=[], xlabel="Tesla Value History (2016-2021)", ylabel="Adjusted Closing Position");
plt.show()
19/77:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla_recent).set(xticks=[], xlabel="Tesla Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
19/78:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn_recent).set(xticks=[], xlabel="Amazon Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
19/79:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/80:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/81:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/82:
amzn_recent = amzn[(amzn["Date"] > "2019-10-02") & (amzn["Date"] < "2021-04-07")]
tsla_recent = tsla[(tsla["Date"] > "2019-10-02") & (tsla["Date"] < "2021-04-07")]
19/83:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn_recent).set(xticks=[], xlabel="Amazon Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
19/84:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla_recent).set(xticks=[], xlabel="Tesla Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
19/85:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/86:
amzn_recent = amzn[(amzn["Date"] > "2020-10-02") & (amzn["Date"] < "2021-04-07")]
tsla_recent = tsla[(tsla["Date"] > "2020-10-02") & (tsla["Date"] < "2021-04-07")]
19/87:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn_recent).set(xticks=[], xlabel="Amazon Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
19/88:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla_recent).set(xticks=[], xlabel="Tesla Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
19/89:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/90: ## Determining Historical Volatility
19/91: We can deduct a similar distribution as in the historical distribution of the last 5-years with respect to the fairly normalized daily return of Amazon and Tesla's favorable positive skew.
19/92:
amzn_recent = amzn[(amzn["Date"] > "2021-01-05") & (amzn["Date"] < "2021-04-07")]
tsla_recent = tsla[(tsla["Date"] > "2021-01-05") & (tsla["Date"] < "2021-04-07")]
19/93:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn_recent).set(xticks=[], xlabel="Amazon Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
19/94:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla_recent).set(xticks=[], xlabel="Tesla Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
19/95:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/96:
amzn_recent = amzn[(amzn["Date"] > "2020-10-07") & (amzn["Date"] < "2021-04-07")]
tsla_recent = tsla[(tsla["Date"] > "2020-10-07") & (tsla["Date"] < "2021-04-07")]
19/97:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn_recent).set(xticks=[], xlabel="Amazon Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
19/98:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla_recent).set(xticks=[], xlabel="Tesla Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
19/99:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/100: print((1+returns).cumprod().tail())
19/101: print((1+tsla_recent).cumprod().tail())
19/102: print((1+rounded_amzn_changes).cumprod().tail())
19/103:
rounded_amzn_changes = amzn_recent["Pct Change"].cumprod()
rounded_tsla_changes = tsla_recent["Pct Change"].cumprod()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/104:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/105:
rounded_amzn_changes = amzn_recent["Pct Change"].value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/106:
amzn_changes = amzn["Pct Change"].value_counts()
tsla_changes = tsla["Pct Change"].value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amzn_changes.index, bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=tsla_changes.index, bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/107:
rounded_amzn_changes = amzn_recent["Pct Change"].value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/108:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")"

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/109:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/110:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/111: print((1+amzn_recent.pct_change()).cumprod().tail())
19/112: print((1+amzn_recent.pct_change()).cumprod())
19/113: print((1+ amzn_recent["Pct Change"]).cumprod().tail())
19/114:
daily_cum_ret = (1 + amzn_recent["Pct Change"]).cumprod()

fig, ax = plt.subplots()
ax.plot(daily_cum_ret.index, daily_cum_ret.Portfolio, color='purple', label="portfolio")
ax.xaxis.set_major_locator(matplotlib.dates.YearLocator())
plt.legend()
plt.show()
19/115:
daily_cum_ret = (1 + amzn_recent["Pct Change"]).cumprod()

fig, ax = plt.subplots()
ax.plot(daily_cum_ret.index, daily_cum_ret["Pct Change"], color='purple', label="portfolio")
ax.xaxis.set_major_locator(matplotlib.dates.YearLocator())
plt.legend()
plt.show()
19/116:
daily_cum_ret = (1 + amzn_recent["Pct Change"]).cumprod()

fig, ax = plt.subplots()
ax.plot(daily_cum_ret.index, daily_cum_ret, color='purple', label="portfolio")
ax.xaxis.set_major_locator(matplotlib.dates.YearLocator())
plt.legend()
plt.show()
19/117:
daily_cum_ret = (1 + amzn_recent["Pct Change"]).cumprod()

fig, ax = plt.subplots()
ax.plot(daily_cum_ret.index, daily_cum_ret, color='purple', label="portfolio")
plt.legend()
plt.show()
19/118: print(amzn_recent.std())
19/119: print(amzn_recent["Adj Close"].std())
19/120: print(amzn_recent["Pct Change"].std())
19/121:
amzn_recent = amzn[(amzn["Date"] > "2020-10-07") & (amzn["Date"] < "2021-04-07")]
tsla_recent = tsla[(tsla["Date"] > "2020-10-07") & (tsla["Date"] < "2021-12-07")]
19/122:
amzn_recent = amzn[(amzn["Date"] > "2020-10-07") & (amzn["Date"] < "2021-04-07")]
tsla_recent = tsla[(tsla["Date"] > "2020-10-07") & (tsla["Date"] < "2020-12-07")]
19/123:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn_recent).set(xticks=[], xlabel="Amazon Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
19/124:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla_recent).set(xticks=[], xlabel="Tesla Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
19/125:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/126: print(amzn_recent["Pct Change"].std())
19/127: print(tsla_recent["Pct Change"].std())
19/128:
amzn_recent = amzn[(amzn["Date"] > "2020-10-07") & (amzn["Date"] < "2021-04-07")]
tsla_recent = tsla[(tsla["Date"] > "2020-10-07") & (tsla["Date"] < "2021-04-07")]
19/129:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn_recent).set(xticks=[], xlabel="Amazon Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
19/130:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla_recent).set(xticks=[], xlabel="Tesla Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
19/131:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/132: print((amzn_recent["Pct Change"][-1] - amzn_recent["Pct Change"][0]) / amzn_recent["Pct Change"][0])
19/133: print((amzn_recent["Pct Change"][0] - amzn_recent["Pct Change"][0]) / amzn_recent["Pct Change"][0])
19/134:
series = tsla_recent.ix[:, "Pct Change"]
print((series[-1] - series[0]) / series[0])
19/135:
series = tsla_recent.ix[:, "Pct Change"]
print((series[-1] - series[0]) / series[0]))
19/136:
series = tsla_recent.ix[:, "Pct Change"]
print((series[-1] - series[0]) / series[0])
19/137:
series = tsla_recent.iloc[:, "Pct Change"]
print((series[-1] - series[0]) / series[0])
19/138:
series = tsla_recent.iloc[:, :"Pct Change"]
print((series[-1] - series[0]) / series[0])
19/139:
series = tsla_recent.iloc[:, "Pct Change"]
print((series[-1] - series[0]) / series[0])
19/140:
series = tsla_recent.iloc["Pct Change"]
print((series[-1] - series[0]) / series[0])
19/141:
series = tsla_recent.loc["Pct Change"]
print((series[-1] - series[0]) / series[0])
19/142:
series = tsla_recent.loc[:,"Pct Change"]
print((series[-1] - series[0]) / series[0])
19/143:
series = tsla_recent.loc[:,"Pct Change"]
print((series[0] - series[0]) / series[0])
19/144:
series = tsla_recent["Pct Change"]
print((series[0] - series[0]) / series[0])
19/145:
series = tsla_recent.iloc[:,8]
print((series[0] - series[0]) / series[0])
19/146:
series = tsla_recent.iloc[:,6]
print((series[0] - series[0]) / series[0])
19/147:
series = tsla_recent.iloc[:,5]
print((series[0] - series[0]) / series[0])
19/148:
series = tsla_recent.iloc[:,0]
print((series[0] - series[0]) / series[0])
19/149:
series = tsla_recent.iloc[:,1]
print((series[0] - series[0]) / series[0])
19/150:
series = tsla_recent.iloc[:,1]
print((series[-1] - series[0]) / series[0])
19/151:
series = tsla_recent["Pct Change"].iloc[:,1]
print((series[-1] - series[0]) / series[0])
19/152:
series = tsla_recent["Pct Change"].iloc[:,0]
print((series[-1] - series[0]) / series[0])
19/153:
series = tsla_recent["Pct Change"].iloc[:]
print((series[-1] - series[0]) / series[0])
19/154:
series = tsla_recent["Pct Change"]
print((series[-1] - series[0]) / series[0])
19/155:
rounded_amzn_changes = amzn["Pct Change"].value_counts()
rounded_tsla_changes = tsla["Pct Change"].value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/156:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/157:
rounded_amzn_changes = amzn_recent["Pct Change"].value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/158:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
19/159: cleaned = tsla_recent["Adj Close"] - tsla_recent["Adj Close"].mean()
19/160:
cleaned = tsla_recent["Adj Close"] - tsla_recent["Adj Close"].mean()
squared = cleaned ** 2
19/161:
cleaned = tsla_recent["Adj Close"] - tsla_recent["Adj Close"].mean()
squared = cleaned ** 2
summed =  squared.agg(np.sum)
19/162:
cleaned = tsla_recent["Adj Close"] - tsla_recent["Adj Close"].mean()
squared = cleaned ** 2
summed =  squared.agg(np.sum)
print(np.sqrt(summed))
19/163:
cleaned = tsla_recent["Pct Change"] - tsla_recent["Pct Change"].mean()
squared = cleaned ** 2
summed =  squared.agg(np.sum)
print(np.sqrt(summed))
19/164: n = 180
19/165:
n = 180
cchv = np.sqrt(1/n * tsla_recent["Pct Change"].cumprod)
19/166:
n = 180
cchv = np.sqrt(1/n * tsla_recent["Pct Change"].cumprod())
19/167:
n = 180
cchv = np.sqrt((1/n) * tsla_recent["Pct Change"].cumprod())
19/168:
n = 180
cchv = np.sqrt((1/n) * tsla_recent["Pct Change"].cumprod())
print(cchv)
19/169:
n = 180
cchv = np.sqrt((1/n) * (tsla_recent["Pct Change"]**2).cumprod())
print(cchv)
19/170:
n = 180
cchv = np.sqrt((1/n) * (tsla_recent["Pct Change"]**2).cumsum())
print(cchv)
19/171:
n = 180
cchv = np.sqrt((1/n) * (tsla_recent["Pct Change"]**2).cumprod())
print(cchv)
19/172:
n = 180
cchv = np.sqrt((1/n) * (tsla_recent["Pct Change"]**2).cumsum())
print(cchv)
19/173:
xyz = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/4*np.ln(2)) * (252/180) *
19/174:
xyz = np.ln(((tsla_recent["High"] / tsla_recent["Low"])**2))
std_parkinson = (1/4*np.ln(2)) * (252/180) * xyz.cumsum()
19/175:
xyz = np.log(((tsla_recent["High"] / tsla_recent["Low"])**2))
std_parkinson = (1/4*np.log(2)) * (252/180) * xyz.cumsum()
19/176:
xyz = np.log(((tsla_recent["High"] / tsla_recent["Low"])**2))
std_parkinson = (1/4*np.log(2)) * (252/180) * xyz.cumsum()
print(std_parkinson)
19/177:
xyz = np.log(((tsla_recent["High"] / tsla_recent["Low"])**2))
std_parkinson = (1/4*np.log(2)) * (252/180) * xyz.cumsum()
print(std_parkinson)
19/178:
xyz = np.log(((tsla_recent["High"] / tsla_recent["Low"])**2))
std_parkinson = (1/4*np.log(2)) * (252/180) * xyz.cumprod()
print(std_parkinson)
19/179:
xyz = np.log(((tsla_recent["High"] / tsla_recent["Low"])**2))
std_parkinson = (1/4*np.log(2)) * (252/180) * xyz.cumsum()
print(std_parkinson)
19/180:
xyz = np.log(((tsla_recent["High"] / tsla_recent["Low"])**2))
std_parkinson = (1/(4*np.log(2))) * (252/180) * xyz.cumsum()
print(std_parkinson)
19/181:
xyz = np.log(((tsla_recent["High"] / tsla_recent["Low"])**2))
std_parkinson = (1/(4*np.log(2))) * (252/180)
print(std_parkinson)
19/182:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*np.log(2))) * (252/180) * np.cumsum(overday)
print(std_parkinson)
19/183:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*np.log(2))) * (252/180) * np.cumsum(np.log(overday)**2)
print(std_parkinson)
19/184:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*np.log(2))) * (252/180) * np.cumsum(np.log(overday**2))
print(std_parkinson)
19/185:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*np.log(2))) * (252/180) * np.cumsum(np.log(overday)**2)
print(std_parkinson)
19/186:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*np.log(2))) * (252/180) * np.cumsum(np.log(overday)**2)
print(std_parkinson**2)
19/187:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*np.log(2))) * (252/180) * np.cumsum(np.log(overday)**2)
print(np.sqrt(std_parkinson))
19/188:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*np.log(2))) * (252/180) * np.cumsum(np.log(overday)**2)
print(np.cumprod(std_parkinson))
19/189:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*np.log(2))) * (252/180) * np.cumsum(np.log(overday)**2)
print(np.cumsum(std_parkinson))
19/190:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*np.log(2))) * (252/180) * np.cumsum(np.log(overday)**2)
print(std_parkison)
19/191:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*np.log(2))) * (252/180) * np.cumsum(np.log(overday)**2)
print(std_parkinson)
19/192:
overday = tsla_recent["Low"] / tsla_recent["High"]
std_parkinson = (1/(4*np.log(2))) * (252/180) * np.cumsum(np.log(overday)**2)
print(std_parkinson)
19/193:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*np.log(2))) * (252/180) * np.cumsum(np.log(overday)**2)
print(std_parkinson)
19/194:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*np.log(2))) * (250/180) * np.cumsum(np.log(overday)**2)
print(std_parkinson)
19/195:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*np.log(2))) * (252/180) * np.cumsum(np.log(overday)**2)
print(std_parkinson)
19/196:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*252*np.log(2))) * np.cumsum(np.log(overday)**2)
print(std_parkinson)
19/197:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*252*np.log(2))) * np.cumsum(np.log(overday)**2)
print(np.sqrt(std_parkinson))
19/198:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*180*np.log(2))) * np.cumsum(np.log(overday)**2)
print(np.sqrt(std_parkinson))
19/199:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*180*np.log(2))) * np.cumprod(np.log(overday)**2)
print(np.sqrt(std_parkinson))
19/200:
overday = tsla_recent["High"] / tsla_recent["Low"]
std_parkinson = (1/(4*180*np.log(2))) * np.cumsum(np.log(overday)**2)
print(np.sqrt(std_parkinson))
19/201:
overday = np.divide(tsla_recent["High"], tsla_recent["Low"])
std_parkinson = (1/(4*180*np.log(2))) * np.cumsum(np.log(overday)**2)
print(np.sqrt(std_parkinson))
19/202:
overday = np.divide(tsla_recent["High"], tsla_recent["Low"])
std_parkinson = (1/(4*180*np.log(2))) * np.sum(np.log(overday)**2)
print(np.sqrt(std_parkinson))
19/203:
overday = np.divide(tsla_recent["High"], tsla_recent["Low"])
std_parkinson = (1/(4*180*np.log(2))) * np.sum(np.log(overday)**2)
print(1 - np.sqrt(std_parkinson))
19/204:
overday = np.divide(tsla_recent["High"], tsla_recent["Low"])
std_parkinson = (1/(4*180*np.log(2))) * np.sum(np.log(overday)**2)
print(np.sqrt(std_parkinson))
19/205:
overday = np.divide(tsla_recent["High"], tsla_recent["Low"])
std_parkinson = (1/(4*180*np.log(2))) * np.sum(np.log(overday)**2)
print(0.1 - np.sqrt(std_parkinson))
19/206:
overday = np.divide(tsla_recent["High"], tsla_recent["Low"])
std_parkinson = (1/(4*180*np.log(2))) * np.sum(np.log(overday)**2)
print(np.sqrt(std_parkinson))
19/207:
overday = np.divide(tsla_recent["High"], tsla_recent["Low"])
std_parkinson = (1/(4*180*np.log(2))) * np.sum((np.log(overday))**2)
print(np.sqrt(std_parkinson))
19/208:
overday = np.divide(tsla_recent["High"], tsla_recent["Low"])
std_parkinson = (1/(4*180*np.log(2))) * np.sum(np.log(overday**2))
print(np.sqrt(std_parkinson))
19/209:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./datasets/AMZN.csv")
tsla = pd.read_csv("./datasets/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
32/1:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./datasets/AMZN.csv")
tsla = pd.read_csv("./datasets/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
32/2: print(tsla.head())
32/3:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn).set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position");
plt.show()
32/4:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla).set(xticks=[], xlabel="Tesla Value History (2016-2021)", ylabel="Adjusted Closing Position");
plt.show()
32/5:
amzn["Pct Change"] = amzn["Adj Close"].pct_change()
tsla["Pct Change"] = tsla["Adj Close"].pct_change()
32/6:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xticks=[], xlabel="Amazon", ylabel="Percental Change (%)")
ax[1].set(xticks=[], xlabel="Tesla", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amzn["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=tsla["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
32/7:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
32/8:
amzn_recent = amzn[(amzn["Date"] > "2020-10-07") & (amzn["Date"] < "2021-04-07")]
tsla_recent = tsla[(tsla["Date"] > "2020-10-07") & (tsla["Date"] < "2021-04-07")]
32/9:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn_recent).set(xticks=[], xlabel="Amazon Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
32/10:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla_recent).set(xticks=[], xlabel="Tesla Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
32/11:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
32/12:
overday = np.divide(tsla_recent["High"], tsla_recent["Low"])
std_parkinson = (1/(4*180*np.log(2))) * np.sum(np.log(overday**2))
print(np.sqrt(std_parkinson))
32/13: variance = (tsla_recent["Avg Close"].sub(tsla_recent["Avg Close"].mean()))**2 / len(tsla_recent["Avg Close"])
32/14:
amzn_recent = amzn[(amzn["Date"] > "2020-10-07") & (amzn["Date"] < "2021-04-07")]
tsla_recent = tsla[(tsla["Date"] > "2020-10-07") & (tsla["Date"] < "2021-04-07")]
32/15:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn_recent).set(xticks=[], xlabel="Amazon Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
32/16:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
32/17: variance = (tsla_recent["Avg Close"].sub(tsla_recent["Avg Close"].mean()))**2 / len(tsla_recent["Avg Close"])
32/18: variance = (tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean()))**2 / len(tsla_recent["Adj Close"])
32/19: variance = (tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean()))**2 / len(tsla_recent["Adj Close"]);
32/20:
variance = (tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean()))**2 / len(tsla_recent["Adj Close"])
print(variance)
32/21:
variance = (tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean()))**2 / len(tsla_recent["Adj Close"]
print(variance)
32/22:
variance = (tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean()))**2 / len(tsla_recent["Adj Close"])
print(variance)
32/23:
variance = ((tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean()))**2).sum() / len(tsla_recent["Adj Close"])
print(variance)
32/24:
variance = ((tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean()))**2).sum() / len(tsla_recent["Adj Close"])
print(variance)
std = np.sqrt(variance)
print(std)
print(tsla_recent["Adj Close"].std())
32/25:
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())
variance = deviation.sum() / len(tsla_recent["Adj Close"])
print(variance)
std = np.sqrt(variance)
print(std)
32/26:
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())**2
variance = deviation.sum() / len(tsla_recent["Adj Close"])
print(variance)
std = np.sqrt(variance)
print(std)
32/27:
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())
variance = (deviation**2).sum() / len(tsla_recent["Adj Close"])
print(variance)
std = np.sqrt(variance)
print(std)
32/28:
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())
variance = (deviation**2).sum() / len(tsla_recent["Adj Close"])
std = np.sqrt(variance)
print(std)
print(std**1/2)
32/29:
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())
variance = (deviation**2).sum() / len(tsla_recent["Adj Close"])
std = np.sqrt(variance)
print(std)
print(variance**1/2)
32/30:
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())
variance = (deviation**2).sum() / len(tsla_recent["Adj Close"])
std = np.sqrt(variance)
print(std)
print(variance**2/1)
32/31:
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())
variance = (deviation**2).sum() / len(tsla_recent["Adj Close"])
std = np.sqrt(variance)
print(std)
print(variance**1/4)
32/32:
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())
variance = (deviation**2).sum() / len(tsla_recent["Adj Close"])
std = np.sqrt(variance)
print(std)
print(variance**1/8)
32/33:
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())
variance = (deviation**2).sum() / len(tsla_recent["Adj Close"])
std = np.sqrt(variance)
print(std)
print(variance**1/16)
32/34:
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())
variance = (deviation**2).sum() / len(tsla_recent["Adj Close"])
std = np.sqrt(variance)
print(std)
print(variance**1/100)
32/35:
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())
variance = (deviation**2).sum() / len(tsla_recent["Adj Close"])
std = np.sqrt(variance)
print(std)
print(variance**1/200)
32/36:
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())
variance = (deviation**2).sum() / len(tsla_recent["Adj Close"])
std = np.sqrt(variance)
print(std)
print(variance**1/164)
32/37:
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())
variance = (deviation**2).sum() / len(tsla_recent["Adj Close"])
std = np.sqrt(variance)
print(std)
print(variance**1/150)
32/38:
time_range = len(tsla_recent["Adj Close"])
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())
variance = (deviation**2).sum() / time_range
std = np.sqrt(variance)
annualized_volatilty = std * np.sqrt(time_range)
32/39:
time_range = len(tsla_recent["Adj Close"])
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())
variance = (deviation**2).sum() / time_range
std = np.sqrt(variance)
annualized_volatilty = std * np.sqrt(time_range)
print(annualized_volatilty)
32/40:
time_range = len(tsla_recent["Adj Close"])
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())
variance = (deviation**2).sum() / time_range
std = np.sqrt(variance)
annualized_volatilty = std * np.sqrt(252)
print(annualized_volatilty)
32/41:
time_range = len(tsla_recent["Adj Close"])
deviation = tsla_recent["Adj Close"].sub(tsla_recent["Adj Close"].mean())
variance = (deviation**2).sum() / time_range
std = np.sqrt(variance)
print(std)
annualized_volatilty = std * np.sqrt(252)
print(annualized_volatilty)
32/42:
time_range = len(tsla_recent["Pct Change"])
deviation = tsla_recent["Pct Change"].sub(tsla_recent["Pct Change"].mean())
variance = (deviation**2).sum() / time_range
std = np.sqrt(variance)
print(std)
annualized_volatilty = std * np.sqrt(252)
print(annualized_volatilty)
32/43:
amzn_recent = amzn[(amzn["Date"] > "2020-10-07") & (amzn["Date"] < "2021-04-07")]
tsla_recent = tsla[(tsla["Date"] > "2021-03-07") & (tsla["Date"] < "2021-04-07")]
32/44:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn_recent).set(xticks=[], xlabel="Amazon Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
32/45:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla_recent).set(xticks=[], xlabel="Tesla Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
32/46:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
32/47:
overday = np.divide(tsla_recent["High"], tsla_recent["Low"])
std_parkinson = (1/(4*180*np.log(2))) * np.sum(np.log(overday**2))
print(np.sqrt(std_parkinson))
32/48:
time_range = len(tsla_recent["Pct Change"])
deviation = tsla_recent["Pct Change"].sub(tsla_recent["Pct Change"].mean())
variance = (deviation**2).sum() / time_range
std = np.sqrt(variance)
print(std)
annualized_volatilty = std * np.sqrt(252)
print(annualized_volatilty)
32/49:
time_range = len(tsla_recent["Pct Change"])
deviation = tsla_recent["Pct Change"].sub(tsla_recent["Pct Change"].mean())
variance = (deviation**2).sum() / time_range
std = np.sqrt(variance)
print(std)
annualized_volatilty = std * np.sqrt(252)
print(annualized_volatilty)
32/50:
cumsum = (tsla_recent["Pct Change"]**2).sum()
cchv = 1/time_range * cumsum
print(cchv)
32/51:
cumsum = (tsla_recent["Pct Change"]**2).sum()
cchv = 1/time_range * cumsum
print(np.sqrt(cchv))
32/52:
values = np.log(tsla_recent["High"] / tsla_recent["Low"])**2
parkinson = 1/(4*time_range*np.log(2)) (values**2).sum()
32/53:
values = np.log(tsla_recent["High"] / tsla_recent["Low"])**2
parkinson = 1/(4*time_range*np.log(2)) * (values**2).sum()
32/54:
values = np.log(tsla_recent["High"] / tsla_recent["Low"])**2
parkinson = 1/(4*time_range*np.log(2)) * (values**2).sum()
print(parkinson)
32/55:
values = np.log(tsla_recent["High"] / tsla_recent["Low"])**2
parkinson = (1/(4*time_range*np.log(2))) * (values**2).sum()
print(parkinson)
32/56:
values = np.log(tsla_recent["High"] / tsla_recent["Low"])**2
parkinson = (1/(4*time_range*np.log(2))) * (values**2).sum()
print(np.sqrt(parkinson))
32/57:
values = np.log(tsla_recent["High"] / tsla_recent["Low"])**2
parkinson = (1/(4*time_range*np.log(2))) * (values).sum()
print(np.sqrt(parkinson))
32/58:
values = (1/(4*time_range*np.log(2))) * (np.log(tsla_recent["High"] / tsla_recent["Low"])**2)
parkinson = values
print(np.sqrt(parkinson))
32/59:
values = (1/(4*time_range*np.log(2))) * (np.log(tsla_recent["High"] / tsla_recent["Low"])**2)
parkinson = values.sum()
print(np.sqrt(parkinson))
32/60:
values = (1/(4*time_range*np.log(2))) * (np.log(tsla_recent["High"] / tsla_recent["Low"])**2)
parkinson = values.sum() / time_range
print(np.sqrt(parkinson))
32/61:
def GKYZ(df, window=180):
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df[i]["Open"] / df[i-1]["Close"])
        log_hl = np.log(df[i]["High"] / df[i]["Low"])
        log_co = np.log(df[i]["Close"] / df[i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2

        return rs.rolling(window=window).func(lambda data: data.mean() * np.sqrt(trading_days_in_year))

print(GKYZ(tsla_recent))
32/62:
def GKYZ(df, window=180):
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df[i]["Open"] / df[i-1]["Close"])
        log_hl = np.log(df[i]["High"] / df[i]["Low"])
        log_co = np.log(df[i]["Close"] / df[i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2

        return rs.rolling(window=window).func(lambda data: data.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/63:
def GKYZ(df, window=180):
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df[i]["Open"] / df[i-1]["Close"])
        log_hl = np.log(df[i]["High"] / df[i]["Low"])
        log_co = np.log(df[i]["Close"] / df[i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2

        return rs.rolling(window=window).func(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/64:
def GKYZ(df, window=180):
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        log_hl = np.log(df[i]["High"] / df[i]["Low"])
        log_co = np.log(df[i]["Close"] / df[i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2

        return rs.rolling(window=window).func(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/65:
def GKYZ(df, window=180):
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[i:]["Open"] / df.iloc[i-1]["Close"])
        log_hl = np.log(df[i]["High"] / df[i]["Low"])
        log_co = np.log(df[i]["Close"] / df[i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2

        return rs.rolling(window=window).func(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/66:
def GKYZ(df, window=180):
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df[i]["High"] / df[i]["Low"])
        log_co = np.log(df[i]["Close"] / df[i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2

        return rs.rolling(window=window).func(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/67:
def GKYZ(df, window=180):
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2

        return rs.rolling(window=window).func(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/68:
def GKYZ(df, window=180):
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2

        return rs.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/69:
def GKYZ(df, window=180):
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2

        return rs.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year))

print(GKYZ(tsla_recent))
32/70:
def GKYZ(df, window=180):
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2

        return rs.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/71:
def GKYZ(df, window=30):
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2

        return rs.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/72:
def GKYZ(df, window=180):
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2

        return rs.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/73:
def GKYZ(df, window=180):
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2

        return rs.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent).sum())
32/74:
def GKYZ(df, window=180):
    results = []
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results[i] = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent).sum())
32/75:
def GKYZ(df, window=180):
    results = {}
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results[i] = rs
    
    return pd.DataFrame(results).rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent).sum())
32/76:
def GKYZ(df, window=180):
    results = {}
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results[i] = rs
    
    return pd.DataFrame(results).rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/77:
def GKYZ(df, window=180):
    results = {}
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results[i] = rs
    
    return pd.DataFrame(results).rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year))

print(GKYZ(tsla_recent))
32/78:
def GKYZ(df, window=180):
    results = {}
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results[] = rs
    
    return pd.DataFrame(results).rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).d

print(GKYZ(tsla_recent))
32/79:
def GKYZ(df, window=180):
    results = {}
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results[i] = [rs]
    
    return pd.DataFrame(results).rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).d

print(GKYZ(tsla_recent))
32/80:
def GKYZ(df, window=180):
    results = {}
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results[i] = [rs]
    
    return pd.DataFrame(results).rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/81:
def GKYZ(df, window=180):
    results = pd.DataFrame()
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results.append(rs)
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/82:
def GKYZ(df, window=180):
    results = pd.DataFrame()
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results.append(rs, ignore_index=True)
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/83:
def GKYZ(df, window=180):
    results = pd.DataFrame()
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results.append(rs, ignore_index=True)
    
    print(results.describe())
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/84:
def GKYZ(df, window=180):
    results = pd.DataFrame({})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results.append(rs, ignore_index=True)
    
    print(results.describe())
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/85:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results.append(rs, ignore_index=True)
    
    print(results.describe())
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/86:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results.append(rs, ignore_index=True)
    
    print(results.head())
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/87:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        print("hi")
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results.append(rs, ignore_index=True)
    
    print(results.head())
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/88:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results.append(rs, ignore_index=True)
    
    print(results.head())
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/89:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        print(rs)
        results.append(rs, ignore_index=True)
    
    print(results.head())
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/90:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    print(results.head())
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/91:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/92:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    print(results.head())
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/93:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    print(results)
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/94:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results.append(rs, ignore_index=True)
    
    print(results)
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/95:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    print(results)
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/96:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    print(results)
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/97:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])

        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    print(results)
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent).sum())
32/98:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])
        print(log_ocprev)
        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    print(results)
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent).sum())
32/99:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[:i]["Open"] / df.iloc[:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])
        print(log_ocprev)
        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent).sum())
32/100:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[i:]["Open"] / df.iloc[i-1:]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])
        print(log_ocprev)
        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent).sum())
32/101:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[i:i]["Open"] / df.iloc[i-1:i-1]["Close"])
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])
        print(log_ocprev)
        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent).sum())
32/102:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[i:i]["Open"] / df.iloc[i-1:i-1]["Close"])
        print(log_ocprev)
        log_hl = np.log(df.iloc[:i]["High"] / df.iloc[:i]["Low"])
        log_co = np.log(df.iloc[:i]["Close"] / df.iloc[:i]["Close"])
        print(log_ocprev)
        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent).sum())
32/103:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        print(log_ocprev)
        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent).sum())
32/104:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        print(log_ocprev)
        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/105:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        #log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        print(i)
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/106:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df[i]["Open"] if(data == df[0]) else df.iloc[i-1]["Close"]
        #log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        print(i)
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/107:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df[i]["Open"] if(data == df.iloc[0]) else df.iloc[i-1]["Close"]
        #log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        print(i)
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/108:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df[i]["Open"] if(data == df.iloc[:0]) else df.iloc[i-1]["Close"]
        #log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        print(i)
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/109:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df[i]["Open"] if(data == df.iloc[0:]) else df.iloc[i-1]["Close"]
        #log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        print(i)
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/110:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df[i]["Open"] if(data == df.iloc[0]) else df.iloc[i-1]["Close"]
        #log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        print(i)
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/111:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df[i]["Open"] if(data.index == df.iloc[0].index) else df.iloc[i-1]["Close"]
        #log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        print(i)
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/112:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        print(i)
        #previous_close = df[i]["Open"] if(data.index == df.iloc[0].index) else df.iloc[i-1]["Close"]
        #log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/113:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df[i]["Open"] if(i == df.iloc[0].index) else df.iloc[i-1]["Close"]
        #log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/114:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df[i]["Open"] if(df.iloc[0].index.any(i)) else df.iloc[i-1]["Close"]
        #log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/115:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df.iloc[i]["Open"] if(df.iloc[0].index.any(i)) else df.iloc[i-1]["Close"]
        #log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/116:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        print(df.iloc[0].index)
        #previous_close = df.iloc[i]["Open"] if(df.iloc[0].index.any(i)) else df.iloc[i-1]["Close"]
        #log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/117:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        print(df.iloc[0])
        #previous_close = df.iloc[i]["Open"] if(df.iloc[0].index.any(i)) else df.iloc[i-1]["Close"]
        #log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/118:
def GKYZ(df, window=180):
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        print(df.iloc[0].index)
        #previous_close = df.iloc[i]["Open"] if(df.iloc[0].index.any(i)) else df.iloc[i-1]["Close"]
        #log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/119:
def GKYZ(df, window=180):
    first = True
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df.iloc[i]["Open"] if(first == True) else df.iloc[i-1]["Close"]
        first = False
        #log_ocprev = np.log(df.iloc[i]["Open"] / df.iloc[i-1]["Close"])
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/120:
def GKYZ(df, window=180):
    first = True
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df.iloc[i]["Open"] if(first == True) else df.iloc[i-1]["Close"]
        first = False
        log_ocprev = np.log(df.iloc[i]["Open"] / previous_close)
        log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/121:
def GKYZ(df, window=180):
    first = True
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df[i]["Open"] if(first == True) else df.iloc[i-1]["Close"]
        first = False
        log_ocprev = np.log(df.iloc[i]["Open"] / previous_close)
        log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/122:
def GKYZ(df, window=180):
    first = True
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df.loc[i]["Open"] if(first == True) else df.iloc[i-1]["Close"]
        first = False
        log_ocprev = np.log(df.iloc[i]["Open"] / previous_close)
        log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/123:
def GKYZ(df, window=180):
    first = True
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df.iloc[i]["Open"] if(first == True) else df.iloc[i-1]["Close"]
        first = False
        log_ocprev = np.log(df.iloc[i]["Open"] / previous_close)
        log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/124:
def GKYZ(df, window=180):
    first = True
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df.iloc[i]["Open"] if(first == True) else df.iloc[i]["Close"]
        first = False
        log_ocprev = np.log(df.iloc[i]["Open"] / previous_close)
        log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/125:
def GKYZ(df, window=180):
    first = True
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df.iloc[:,i]["Open"] if(first == True) else df.iloc[i]["Close"]
        first = False
        log_ocprev = np.log(df.iloc[i]["Open"] / previous_close)
        log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/126:
def GKYZ(df, window=180):
    first = True
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df.iloc[:,i]["Open"] if(first == True) else df.iloc[:,i]["Close"]
        first = False
        log_ocprev = np.log(df.iloc[i]["Open"] / previous_close)
        log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/127:
def GKYZ(df, window=180):
    first = True
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df.iloc[:i]["Open"] if(first == True) else df.iloc[:i]["Close"]
        first = False
        log_ocprev = np.log(df.iloc[i]["Open"] / previous_close)
        log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/128:
def GKYZ(df, window=180):
    first = True
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df.iloc[:i]["Open"] if(first == True) else df.iloc[:i]["Close"]
        first = False
        #log_ocprev = np.log(df.iloc[i]["Open"] / previous_close)
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/129:
def GKYZ(df, window=180):
    first = True
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df.iloc[:i]["Open"] if(first == True) else df.iloc[:i]["Close"]
        print(previous_close)
        first = False
        #log_ocprev = np.log(df.iloc[i]["Open"] / previous_close)
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/130:
def GKYZ(df, window=180):
    first = True
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df.iloc[:i]["Open"] if(first == True) else df.iloc[:i-1]["Close"]
        print(previous_close)
        first = False
        #log_ocprev = np.log(df.iloc[i]["Open"] / previous_close)
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/131:
def GKYZ(df, window=180):
    first = True
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df.iloc[:i]["Open"] if(first == True) else df.iloc[:i-1]["Close"]
        print(df.iloc[:i]["Open"])
        print(previous_close)
        first = False
        #log_ocprev = np.log(df.iloc[i]["Open"] / previous_close)
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
32/132:
def GKYZ(df, window=180):
    first = True
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df.iloc[i:]["Open"] if(first == True) else df.iloc[i-1:]["Close"]
        print(df.iloc[:i]["Open"])
        print(previous_close)
        first = False
        #log_ocprev = np.log(df.iloc[i]["Open"] / previous_close)
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
36/1: \sigma _{t}^{2}=\alpha _{0}+\alpha _{1}\epsilon _{{t-1}}^{2}+\cdots +\alpha _{q}\epsilon _{{t-q}}^{2}=\alpha _{0}+\sum _{{i=1}}^{q}\alpha _{{i}}\epsilon _{{t-i}}^{2},
36/2: ### Use in Python
36/3: import arch_model from arch
40/1:
import arch_model from arch
import pandas as pd

sp_data = pd.read_csv("./datasets/sp.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/2:
from arch import arch_model
import pandas as pd

sp_data = pd.read_csv("./datasets/sp.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/3:
from arch import arch_model
import pandas as pd

sp_data = pd.read_csv("./datasets/sp.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/4:
from arch import arch_model
import pandas as pd

sp_data = pd.read_csv("./datasets/SP500.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/5:
from arch import arch_model
import pandas as pd
import matplotlib as plt

sp_data = pd.read_csv("./datasets/SP500.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/6:
from arch import arch_model
import pandas as pd
import matplotlib.plot as plt

sp_data = pd.read_csv("./datasets/SP500.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/7:
from arch import arch_model
import pandas as pd
import matplotlib.pyplot as plt

sp_data = pd.read_csv("./datasets/SP500.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/8:
### Mean Model assumptions
The mean has an influence on the forecast of our model. Generally, the simplest approach for a mean computation is as a _constant mean_. The mean _can_ be separately computed and fetched into the GARCH model by using `zero` for the `mean` parameter. A mean can also be autoregressively computed with `AR` for the `mean` parameter.
40/9:
### Standardized Residuals
A residual is the difference between the predicted return and the mean return. 
If we want to compare the residual of two different assets, we may come across a big difference in the number scale of the residuals between the respective assets. To be able to compare residuals between assets, we need to standardize them into one format. A residual is therefore put in _relation to_ the computed (conditional) volatility. As such, we can compare the relative standarized residual of two assets.

${\displaystyle t_{i}={{\varepsilon}}_{t} \over {\sigma}_{t}}}$
40/10: ### Asymmetrical Volatility Impact
40/11:
### Asymmetrical Volatility Impact
The standard GARCH model assumes that both positive and negative news have the same impact on volatility. In reality, negative news have a stronger impact on the drop of a stock, while positive news have a mediocre impact on the rise of a stock's value. Colloquially, its said that a stock "takes the stairs up and the elevator down", i.e. the value grows slowly but falls fast.
40/12:
### Asymmetrical Shocks
The standard GARCH model assumes that both positive and negative news have the same impact on volatility. In reality, negative news have a stronger impact on the drop of a stock, while positive news have a mediocre impact on the rise of a stock's value. Colloquially, its said that a stock "takes the stairs up and the elevator down", i.e. the value grows slowly but falls fast.

Therefore, GJR-GARCH and EGARCH (Exponential) have been developed to cover this phenomena into the model. GJR-Garch introduces a conditional parameter that will add weight to the ${{\alpha}}$ calculation if ${{r}_{t-1}}$ (residual) is negative.
40/13: bitcoin_data = pd.read_csv("./datasets/bitcoin.csv")
40/14:
#### Fit GJR-GARCH, EGARCH to cryptocurrency

gjr_gm = arch_model(bitcoin_data['Return'], p = 1, q = 1, o = 1, vol = 'GARCH', dist = 't')
gjrgm_result = gjr_gm.fit(disp = 'off')

egarch_gm = arch_model(bitcoin_data['Return'], p = 1, q = 1, o = 1, vol = 'EGARCH', dist = 't')
egarch_result = egarch_gm.fit(disp = 'off')

# Plot the actual Bitcoin returns
plt.plot(bitcoin_data['Return'], color = 'grey', alpha = 0.4, label = 'Price Returns')

# Plot GJR-GARCH estimated volatility
plt.plot(gjrgm_vol, color = 'gold', label = 'GJR-GARCH Volatility')

# Plot EGARCH  estimated volatility
plt.plot(egarch_vol, color = 'red', label = 'EGARCH Volatility')

plt.legend(loc = 'upper right')
plt.show()
40/15:
#### Fit GJR-GARCH, EGARCH to cryptocurrency

gjr_gm = arch_model(bitcoin_data['Return'], p = 1, q = 1, o = 1, vol = 'GARCH', dist = 't')
gjrgm_result = gjr_gm.fit(disp = 'off')
gjrgm_vol = gjrgm_result.conditional_volatility

egarch_gm = arch_model(bitcoin_data['Return'], p = 1, q = 1, o = 1, vol = 'EGARCH', dist = 't')
egarch_result = egarch_gm.fit(disp = 'off')
egarch_vol = egarch_result.conditional_volatility

# Plot the actual Bitcoin returns
plt.plot(bitcoin_data['Return'], color = 'grey', alpha = 0.4, label = 'Price Returns')

# Plot GJR-GARCH estimated volatility
plt.plot(gjrgm_vol, color = 'gold', label = 'GJR-GARCH Volatility')

# Plot EGARCH  estimated volatility
plt.plot(egarch_vol, color = 'red', label = 'EGARCH Volatility')

plt.legend(loc = 'upper right')
plt.show()
40/16:
### Expanding and Sliding Rolling Window Forecasting
The great achievement of reading financial data is the attempt to predict future patterns. We can achieve a lot with a rolling window approach to make predictions about the future from past behaviour. We can start with a small starting window and increase the width of the window incrementally. In contrary to other domains, with financial data, this approach of an _expanding_ rolling window **does not translate to** "more data = better results". Financial assets have changing dependent variables over the course of time, so recent data could and should be weighted appropriately in a forecast. We can therefore also use a _sliding_ rolling window to limit the range of data the latest iteration of the forecast is working with.

![Visual to Expanding vs. Sliding Rolling Window](https://octodex.github.com/images/yaktocat.png)
40/17:
## Model Performance Evaluation

### Null Hypothesis on Parameter relevance
The GARCH model requires many parameters as ${\alpha}$, ${\beta}$, ${\omega}$ etc. to be defined. We can check the significance of a parameter by testing against a null hypothesis (H0) with the p- and t-values of a parameter. Our H0 hypothesis states that the parameter is zero. By standard, we require a 95% confidence level to regard the H0 thesis as relevant. Therefore, if the p-value of a parameter is below 0.05, we discard the H0 hypothesis as false and assume a signifiance of the parameter.

With t-statistics, we can also decide on the necessity of a parameter. The t-statistic is the difference of estimated parameter value and expected mean in relation to the standard error. 

${t_{\delta} = {{\widebridgeabove} - exp. ${\mu}}}$
40/18:
# Print model fitting summary
print(gm_result.summary())

# Get parameter stats from model summary
para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/19:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 't')

gm_result = basic_gm.fit(update_freq = 8)

print(gm_result.summary())

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/20:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 't')

gm_result = basic_gm.fit(update_freq = 8)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/21:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 't')

gm_result = basic_gm.fit(update_freq = 4)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/22:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')

gm_result = basic_gm.fit(update_freq = 4)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/23:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1, o = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')

gm_result = basic_gm.fit(update_freq = 4)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/24:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1, o = 0.5,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')

gm_result = basic_gm.fit(update_freq = 4)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/25:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1, o = 0.1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')

gm_result = basic_gm.fit(update_freq = 4)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/26:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')

gm_result = basic_gm.fit(update_freq = 4)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/27:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 8,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')

gm_result = basic_gm.fit(update_freq = 4)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/28:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')

gm_result = basic_gm.fit(update_freq = 4)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/29:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1, o = 2,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')

gm_result = basic_gm.fit(update_freq = 4)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/30:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1, o = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')

gm_result = basic_gm.fit(update_freq = 4)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/31:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1, o = 1,
                      mean = 'constant', vol = 'GARCH', dist = 't')

gm_result = basic_gm.fit(update_freq = 4)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/32:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1, o = 1,
                      mean = 'constant', vol = 'GARCH', dist = 't')

gm_result = basic_gm.fit(update_freq = 2)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/33:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1, o = 1,
                      mean = 'constant', vol = 'GARCH', dist = 't')

gm_result = basic_gm.fit(update_freq = 4)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/34:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1, o = 1,
                      mean = 'constant', vol = 'GARCH', dist = 't')

gm_result = basic_gm.fit(update_freq = 3)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/35:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1, o = .8,
                      mean = 'constant', vol = 'GARCH', dist = 't')

gm_result = basic_gm.fit(update_freq = 3)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/36:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1, o = .6,
                      mean = 'constant', vol = 'GARCH', dist = 't')

gm_result = basic_gm.fit(update_freq = 3)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/37:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = .5, 
                      mean = 'constant', vol = 'GARCH', dist = 't')

gm_result = basic_gm.fit(update_freq = 3)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/38:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1, 
                      mean = 'constant', vol = 'GARCH', dist = 't')

gm_result = basic_gm.fit(update_freq = 3)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/39:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1, o=1,
                      mean = 'constant', vol = 'GARCH', dist = 't')

gm_result = basic_gm.fit(update_freq = 3)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/40:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1, o=1,
                      mean = 'constant', vol = 'GARCH', dist = 't')

gm_result = basic_gm.fit(update_freq = 3)

print(gm_result.summary())

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/41:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'EGARCH', dist = 't')

gm_result = basic_gm.fit(update_freq = 3)

print(gm_result.summary())

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/42:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'EGARCH', dist = 't')

gm_result = basic_gm.fit(update_freq = 3)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/43: In the above example, the `omega` value is bigger than 0.05 (value: 0.43) and therefore makes the H0 hypothesis significant. `omega` should therefore be considered as a relevant parameter.
40/44: #### Testing the p-value
40/45: #### Testing with t-statistics
40/46:
# Get parameter stats from model summary
para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'std-err': gm_result.std_err, 
                             't-value': gm_result.tvalues})

# Verify t-statistic by manual calculation
calculated_t = para_summary['parameter']/para_summary['std-err']

# Print calculated t-value
print(calculated_t)

# Print parameter stats
print(para_summary)
40/47: The t-statistics are in agreement with the p-values, highlighting that only the `omega` value is under our threshold of 2, indicating that the omega parameter is not statistically significant and can be left out of the model.
40/48:
from arch import arch_model
import pandas as pd
import matplotlib as plt

sp_data = pd.read_csv("./datasets/SP500.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/49:
from arch import arch_model
import pandas as pd
import matplotlib.pyplot as plt

sp_data = pd.read_csv("./datasets/SP500.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/50:
from statsmodels.graphics import plot_acf

# Create and fit model for S&P 500 return data
sp_garch = arch_model(sp_data["Return"], p = 1, q = 1, type = "GARCH", dist = "normal")
sp_result = sp_garch.fit()

std_resid = sp_result.std_resid

# Plot the standardized residuals
plt.plot(std_resid)
plt.title('Standardized Residuals')
plt.show()

# Generate ACF plot of the standardized residuals
plot_acf(std_resid, alpha = .05)
plt.show()
40/51:
from statsmodels.graphics.tsaplots import plot_acf

# Create and fit model for S&P 500 return data
sp_garch = arch_model(sp_data["Return"], p = 1, q = 1, type = "GARCH", dist = "normal")
sp_result = sp_garch.fit()

std_resid = sp_result.std_resid

# Plot the standardized residuals
plt.plot(std_resid)
plt.title('Standardized Residuals')
plt.show()

# Generate ACF plot of the standardized residuals
plot_acf(std_resid, alpha = .05)
plt.show()
40/52:
from statsmodels.graphics.tsaplots import plot_acf

# Create and fit model for S&P 500 return data
sp_garch = arch_model(sp_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "normal")
sp_result = sp_garch.fit()

std_resid = sp_result.std_resid

# Plot the standardized residuals
plt.plot(std_resid)
plt.title('Standardized Residuals')
plt.show()

# Generate ACF plot of the standardized residuals
plot_acf(std_resid, alpha = .05)
plt.show()
40/53:
from statsmodels.graphics.tsaplots import plot_acf

# Create and fit model for S&P 500 return data
sp_garch = arch_model(sp_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "normal")
sp_result = sp_garch.fit(update_freq=4)

std_resid = sp_result.std_resid

# Plot the standardized residuals
plt.plot(std_resid)
plt.title('Standardized Residuals')
plt.show()

# Generate ACF plot of the standardized residuals
plot_acf(std_resid, alpha = .05)
plt.show()
40/54:
The standard residual indicates no clustering and is similar to a white noise pattern. This is a good indicator that our model is sound.

The data points of our autocorrelation check highlights that most values are in or close to our confidence level of 95% (0.05), meaning that the chance for an autocorrelation is very low (below or about 5%). The value for an autocorrelation of the first value in the time-series is 1.0, as the relation from _t0_ to itself is self-evidently complete.
40/55:
#### Ljung-Box test
A Ljung-Box test is another statistical test for any group of autocorrelations in a time series. It's null hypothesis can be stated as: The data are independetly distributed (no observed (serial) correlation). It's a test widely used in time series analysis as in this example of econometrics.
40/56:
from statsmodels.stats.diagnostic import acorr_ljungbox

# Perform Ljung-Box test
lb_test = acorr_ljungbox(std_resid , lags = 10)

# Print the p-values
print('P-values are: ', lb_test[1])
40/57:
from statsmodels.stats.diagnostic import acorr_ljungbox

# Perform Ljung-Box test
lb_test = acorr_ljungbox(std_resid , lags = 10, return_df=True)

# Print the p-values
print('P-values are: ', lb_test[1])
40/58:
from statsmodels.stats.diagnostic import acorr_ljungbox

# Perform Ljung-Box test
lb_test = acorr_ljungbox(std_resid , lags = 10, return_df=True)

# Print the p-values
print('P-values are: ', lb_test)
40/59:
from statsmodels.stats.diagnostic import acorr_ljungbox

# Perform Ljung-Box test
lb_test = acorr_ljungbox(std_resid , lags = 10, return_df=True)

# Print the p-values
print('P-values are: ', lb_test[1])
40/60:
from statsmodels.stats.diagnostic import acorr_ljungbox

# Perform Ljung-Box test
lb_test = acorr_ljungbox(std_resid , lags = 10, return_df=True)

# Print the p-values
print('P-values are: ', lb_test["lb_value"])
40/61:
from statsmodels.stats.diagnostic import acorr_ljungbox

# Perform Ljung-Box test
lb_test = acorr_ljungbox(std_resid , lags = 10, return_df=True)

# Print the p-values
print('P-values are: ', lb_test[lb_test["lb_value"]])
40/62:
from statsmodels.stats.diagnostic import acorr_ljungbox

# Perform Ljung-Box test
lb_test = acorr_ljungbox(std_resid , lags = 10, return_df=True)

# Print the p-values
print('P-values are: ', lb_test])
40/63:
from statsmodels.stats.diagnostic import acorr_ljungbox

# Perform Ljung-Box test
lb_test = acorr_ljungbox(std_resid , lags = 10, return_df=True)

# Print the p-values
print('P-values are: ', lb_test)
40/64:
from statsmodels.stats.diagnostic import acorr_ljungbox

# Perform Ljung-Box test
lb_test = acorr_ljungbox(std_resid , lags = 10, return_df=True)

# Print the p-values
print('P-values are: ', lb_test[lb_test["lb_pvalue"])
40/65:
from statsmodels.stats.diagnostic import acorr_ljungbox

# Perform Ljung-Box test
lb_test = acorr_ljungbox(std_resid , lags = 10, return_df=True)

# Print the p-values
print('P-values are: ', lb_test[lb_test["lb_pvalue"]])
40/66:
from statsmodels.stats.diagnostic import acorr_ljungbox

# Perform Ljung-Box test
lb_test = acorr_ljungbox(std_resid , lags = 10, return_df=True)

# Print the p-values
print('P-values are: ', lb_test["lb_pvalue"])
40/67:
from statsmodels.stats.diagnostic import acorr_ljungbox

# Perform Ljung-Box test
lb_test = acorr_ljungbox(std_resid , lags = 10, return_df=True)

# Print the p-values
print('P-values are:\n', lb_test["lb_pvalue"])
40/68:
from statsmodels.stats.diagnostic import acorr_ljungbox

# Perform Ljung-Box test
lb_test = acorr_ljungbox(std_resid , lags = 10, return_df=True)

# Print the p-values
print('P-values are:\n',lb_test["lb_pvalue"])
40/69:
from statsmodels.stats.diagnostic import acorr_ljungbox

# Perform Ljung-Box test
lb_test = acorr_ljungbox(std_resid , lags = 10, return_df=True)

# Print the p-values
print('P-values are:\n', lb_test["lb_pvalue"])
40/70: The Ljung-Box test supports our findings with the preceeding Autocorrelation Function (ACF): The null hypothesis cannot be rejected and therefore no signifcant autorrelations can be detected - the model is doing a decent job.
40/71:
### Backtesting
Backtesting allows us to review the precision of our forecasted model comapres to the actual historical data. Did our model perform well? For that, while we used in-sample data of our model, we will determine the error of our prediction to the actual data looking at the out-of-sample data.

The smaller the error, the better our model performed. We either determine the _Mean Absolute Error (MAE)_ or _Mean Squared Error (MSE)_. Both are available in the `sklean.metrics` package under `mean_absolute_error()` and `mean_squared_error()`.
40/72:
basic_gm = arch_model(bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start = "2019-01-01")

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
40/73:
basic_gm = arch_model(bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start = "2019-01-01")

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/74:
basic_gm = arch_model(bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start = "2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/75:
basic_gm = arch_model(bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start = "2019-01-01", reindex=True)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/76:
basic_gm = arch_model(bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start = "2019-01-01")

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/77:
basic_gm = arch_model(bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start = ["2019-01-01"])

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/78:
basic_gm = arch_model(bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start = "2019-01-01")

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/79:
basic_gm = arch_model(bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start = "2019-01-01")

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/80:
basic_gm = arch_model(bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start = "2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/81:
basic_gm = arch_model(bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start = ["2019-01-01"], reindex=False)

mean_forecast = gm_forecast.mean[["2019-01-01"]:]
variance_forecast = gm_forecast.variance[["2019-01-01"]:]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/82:
from arch import arch_model
import pandas as pd
import matplotlib.pyp as plt
import datetime as dt

sp_data = pd.read_csv("./datasets/SP500.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/83:
from arch import arch_model
import pandas as pd
import matplotlib.pyplot as plt
import datetime as dt

sp_data = pd.read_csv("./datasets/SP500.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/84:
basic_gm = arch_model(bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start = dt.datetime(2019,1,1), reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/85:
basic_gm = arch_model(bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-1-1")

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/86:
basic_gm = arch_model(bitcoin_data, p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-1-1")

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/87:

basic_gm = arch_model(bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-1-1")

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/88:

basic_gm = arch_model(bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(horizons=10, start="2019-01-01")

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/89:

basic_gm = arch_model(bitcoin_data[bitcoin_data["Date"] >= "2019-01-01"]["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01")

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/90:

mod_data = bitcoin_data.set_index("Date")

basic_gm = arch_model(bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01")

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/91:

mod_data = bitcoin_data.set_index("Date")

basic_gm = arch_model(mod_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01")

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/92:

bitcoin_data["Datetime"] = pd.to_datetime(df["Date"] + " " + df["Time"])
mod_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(mod_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01")

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/93:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"] + " " + bitcoin_data["Time"])
mod_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(mod_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01")

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/94:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
mod_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(mod_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01")

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

q_parametric = basic_gm.distribution.ppf(0.05, )
40/95:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01")

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

#q_parametric = basic_gm.distribution.ppf(0.05, )
40/96:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.summary()

#q_parametric = basic_gm.distribution.ppf(0.05, )
40/97:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
print(gm_result.summary())

#q_parametric = basic_gm.distribution.ppf(0.05, )
40/98:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
print(gm_result.params.nu)

#q_parametric = basic_gm.distribution.ppf(0.05, )
40/99:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

#q_parametric = basic_gm.distribution.ppf(0.05, )
40/100:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

q_parametric = basic_gm.distribution.ppf(0.05, nu)
40/101:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

# 95% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast + np.sqrt(variance_forecast) * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)
40/102:
from arch import arch_model
import pandas as pd
import matplotlib.plot as plt
import datetime as dt
import numpy as np

sp_data = pd.read_csv("./datasets/SP500.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/103:
from arch import arch_model
import pandas as pd
import matplotlib.pyplot as plt
import datetime as dt
import numpy as np

sp_data = pd.read_csv("./datasets/SP500.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/104:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

# 95% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast + np.sqrt(variance_forecast) * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)

plt.scatter(x=variance_forecast.index, y=bitcoin_data["Return"]["2019-01-01"], color="orange", label="Bitcoin Daily Returns")
40/105:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

# 95% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast + np.sqrt(variance_forecast) * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)

plt.scatter(x=variance_forecast.index, y=bitcoin_data.Return["2019-01-01"], color="orange", label="Bitcoin Daily Returns")
40/106:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

# 95% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast + np.sqrt(variance_forecast) * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)

plt.scatter(x=variance_forecast.index, y=bitcoin_data.Return["2019-1-1"], color="orange", label="Bitcoin Daily Returns")
40/107:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

# 95% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast + np.sqrt(variance_forecast) * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)

plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01"], color="orange", label="Bitcoin Daily Returns")
40/108:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

# 95% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast + np.sqrt(variance_forecast) * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)

plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.["Return"]["2019-01-01":], color="orange", label="Bitcoin Daily Returns")
40/109:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

# 95% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast + np.sqrt(variance_forecast) * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)

plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")
40/110:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

# 95% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast + np.sqrt(variance_forecast) * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot parametric Value at Risk
plt.plot(data=parametric_VaR, color= "red", label =" 5% Parametric VaR")
40/111:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

# 95% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast + np.sqrt(variance_forecast) * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot parametric Value at Risk
plt.plot(data=parametric_VaR, color= "red", label =" 5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/112:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

# 95% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot parametric Value at Risk
plt.plot(data=parametric_VaR, color= "red", label =" 5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/113:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

# 95% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)


# plot parametric Value at Risk
plt.plot(data=parametric_VaR, color= "red", label =" 5% Parametric VaR")

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

plt.legend(loc = "upper right")
plt.show()
40/114:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

# 95% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)


# plot parametric Value at Risk
plt.plot(parametric_VaR, color= "red", label =" 5% Parametric VaR")
# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

plt.legend(loc = "upper right")
plt.show()
40/115:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

# 95% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)


# plot parametric Value at Risk
plt.plot(parametric_VaR, color= "red", label =" 5% Parametric VaR")
# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

plt.legend(loc = "upper right")
plt.show()
40/116:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

# 95% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot parametric Value at Risk
plt.plot(parametric_VaR, color= "red", label =" 5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/117:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu

# 5% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot parametric Value at Risk
plt.plot(parametric_VaR, color= "red", label =" 5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/118:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t")
gm_result = basic_gm.fit()

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False)

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu
40/119:
# 5% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot parametric Value at Risk
plt.plot(parametric_VaR, color= "red", label =" 5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/120: q_empirical = bitcoin_data["Return"].quantile(0.05)
40/121:
q_empirical = bitcoin_data["Return"].quantile(0.05)

empirical_VaR = mean_forecast + np.sqrt(variance_forecast) * q_empirical
empirical_VaR = pd.DataFrame(empirical_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot parametric Value at Risk
plt.plot(empirical_VaR, color= "red", label =" 5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/122:
q_empirical = gm_result.std_resid.quantile(0.05)

empirical_VaR = mean_forecast + np.sqrt(variance_forecast) * q_empirical
empirical_VaR = pd.DataFrame(empirical_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot parametric Value at Risk
plt.plot(empirical_VaR, color= "red", label =" 5% Empirical VaR")

plt.legend(loc = "upper right")
plt.show()
40/123:
q_empirical = gm_result.std_resid.quantile(0.05)

empirical_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_empirical
empirical_VaR = pd.DataFrame(empirical_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot parametric Value at Risk
plt.plot(empirical_VaR, color= "red", label =" 5% Empirical VaR")

plt.legend(loc = "upper right")
plt.show()
40/124:
q_empirical = gm_result.std_resid.quantile(0.05)

empirical_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_empirical
empirical_VaR = pd.DataFrame(empirical_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot empirical Value at Risk
plt.plot(empirical_VaR, color= "red", label = "5% Empirical VaR")

# plot parametric Value at Risk for comparison
plt.plot(parametric_VaR, color = "green", label = "5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/125:
q_empirical = gm_result.std_resid.quantile(0.05)

empirical_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_empirical
empirical_VaR = pd.DataFrame(empirical_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot empirical Value at Risk
plt.plot(empirical_VaR, color= "red", label = "5% Empirical VaR")

# plot parametric Value at Risk for comparison
plt.plot(parametric_VaR, color = "brown", label = "5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/126:
q_empirical = gm_result.std_resid.quantile(0.05)

empirical_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_empirical
empirical_VaR = pd.DataFrame(empirical_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot empirical Value at Risk
plt.plot(empirical_VaR, color= "red", label = "5% Empirical VaR")

# plot parametric Value at Risk for comparison
plt.plot(parametric_VaR, color = "yellow", label = "5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/127:
q_empirical = gm_result.std_resid.quantile(0.05)

empirical_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_empirical
empirical_VaR = pd.DataFrame(empirical_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot empirical Value at Risk
plt.plot(empirical_VaR, color= "green", label = "5% Empirical VaR")

# plot parametric Value at Risk for comparison
plt.plot(parametric_VaR, color = "red", label = "5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/128:
q_empirical = gm_result.std_resid.quantile(0.05)

empirical_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_empirical
empirical_VaR = pd.DataFrame(empirical_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot empirical Value at Risk
plt.plot(empirical_VaR, color= "yellow", label = "5% Empirical VaR")

# plot parametric Value at Risk for comparison
plt.plot(parametric_VaR, color = "red", label = "5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/129:
q_empirical = gm_result.std_resid.quantile(0.05)

empirical_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_empirical
empirical_VaR = pd.DataFrame(empirical_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot empirical Value at Risk
plt.plot(empirical_VaR, color= "purple", label = "5% Empirical VaR")

# plot parametric Value at Risk for comparison
plt.plot(parametric_VaR, color = "red", label = "5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/130:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t");
gm_result = basic_gm.fit();

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False);

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu
40/131:
# 5% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot parametric Value at Risk
plt.plot(parametric_VaR, color= "red", label =" 5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/132:
# 5% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot parametric Value at Risk
plt.plot(parametric_VaR, color= "red", label =" 5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/133:
q_empirical = gm_result.std_resid.quantile(0.05)

empirical_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_empirical
empirical_VaR = pd.DataFrame(empirical_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot empirical Value at Risk
plt.plot(empirical_VaR, color= "purple", label = "5% Empirical VaR")

# plot parametric Value at Risk for comparison
plt.plot(parametric_VaR, color = "red", label = "5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/134: The parametric and empirical Value at Risk visualized above are quite similar - and with both versions, the count of VaR exceedances is roughly around four - so assuming a tolerance for 12.5 exceedances in a trading year (read above), our model is doing a decent job. The empirical VaRs have a bigger loss estimation, which implies that the assumed residuals based on the theoretical t-distribution of the model might underestimate the downside risks.
40/135:
### Beta
The ${\beta}$ (beta) value indicates the level of risk in comparison to a derivate benchmark (for US stocks commonly the S&P500). 

* ${{\beta} = 1} — equal to the benchmark and shows no higher risk than usual.
* ${{\beta} > 1} — over the benchmark and indicates a higher risk than usual. (more return required)
* ${{\beta} < 1} — below the benchmark and indicates a lower risk than usual. (less return required)

To calculate the return by the influence of beta, the following equation can be applied:

${{R}_{Ex} = {r}_{f} + {\beta}({R} - {r}_{f})}$
40/136: #### Computing dynamic stock Beta
40/137:
#Preparing GARCH models

tesla_data = pd.read_csv("./datasets/Tesla.csv")

tesla_gm = arch_model(tesla_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t")
sp500_gm = arch_model(sp_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t")
40/138:
#Preparing GARCH models

tesla_data = pd.read_csv("./datasets/Tesla.csv")

tesla_gm = arch_model(tesla_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t")
sp500_gm = arch_model(sp_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t")

tesla_gm.fit()
sp500_gm.fit()
40/139:
#Preparing GARCH models

tesla_data = pd.read_csv("./datasets/Tesla.csv")

tesla_gm = arch_model(tesla_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t")
sp500_gm = arch_model(sp_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t")

tesla_gm.fit();
sp500_gm.fit();
40/140:
#Preparing GARCH models

tesla_data = pd.read_csv("./datasets/Tesla.csv")

tesla_gm = arch_model(tesla_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t");
sp500_gm = arch_model(sp_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t");

tesla_gm.fit();
sp500_gm.fit();
40/141:
#Preparing GARCH models
tesla_data = pd.read_csv("./datasets/Tesla.csv")

tesla_gm = arch_model(tesla_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t")
sp500_gm = arch_model(sp_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t")

tesla_gm.fit();
sp500_gm.fit();
40/142:
#Preparing GARCH models
tesla_data = pd.read_csv("./datasets/Tesla.csv")

tesla_gm = arch_model(tesla_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t")
sp500_gm = arch_model(sp_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t")

tesla_results = tesla_gm.fit();
tesla_results = sp500_gm.fit();
40/143:
tesla_resid = tesla_results.std_resid
sp_resid = sp_results.std_resid
40/144:
tesla_resid = tesla_results.std_resid
sp500_resid = sp500_results.std_resid
40/145:
#Preparing GARCH models
tesla_data = pd.read_csv("./datasets/Tesla.csv")

tesla_gm = arch_model(tesla_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t")
sp500_gm = arch_model(sp_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t")

tesla_results = tesla_gm.fit();
sp500_results = sp500_gm.fit();
40/146:
tesla_resid = tesla_results.std_resid
sp500_resid = sp500_results.std_resid

tesla_vol = tesla_results.conditional_volatility
sp500_vol = sp500_results.conditional_volatility

correlation = np.corrcoef(tesla_resid, sp500_resid)[0, 1]

beta = correlation * (tesla_vol / sp500_vol)

plt.plot(beta, title="Tesla Stock Beta")
40/147:
tesla_resid = tesla_results.std_resid
sp500_resid = sp500_results.std_resid

tesla_vol = tesla_results.conditional_volatility
sp500_vol = sp500_results.conditional_volatility

correlation = np.corrcoef(tesla_resid, sp500_resid)[0, 1]

beta = correlation * (tesla_vol / sp500_vol)

plt.plot(beta)
plt.title("Tesla Stock Beta")
plt.show()
40/148:
### Beta
The ${\beta}$ (beta) value indicates the level of risk in comparison to a derivate benchmark (for US stocks commonly the S&P500). 

* ${{\beta} = 1} — equal to the benchmark and shows no higher risk than usual.
* ${{\beta} > 1} — over the benchmark and indicates a higher risk than usual. (more return required)
* ${{\beta} < 1} — below the benchmark and indicates a lower risk than usual. (less return required)

The ${\beta}$ is the relation of an asset to it's benchmark factored by their correlation.
In an equation, this can be easier understood:

${\beta = {{\rho} * {{\sigma}_{x} \over {\sigma}_{benchmark}}}}$

where
* ${\rho}$ is the correlation factor between both asset and market standard residual
* ${\sigma}_{x}$ is the volatility (std. deviation) of the asset _x_
* ${{\sigma}_{benchmark}}$ is the volatility of the benchmark (usually the market, e.g. SP500)



#### Beta in CAPM

In the Capital Asset Pricing Model (CAPM), tocalculate the return by the influence of beta, the following equation can be applied:

${{E(R}_{S}) = {R}_{f} + {\beta}(E({R)_{m}} - {R}_{f})}$

with
* ${E({R}_{S})}$ as _required rate of return_
* ${R}_{f}$ as _risk-free rate_ (e.g. Treasuries)
* ${E({R}_{m})}$ as _market expected return_ (e.g. S&P500)
* The calculation ${E({R)_{m}} - {R}_{f})}$ can also be understood as the _market premium_
40/149:
#Preparing GARCH models
tesla_data = pd.read_csv("./datasets/Tesla.csv")

tesla_gm = arch_model(tesla_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t")
sp500_gm = arch_model(sp_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t")

tesla_results = tesla_gm.fit();
sp500_results = sp500_gm.fit();
40/150:
tesla_resid = tesla_results.std_resid
sp500_resid = sp500_results.std_resid

tesla_vol = tesla_results.conditional_volatility
sp500_vol = sp500_results.conditional_volatility

correlation = np.corrcoef(tesla_resid, sp500_resid)[0, 1]

beta = correlation * (tesla_vol / sp500_vol)

plt.plot(beta)
plt.title("Tesla Stock Beta")
plt.show()
40/151:
from arch import arch_model
import pandas as pd
import matplotlipyplot as plt
import datetime as dt
import numpy as np

sp_data = pd.read_csv("./datasets/SP500.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/152:
from arch import arch_model
import pandas as pd
import matplotlipyplot as plt
import datetime as dt
import numpy as np

sp_data = pd.read_csv("./datasets/SP500.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/153:
from arch import arch_model
import pandas as pd
import matplotlit.pyplot as plt
import datetime as dt
import numpy as np

sp_data = pd.read_csv("./datasets/SP500.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/154:
from arch import arch_model
import pandas as pd
import matplotlib.pyplot as plt
import datetime as dt
import numpy as np

sp_data = pd.read_csv("./datasets/SP500.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/155:
from arch import arch_model
import pandas as pd
import matplotlib.pyplot as plt
import datetime as dt
import numpy as np

sp_data = pd.read_csv("./datasets/SP500.csv")

# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'GARCH', dist = 'normal')
# Fit the model
gm_result = basic_gm.fit(update_freq = 4)

# Display model fitting summary
print(gm_result.summary())

# Plot fitted results
gm_result.plot()
plt.show()
40/156: bitcoin_data = pd.read_csv("./datasets/bitcoin.csv")
40/157:
#### Fit GJR-GARCH, EGARCH to cryptocurrency

gjr_gm = arch_model(bitcoin_data['Return'], p = 1, q = 1, o = 1, vol = 'GARCH', dist = 't')
gjrgm_result = gjr_gm.fit(disp = 'off')
gjrgm_vol = gjrgm_result.conditional_volatility

egarch_gm = arch_model(bitcoin_data['Return'], p = 1, q = 1, o = 1, vol = 'EGARCH', dist = 't')
egarch_result = egarch_gm.fit(disp = 'off')
egarch_vol = egarch_result.conditional_volatility

# Plot the actual Bitcoin returns
plt.plot(bitcoin_data['Return'], color = 'grey', alpha = 0.4, label = 'Price Returns')

# Plot GJR-GARCH estimated volatility
plt.plot(gjrgm_vol, color = 'gold', label = 'GJR-GARCH Volatility')

# Plot EGARCH  estimated volatility
plt.plot(egarch_vol, color = 'red', label = 'EGARCH Volatility')

plt.legend(loc = 'upper right')
plt.show()
40/158:
# Specify GARCH model assumptions
basic_gm = arch_model(sp_data['Return'], p = 1, q = 1,
                      mean = 'constant', vol = 'EGARCH', dist = 't')

gm_result = basic_gm.fit(update_freq = 3)

para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'p-value': gm_result.pvalues})

# Print out parameter stats
print(para_summary)
40/159:
# Get parameter stats from model summary
para_summary = pd.DataFrame({'parameter':gm_result.params,
                             'std-err': gm_result.std_err, 
                             't-value': gm_result.tvalues})

# Verify t-statistic by manual calculation
calculated_t = para_summary['parameter']/para_summary['std-err']

# Print calculated t-value
print(calculated_t)

# Print parameter stats
print(para_summary)
40/160:
from statsmodels.graphics.tsaplots import plot_acf

# Create and fit model for S&P 500 return data
sp_garch = arch_model(sp_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "normal")
sp_result = sp_garch.fit(update_freq=4)

std_resid = sp_result.std_resid

# Plot the standardized residuals
plt.plot(std_resid)
plt.title('Standardized Residuals')
plt.show()

# Generate ACF plot of the standardized residuals
plot_acf(std_resid, alpha = .05)
plt.show()
40/161:
from statsmodels.stats.diagnostic import acorr_ljungbox

# Perform Ljung-Box test
lb_test = acorr_ljungbox(std_resid , lags = 10, return_df=True)

# Print the p-values
print('P-values are:\n', lb_test["lb_pvalue"])
40/162:

bitcoin_data["Datetime"] = pd.to_datetime(bitcoin_data["Date"])
modified_bitcoin_data = bitcoin_data.set_index("Datetime")

basic_gm = arch_model(modified_bitcoin_data["Return"], p = 1, q = 1, mean = "constant", vol = "GARCH", dist = "t");
gm_result = basic_gm.fit();

gm_forecast = gm_result.forecast(start="2019-01-01", reindex=False);

mean_forecast = gm_forecast.mean["2019-01-01":]
variance_forecast = gm_forecast.variance["2019-01-01":]
nu = gm_result.params.nu
40/163:
# 5% Parametric Quantile
q_parametric = basic_gm.distribution.ppf(0.05, nu)

# parametric Value at Risk: mean + volatility * parametric quantile
parametric_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_parametric
parametric_VaR = pd.DataFrame(parametric_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot parametric Value at Risk
plt.plot(parametric_VaR, color= "red", label =" 5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/164:
q_empirical = gm_result.std_resid.quantile(0.05)

empirical_VaR = mean_forecast.values + np.sqrt(variance_forecast).values * q_empirical
empirical_VaR = pd.DataFrame(empirical_VaR, columns= ["5%"], index = variance_forecast.index)

# plot returns from 2019 and later.
plt.scatter(x=variance_forecast.index, y=modified_bitcoin_data.Return["2019-01-01":], color="orange", label="Bitcoin Daily Returns")

# plot empirical Value at Risk
plt.plot(empirical_VaR, color= "purple", label = "5% Empirical VaR")

# plot parametric Value at Risk for comparison
plt.plot(parametric_VaR, color = "red", label = "5% Parametric VaR")

plt.legend(loc = "upper right")
plt.show()
40/165:
#Preparing GARCH models
tesla_data = pd.read_csv("./datasets/Tesla.csv")

tesla_gm = arch_model(tesla_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t")
sp500_gm = arch_model(sp_data["Return"], p = 1, q = 1, vol="GARCH", mean="constant", dist="t")

tesla_results = tesla_gm.fit();
sp500_results = sp500_gm.fit();
40/166:
tesla_resid = tesla_results.std_resid
sp500_resid = sp500_results.std_resid

tesla_vol = tesla_results.conditional_volatility
sp500_vol = sp500_results.conditional_volatility

correlation = np.corrcoef(tesla_resid, sp500_resid)[0, 1]

beta = correlation * (tesla_vol / sp500_vol)

plt.plot(beta)
plt.title("Tesla Stock Beta")
plt.show()
40/167:
### Dynamic Covariance between two models
We can determine the covariance of two models to incorporate their time-dependent characteristic of volatility. For example, a stock may have a positive covariance to another stock, meaning they both appreciate and depreciate in the same direction. If we want to reduce risk, we may not want to have a portfolio of just positive covariance between its assets. Otherwise, this scenario would translate to: "one falls, all fall", leading to strong changes in a portfolios value (positive and negative). 

Therefore, we can also make use of detection negative covariance between two assets that develop in opposing directions. If one of our assets depreciate in value, the value of an asset with a negative covariance to it is supposed to appreciate. We can thus _reduce our risk by maintaining a good analysis of positive and negative covariance between our assets_.
64/1:
# Nvidia & AMD - Analysis on Risk & Return
_Which stock is more valuable to invest into?_

## Context
Our friend saved up a significant amount of money during her freelancing efforts and wants to make an investment in the stock market. She wants to **invest 20.000€** and continue to invest **500€ each month** down the line. She is convinced that the graphics chip market will continue to grow and sets her bet on the NVIDIA (_NVDA_) or AMD (_AMD_) stock. As both companies are in competition, she assumes the stocks will run against each other and cancel their return out. So, to secure a positive return, she wants to invest to only the more promising one of them.

Another factor for our friend is that the potential total loss of her investment should not be over 20%. If the targeted assets are as volatile to bring a higher fluctuation than that, she would like to look for an alternative strategy instead. 

## Goal
Between the stocks of the two chip manufacturers AMD (_AMD_) and NVIDIA (_NVDA_), which one serves as a more risk-free investment if the total tolerance of loss is at 20% of the investment value?

## Analysis
### Setup
64/2:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./datasets/AMZN.csv")
tsla = pd.read_csv("./datasets/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
64/3:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
64/4:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
64/5:
## Descriptive review of Data
The structure of our dataframes looks as following.
64/6: print(amd.describe())
64/7:
Each row documents a trading-day of the stock in each year. 
* The `Date` column holds the date of the trading-day. 
* `High` and `Low` describe the highest/lowest stock value in the timeframe of the day. 
* `Open` indicates the stock value in the beginning of the day (market open), while `Close` holds the terminating value at the end of the day (market close). 

Adjustments can be made to the price on close due to [various factors](https://www.investopedia.com/terms/a/adjusted_closing_price.asp) as a stock split. It is therefore common to provide a an *adjusted closing price* for historical stock data analysis. We will not go into the details of the factors for this value, but proceed with the assumption that the *adjusted closing price* is the most precise value to work with for a long-term analysis as we aim for. The *adjusted closing price* is stored in the `Adj Close` column.

The `Volume` counts the number of shares traded during `Open` and `Close`. For the 2016-04-07 as an example, 44.281.000 shares have been traded over the course of the trading day.
64/8:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn).set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position");
plt.show()
64/9:
sns.lineplot(x = "Date", y = "Adj Close", data=amd).set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position");
plt.show()
64/10:
sns.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position");
plt.show()
64/11:
sns.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");
plt.show()
64/12:
sns.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

xticklabels = combined['Data'].dt.strftime('%Y').sort_values().unique()

plt.set_xticklabels(labels=xticklabels, rotation=45, ha='right')
plt.show()
64/13:
sns.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

xticklabels = combined['Date'].dt.strftime('%Y').sort_values().unique()

plt.set_xticklabels(labels=xticklabels, rotation=45, ha='right')
plt.show()
64/14:
sns.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

xticklabels = amd['Date'].dt.strftime('%Y').sort_values().unique()

plt.set_xticklabels(labels=xticklabels, rotation=45, ha='right')
plt.show()
64/15:
sns.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

xticklabels = combined.index['Date'].dt.strftime('%Y').sort_values().unique()

plt.set_xticklabels(labels=xticklabels, rotation=45, ha='right')
plt.show()
64/16:
sns.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

xticklabels = combined.index['Date'].strftime('%Y').sort_values().unique()

plt.set_xticklabels(labels=xticklabels, rotation=45, ha='right')
plt.show()
64/17:
sns.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

xticklabels = combined.index['Date'].dt.strftime('%Y').sort_values().unique()

plt.set_xticklabels(labels=xticklabels, rotation=45, ha='right')
plt.show()
64/18:
sns.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

xticklabels = combined.index.Date.dt.strftime('%Y').sort_values().unique()

plt.set_xticklabels(labels=xticklabels, rotation=45, ha='right')
plt.show()
64/19:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
64/20: print(combined.describe())
64/21:
sns.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

xticklabels = combined.index[1].dt.strftime('%Y').sort_values().unique()

plt.set_xticklabels(labels=xticklabels, rotation=45, ha='right')
plt.show()
64/22:
sns.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

xticklabels = combined.index.get_level_values("Date").dt.strftime('%Y').sort_values().unique()

plt.set_xticklabels(labels=xticklabels, rotation=45, ha='right')
plt.show()
64/23:
sns.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

xticklabels = combined.index.get_level_values("Date").strftime('%Y').sort_values().unique()

plt.set_xticklabels(labels=xticklabels, rotation=45, ha='right')
plt.show()
64/24:
sns.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

xticklabels = combined.index.get_level_values("Date").to_frame().dt.strftime('%Y').sort_values().unique()

plt.set_xticklabels(labels=xticklabels, rotation=45, ha='right')
plt.show()
64/25:
sns.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

xticklabels = combined.index.get_level_values("Date").to_frame().strftime('%Y').sort_values().unique()

plt.set_xticklabels(labels=xticklabels, rotation=45, ha='right')
plt.show()
64/26:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.dates import DateFormatter
import numpy as np

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
64/27:
fig, ax = plt.subplots(figsize=(12, 12))

ax.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

date_form = DateFormatter("%y")
xticklabels = 

ax.xaxis.set_major_formattter(date_form)
plt.show()
64/28:
fig, ax = plt.subplots(figsize=(12, 12))

ax.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

date_form = DateFormatter("%y")

ax.xaxis.set_major_formattter(date_form)
plt.show()
64/29:
fig, ax = plt.subplots(figsize=(12, 12))

ax.line(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

date_form = DateFormatter("%y")

ax.xaxis.set_major_formattter(date_form)
plt.show()
64/30:

ax = sns.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formattter(DateFormatter("%y"))

plt.show()
64/31:

sns.lineplot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

plt.xticks.set_major_formattter(DateFormatter("%y"))

plt.show()
64/32:
fig, ax = plt.subplot()
ax.plot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

ax.xaxes.set_major_formattter(DateFormatter("%y"))

plt.show()
64/33:
fig, ax = plt.subplots()
ax.plot(x = "Date", y = "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

ax.xaxes.set_major_formattter(DateFormatter("%y"))

plt.show()
64/34:
fig, ax = plt.subplots()
ax.plot("Date", "Adj Close", data=combined, hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

ax.xaxes.set_major_formattter(DateFormatter("%y"))

plt.show()
64/35:
fig, ax = plt.subplots()
ax.plot(combined.index.Date.values, combined["Adj Close"],  hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

plt.xticks..set_major_formattter(DateFormatter("%y"))

plt.show()
64/36:
fig, ax = plt.subplots()
ax.plot(combined.index.Date.values, combined["Adj Close"],  hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

plt.xticks.set_major_formattter(DateFormatter("%y"))

plt.show()
64/37:
fig, ax = plt.subplots()
ax.plot(combined.index.Date.values, combined["Adj Close"],  hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

plt.xaxes.set_major_formattter(DateFormatter("%y"))

plt.show()
64/38:
fig, ax = plt.subplots()
ax.plot(combined.index.get_level_values("Date") , combined["Adj Close"],  hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");

plt.xaxes.set_major_formattter(DateFormatter("%y"))

plt.show()
64/39:
fig, ax = plt.subplots()
ax.xaxes.set_major_formattter(DateFormatter("%y"))
sns.lineplot(x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");


plt.show()
64/40:
fig, ax = plt.subplots()
ax.xaxis.set_major_formattter(DateFormatter("%y"))
sns.lineplot(x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");


plt.show()
64/41:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(DateFormatter("%y"))
sns.lineplot(x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");


plt.show()
64/42:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(DateFormatter("%y"))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position ($)");


plt.show()
64/43:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(DateFormatter("%y"))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/44:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
64/45:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocater())
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/46:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator())
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/47:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
64/48:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator())
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/49:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax.xaxis.set_major_locator(md.YearLocator())
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/50:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax.xaxis.set_major_locator(md.YearLocator(2))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/51:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax.xaxis.set_major_locator(md.YearLocator(5))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/52:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/53:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax.xaxis.set_major_locator(md.YearLocator(0))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/54:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/55:
combined["Datetime"] = pd.to_datetime(combined["Date"], "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/56:
combined["Datetime"] = pd.to_datetime(combined.index["Date"], "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/57:
combined["Datetime"] = pd.to_datetime(combined.index:, "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/58:
combined["Datetime"] = pd.to_datetime(combined.index[0], "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/59:
combined["Datetime"] = pd.to_datetime(combined.index[1], "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/60:
combined["Datetime"] = pd.to_datetime(combined.index[2], "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/61:
combined["Datetime"] = pd.to_datetime(combined.index[0], "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/62:
combined["Datetime"] = pd.to_datetime(combined.index[1], "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/63:
combined["Datetime"] = pd.to_datetime(combined.index[0:], "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/64:
combined["Datetime"] = pd.to_datetime(combined.index[1:], "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/65:
combined["Datetime"] = pd.to_datetime(combined.index[:0], "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/66:
combined["Datetime"] = pd.to_datetime(combined.index.Date, "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/67:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"), "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/68: print(combined.head())
64/69:

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/70:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/71:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/72:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/73:
combined["Datetime"] = pd.to_datetime(amd["Date"], "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/74:
combined["Datetime"] = pd.to_datetime(amd["Date"], "%y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/75:
combined["Datetime"] = pd.to_datetime(amd["Date"], "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/76:
print(combined.isna().any())
combined["Datetime"] = pd.to_datetime(amd["Date"], "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/77:
print(combined.index.isna().any())
combined["Datetime"] = pd.to_datetime(amd["Date"], "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/78:
print(combined.index.get_level_values("Date").isna().any())
combined["Datetime"] = pd.to_datetime(amd["Date"], "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/79:
print(combined.index.get_level_values("Date").isna().any())
#combined["Datetime"] = pd.to_datetime(amd["Date"], "%Y-%m-%d")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/80:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%d-%m"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/81:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%d-%m-%y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/82:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%d-%m-%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/83:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%d-%m-%Y"))
ax.xaxis.set_major_locator(md.YearLocator(2))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/84:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%d-%m-%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/85:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter(format="%d-%m-%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/86:
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%d-%m-%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/87:
combined["Datetime"] = pd.to_datetime(amd["Date"])

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%d-%m-%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/88:
combined["Datetime"] = pd.to_datetime(combined["Date"])

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%d-%m-%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/89:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values(["Date"])

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%d-%m-%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/90:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date")

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%d-%m-%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/91:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%d-%m-%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/92:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%d-%m-%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/93:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax.xaxis.set_major_locator(md.YearLocator(1))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/94:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax.xaxis.set_major_locator(md.YearLocator(0))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/95:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");


plt.show()
64/96:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");

plt.show()
64/97:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots()
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))

plt.show()
64/98:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots()
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))

plt.show()
64/99:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 12))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))

plt.show()
64/100:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))

plt.show()
64/101:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper right")

plt.show()
64/102:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined,  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/103:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc["AMD":"NVIDIA"],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/104:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[("AMD":"NVIDIA")],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/105:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc["AMD":"NVIDIA"],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/106:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.iloc["AMD":"NVIDIA"],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/107:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc["AMD":"NVIDIA"],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/108:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[:("AMD":"NVIDIA")],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/109:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[:["AMD":"NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/110:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD":"NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/111:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD":"NVIDIA"]:],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/112:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[[:, ("AMD": "NVIDIA")]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/113:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[[("AMD": "NVIDIA")]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/114:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[[:, ("AMD", "NVIDIA")]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/115:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[[("AMD", "NVIDIA")]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/116:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[("AMD", "NVIDIA")],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/117:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[:,("AMD", "NVIDIA")],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/118:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[("AMD", "NVIDIA"), :],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/119:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc["AMD":"NVIDIA"],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/120:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.iloc["AMD":"NVIDIA"],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/121:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc["AMD":"NVIDIA"],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/122:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
64/123:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc["AMD":"NVIDIA"],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/124:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD":"NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/125:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[("AMD","NVIDIA")],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/126:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/127: combined["Pct Change"] = combined["Adj Close"].pct_change()
64/128:
combined["Pct Change"] = combined["Adj Close"].pct_change()
print(combined["Pct Change"])
64/129:
amd["Pct Change"] = amd["Adj Close"].pct_change()
nvidia["Pct Change"] = nvidia["Adj Close"].pct_change()
print(amd["Pct Change"])
64/130:
amd["Pct Change"] = amd["Adj Close"].pct_change()
nvidia["Pct Change"] = nvidia["Adj Close"].pct_change()
64/131:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amd, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xticks=[], xlabel="AMD", ylabel="Percental Change (%)")
ax[1].set(xticks=[], xlabel="NVIDIA", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
64/132:
amd["Pct Change"] = amd["Adj Close"].pct_change()
nvidia["Pct Change"] = nvidia["Adj Close"].pct_change()
64/133:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amd, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xticks=[], xlabel="AMD", ylabel="Percental Change (%)")
ax[1].set(xticks=[], xlabel="NVIDIA", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
64/134:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amd, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xticks=[], xlabel="AMD", ylabel="Percental Change (%)")
ax[1].set(xticks=[], xlabel="NVIDIA", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))


# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
64/135:
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])

fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amd, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xticks=[], xlabel="AMD", ylabel="Percental Change (%)")
ax[1].set(xticks=[], xlabel="NVIDIA", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
64/136:
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])

fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amd, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
64/137:
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])

fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Pct Change", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Pct Change", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
64/138:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])
64/139:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/140:
amd["Pct Change"] = amd["Adj Close"].pct_change()
nvidia["Pct Change"] = nvidia["Adj Close"].pct_change()
64/141:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Pct Change", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Pct Change", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
64/142:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])
64/143:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
64/144:
amd["Pct Change"] = amd["Adj Close"].pct_change()
nvidia["Pct Change"] = nvidia["Adj Close"].pct_change()
64/145:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Pct Change", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Pct Change", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
64/146:
Despite it's seemingly steady line in the previous lineplot, we derive a significantly more equal volatility for the AMD stock to the NVIDIA stock. This is relevant for our determination of risk as a high spread of value over time for a stock can be a leading factor to rapid loss (but also: rapid gain).

The outliers of daily percental change of AMD appear to be extremer (higher deviation from the mean value). To resolve or reject this impression, a visualization and statistical analyization of the distribution of both daily percental changes comes to mind.
64/147:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Pct Change"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Pct Change"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
64/148:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Pct Change"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Pct Change"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Pct Change"].mean(), color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Pct Change"].mean(), color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
64/149:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=combined.loc[["AMD", "NVIDIA"]], bins=20, kde=True, kde_kws=dict(bw_method=.5))
plt.show()

sns.histplot(x=amd["Pct Change"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Pct Change"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Pct Change"].mean(), color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Pct Change"].mean(), color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
64/150:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=combined.loc[["AMD", "NVIDIA"]]["Pct Change"], bins=20, kde=True, kde_kws=dict(bw_method=.5))
plt.show()

sns.histplot(x=amd["Pct Change"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Pct Change"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Pct Change"].mean(), color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Pct Change"].mean(), color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
64/151:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=combined.loc[["AMD", "NVIDIA"]].pct_change(), bins=20, kde=True, kde_kws=dict(bw_method=.5))
plt.show()

sns.histplot(x=amd["Pct Change"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Pct Change"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Pct Change"].mean(), color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Pct Change"].mean(), color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
64/152:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Pct Change"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Pct Change"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Pct Change"].mean(), color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Pct Change"].mean(), color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/1:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Pct Change", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Pct Change", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Pct Change"].std().round(4)) + ")")
ax[1].axhline(y=nvidia["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Pct Change"].std().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/2:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
81/3: print(combined.head())
81/4:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])
81/5:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
81/6:
amd["Pct Change"] = amd["Adj Close"].pct_change()
nvidia["Pct Change"] = nvidia["Adj Close"].pct_change()
81/7:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Pct Change", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Pct Change", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Pct Change"].std().round(4)) + ")")
ax[1].axhline(y=nvidia["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Pct Change"].std().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/8:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Pct Change", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Pct Change", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Adj Close"].std().round(4)) + ")")
ax[1].axhline(y=nvidia["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Pct Change"].std().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/9:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Pct Change", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Pct Change", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Adj Close"].std().round(4)) + ")")
ax[1].axhline(y=nvidia["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Adj Close"].std().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/10:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Pct Change", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Pct Change", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/11:
amd["Pct Change"] = amd["Adj Close"].std()
nvidia["Pct Change"] = nvidia["Adj Close"].pct_change()
81/12:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Pct Change", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Pct Change", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/13:
amd["Pct Change"] = amd["Adj Close"].std()
nvidia["Pct Change"] = nvidia["Adj Close"].std()
81/14:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Pct Change", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Pct Change", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/15:
amd["Returns"] = amd["Adj Close"].pct_change()
nvidia["Returns"] = nvidia["Adj Close"].pct_change()
81/16:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Pct Change", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Pct Change", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/17:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/18:
amd["Discrete Returns"] = amd["Adj Close"].pct_change()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change()

amd["Log Returns"] = np.log1p(amd["Discrete Returns"])
nvidia["Log Returns"] = np.log1p(amd["Discrete Returns"])
81/19:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/20:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Log Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/21:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Log Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Log Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/22:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Log Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Log Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Log Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Log Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Log Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Log Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/23:
amd["Discrete Returns"] = amd["Adj Close"].pct_change()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change()

amd["Log Returns"] = np.log1p(amd["Discrete Returns"])
nvidia["Log Returns"] = np.log1p(amd["Discrete Returns"])
81/24:
amd["Discrete Returns"] = amd["Adj Close"].pct_change()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change()

amd["Log Returns"] = np.log1p(amd["Discrete Returns"])
nvidia["Log Returns"] = np.log1p(nvidia["Discrete Returns"])
81/25:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Log Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Log Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Log Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Log Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Log Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Log Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/26:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/27:
amd["Discrete Returns"] = amd["Adj Close"].pct_change()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change()
81/28:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/29:
amd["Discrete Returns"] = amd["Adj Close"].pct_change().dropna()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change().dropna()
81/30:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/31:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Pct Change"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Pct Change"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Pct Change"].mean(), color="orange", label="Mean ${\mu}$ (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Pct Change"].mean(), color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/32:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Pct Change"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Pct Change"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Pct Change"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Pct Change"].mean(), color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/33:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Pct Change"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Pct Change"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Pct Change"].mean(), color="orange", label="Mean (" + str(amd["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Pct Change"].mean(), color="orange", label="Mean (" + str(nvidia["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/34:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/35:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean  $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/36:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/37:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/38:
trading_days = 21
amd_monthly_return = ((1 + amd["Discrete Returns"].mean())**trading_days) - 1
81/39:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
81/40: print(stats.skew(amd["Discrete Returns"]))
81/41:
amd["Discrete Returns"] = amd["Adj Close"].pct_change().dropna()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change().dropna()
81/42:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/43:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
81/44: print(combined.head())
81/45:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])
81/46:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
81/47:
amd["Discrete Returns"] = amd["Adj Close"].pct_change().dropna()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change().dropna()
81/48:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/49:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/50: print(stats.skew(amd["Discrete Returns"]))
81/51: print(stats.skew(amd["Discrete Returns"].dropna()))
81/52:
amd["Discrete Returns"] = (amd["Adj Close"].pct_change()).dropna()
nvidia["Discrete Returns"] = (nvidia["Adj Close"].pct_change()).dropna()
81/53:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/54:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/55: print(stats.skew(amd["Discrete Returns"].dropna()))
81/56: print(stats.skew(amd["Discrete Returns"]))
81/57: print(stats.skew(amd["Discrete Returns"].dropna()))
81/58:
amd["Discrete Returns"] = amd["Adj Close"].pct_change()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change()


amd["Discrete Returns"] = amd["Discrete Returns"].dropna()
nvidia["Discrete Returns"] = nvidia["Discrete Returns"].dropna()
81/59:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/60:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/61: print(stats.skew(amd["Discrete Returns"].dropna()))
81/62: print(stats.skew(amd["Discrete Returns"]))
81/63: print(stats.skew(amd["Discrete Returns"].dropna()))
81/64:
amd["Discrete Returns"] = amd["Adj Close"].pct_change()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change()
81/65: print(stats.kurtosis(amd["Discrete Returns"].dropna()))
81/66:
amd["Discrete Returns"] = amd["Adj Close"].pct_change()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change()
81/67:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/68:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/69: print(stats.skew(amd["Discrete Returns"].dropna()))
81/70: print(stats.kurtosis(amd["Discrete Returns"].dropna()))
81/71: print(stats.kurtosis(amd["Discrete Returns"]))
81/72: print(stats.kurtosis(nvidia["Discrete Returns"]))
81/73: print(stats.kurtosis(nvidia["Returns"]))
81/74: print(stats.kurtosis(nvidia["Discrete Returns"].dropna()))
81/75:
p_value = stats.shapiro(amd["Discrete Returns"].dropna())[1]

if p_value <= 0.05:
    print("Rejected")
else:
    print("Accepted")
81/76:
p_value = stats.shapiro(amd["Discrete Returns"].dropna())[1]
print(p_value)
if p_value <= 0.05:
    print("Rejected")
else:
    print("Accepted")
81/77:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.1))
sns.histplot(x=nvidia["Discrete Returns"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/78:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.3))
sns.histplot(x=nvidia["Discrete Returns"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/79:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/80: print(stats.skew(amd["Adj Close"].dropna()))
81/81: print(stats.kurtosis(nvidia["Adj Close"].dropna()))
81/82:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/83:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim(800)


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/84:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,800])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/85:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,800])
ax[1].set_ylim([0,800])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/86:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,800])
ax[1].set_ylim([0,800])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/87:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,800])
ax[1].set_ylim([0,800])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/88:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,800])
ax[1].set_ylim([0,800])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/89:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,800])
ax[1].set_ylim([0,800])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/90:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/91:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.4,0.4])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/92:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.4,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/93:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/94:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/95:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/96:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_method=1))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/97:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_method=3))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/98:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw__adjust=3))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/99:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_adjust=3))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/100:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_adjust=3))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_adjust=.5))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/101:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_adjust=1))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_adjust=.5))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/102:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_adjust=.1))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_adjust=.5))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/103:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_adjust=.25))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_adjust=.5))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/104:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_adjust=.4))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_adjust=.5))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/105:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_adjust=.5))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_adjust=.5))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/106:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_adjust=.75))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_adjust=.5))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/107:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_adjust=1))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_adjust=.5))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/108:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_adjust=1))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_adjust=1))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/109:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_adjust=1, cut=0))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_adjust=1))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/110:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_adjust=1))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_adjust=1))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/111:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(bw_adjust=1, cut=0))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_adjust=1, cut=0))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/112:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True, kde_kws=dict(bw_adjust=1, cut=0))

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/113:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/114:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True, kde_kws=dict(color="blue"))
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/115:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/116: amd_skew = stats.skew(amd["Discrete Returns"].dropna())
81/117:
amd_skew = stats.skew(amd["Discrete Returns"].dropna())
nvidia_skew = stats.skew(amd["Discrete Returns"].dropna())

print("The skewness for AMD's return distribution is: ", amd_skew)
81/118:
amd_skew = stats.skew(amd["Discrete Returns"].dropna())
nvidia_skew = stats.skew(amd["Discrete Returns"].dropna())

print("The skewness for AMD's return distribution is:", amd_skew)
81/119:
amd_skew = stats.skew(amd["Discrete Returns"].dropna())
nvidia_skew = stats.skew(amd["Discrete Returns"].dropna())

print("The skewness for AMD's return distribution is:", amd_skew.round(2))
81/120:
amd_skew = stats.skew(amd["Discrete Returns"].dropna())
nvidia_skew = stats.skew(amd["Discrete Returns"].dropna())

print("The skewness for AMD's return distribution is:", np.round(amd_skew.round,3)
81/121:
amd_skew = stats.skew(amd["Discrete Returns"].dropna())
nvidia_skew = stats.skew(amd["Discrete Returns"].dropna())

print("The skewness for AMD's return distribution is:", np.round(amd_skew.round,3))
81/122:
amd_skew = stats.skew(amd["Discrete Returns"].dropna())
nvidia_skew = stats.skew(amd["Discrete Returns"].dropna())

print("The skewness for AMD's return distribution is:", np.round(amd_skew,3))
81/123:
amd_skew = stats.skew(amd["Discrete Returns"].dropna())
nvidia_skew = stats.skew(amd["Discrete Returns"].dropna())

print("The skewness for AMD's return distribution is:", np.round(amd_skew,3))
print("The skewness for NVIDIA's return distribution is:", np.round(nvidia_skew,3))
81/124:
amd_skew = stats.skew(amd["Discrete Returns"].dropna())
nvidia_skew = stats.skew(nvidia["Discrete Returns"].dropna())

print("The skewness for AMD's return distribution is:", np.round(amd_skew,3))
print("The skewness for NVIDIA's return distribution is:", np.round(nvidia_skew,3))
81/125: #### Kurtosis
81/126:
#### Kurtosis
Generally speaking, the kurtosis of our distribution indicates the probability for outliers. For the financial context, a higher kurtosis therefore indicates a higher risk for a deviation to extremer outliers (loss, gain).
81/127:
amd_kurtosis = stats.kurtosis(amd["Discrete Returns"].dropna())
nvidia_kurtosis = stats.kurtosis(nvidia["Discrete Returns"].dropna())

print("The kurtosis for AMD's return distribution is:", np.round(amd_kurtosis,6))
print("The kurtosis for NVIDIA's return distribution is:", np.round(nvidia_kurtosis,6))
81/128:
amd_kurtosis = stats.kurtosis(amd["Discrete Returns"].dropna())
nvidia_kurtosis = stats.kurtosis(nvidia["Discrete Returns"].dropna())

print("The excess kurtosis for AMD's return distribution is:", np.round(amd_kurtosis,6))
print("The excess kurtosis for NVIDIA's return distribution is:", np.round(nvidia_kurtosis,6))
81/129:
The kurtosis of both graphs indicate a high probability for outliers. The distribution of our asset returns are therefore fat-tailed and highlights another indiactor for non-normality.

The suggested non-normality by skewness and high kurtosis can be tested with the Shapiro-Walk test.
81/130:
The Shapiro-Wilk test will preform a statistical test to determine the normality of a distribution.

For both our distributions, the null hypothesis will be:
* N0: The discrete return is normally distributed.

The null hypothesis will be testes for the 95% confidence interval.

amd_p_value = stats.shapiro(amd["Discrete Returns"].dropna()).pvalue
81/131:
amd_p_value = stats.shapiro(amd["Discrete Returns"].dropna()).pvalue
if amd_p_value <= 0.05:
    print("Null hypothesis rejected. The AMD return distribution is non-normal.")
else:
    print("Null hypothesis accepted. The AMD return distribution is normal.")
81/132:
nvidia_p_value = stats.shapiro(nvidia["Discrete Returns"].dropna()).pvalue
if nvidia_p_value <= 0.05:
    print("Null hypothesis rejected. The AMD return distribution is non-normal.")
else:
    print("Null hypothesis accepted. The AMD return distribution is normal.")
81/133: We were able to highlight that both stock's return distribution are non-normal.
81/134:
## Determining Volatility
### Close-to-Close Volatility
81/135:
## Determining Historical Volatility
Volatility is a leading factor for the determination of risk for an investment. It states the tendency for fluctuation of an asset's value and therefore the risk for potential rapid or strong loss.
There are various formulas developed over the centuries to predict historical and implied volatility. _Historical_ volatility determines the fluctuation of an asset's value based on historical, i.e past data. _Implied_ volatility tries to forecast volatility based on supply and demand in the future. Implied volatility is especially intersting for options trading.

We will try to compare the historical volatility of the AMD and NVIDIA stock with various volatility formulas.

Volatility of a stock is time-relevant. Using the entire historical data for a volatility determination is problematic as fluctuation tendencies can change by period in their intensity (heteroskedasticity). Volatility is commonly under the influence of time-based events that are political, social or economical. It is therefore utmost important to frame the respected data for volatility determination into a reasonable recent timeframe. A common frame are the recent 10 - 180 days, depending on the intention and type of asset traded.
For the following calculations, we use a time range of the last 45 trading days.

### Close-to-Close Volatility
The Close-to-Close formula is the easiest formula for volatility determination. It compares the change of Closing values for each day in a given timeframe.
81/136:
T = 30
amd_cl_variance = (1 / T - 1) * amd["Adj Close"].rolling(T).agg(lambda rT: rT - amd["Adj Close"].mean())
81/137:
T = 30
amd_cl_variance = (1 / T - 1) * amd["Adj Close"].rolling(T).agg(lambda rT: rT**2)
81/138:
Assuming a normal distribution of the dailypercental change, the previously graphed volatility (see lineplot above) visualized as a histogram is neatly displayed here to be in relation to the standard deviation of the historical daily change. The standard deviation is therefore a commonly used factor of [Volatility determination](https://www.investopedia.com/terms/v/volatility.asp).

The percental change distributions of both stocks indicate a fairly normal distribution with a mean close to 0.0. 
What can we further derive from this visualization? There are promising first impressions to be made: First, both means are tilted towards the positive of the zero-center, indicating a small but general historical growth of the stock. Furthermore, NVIDI's distribution indicates an asymmetrical set of outliers at the extremes, displaying a small but significant longer tail into the positives. An investor can benefit from this. A sudden strong positive growth seems more probable than a sudden strong regression, statistically speaking.

For the assumption of a normal distribution, we should further consider the skewness and kurtosis of the distributions. As a rule of thumb, we can derive the nonparametric skew of the distribution by looking at the relation of mean to median. If the mean is right to the median, we can expect a positive skew. If the mean is left to the median, we can expect a negative skew. Based on this rule of thumb, AMD's return distribution indicate a positive skew, while NVIDIA indicates a slightly negative skew. A positive skew is desirable in finance, as a tendency to more positive return values translates to more return growth for the investment.

Let's take a look at the kurtosis mathematically and try to prove our assumptions on the skewness of the curves.
81/139:
T = 30

amd_cl_variance = amd["Adj Close"].rolling(T).log(lambda rT: rT**2)
81/140:
T = 30

amd_cl_variance = amd["Adj Close"].rolling(T).agg(lambda rT: rT**2)
81/141:
T = 30

amd_cl_variance = amd["Adj Close"].rolling(T).apply(lambda rT: rT**2)
81/142:
T = 30

amd_cl_variance = amd["Adj Close"].rolling(T).agg(lambda rT: float(rt)**2)
81/143:
T = 30

amd_cl_variance = amd["Adj Close"].rolling(T).agg(lambda rT: float(rT)**2)
81/144:
T = 30
amd_cl_variance = np.log(amd["Adj Close"]).diff().rolling(T).sum()
print(amd_cl_variance)
81/145:
T = 30
amd_cl_variance = amd["Adj Close"].rolling(T).apply(lambda x: x**2).sum()
print(amd_cl_variance)
81/146:
T = 30
amd_cl_variance = amd["Adj Close"].rolling(T).sum()
print(amd_cl_variance)
81/147:
T = 30
amd_cl_variance = amd["Adj Close"].rolling(T).sum().dropna()
print(amd_cl_variance)
81/148:
T = 30
amd_cl_variance = amd["Adj Close"].rolling("30D").sum().dropna()
print(amd_cl_variance)
81/149:
T = 30
amd_cl_variance = amd["Adj Close"].rolling("30").sum().dropna()
print(amd_cl_variance)
81/150:
T = 30
amd_cl_variance = amd["Adj Close"].rolling(30).sum().dropna()
print(amd_cl_variance)
81/151:
T = 30
amd_cl_variance = amd["Adj Close"].rolling(30).std()
print(amd_cl_variance)
81/152:
T = 30
amd_cl_variance = amd["Adj Close"].rolling(30).square()
print(amd_cl_variance)
81/153:
T = 30
amd_log_returns = np.log(amd["Adj Close"]).diff()
amd_cl_variance = amd["Adj Close"].rolling(30).
print(amd_cl_variance)
81/154:
T = 30
amd_log_returns = np.log(amd["Adj Close"]).diff()
amd_cl_variance = amd_log_returns.rolling(30).sum()
print(amd_cl_variance)
81/155:
T = 30
amd_log_returns = np.log(amd["Adj Close"]).diff()
amd_cl_variance = amd_log_returns.rolling(30).agg(lambda rT: rT**2)
print(amd_cl_variance)
81/156:
T = 30
amd_log_returns = np.log(amd["Adj Close"]).diff()
amd_cl_variance = amd_log_returns.rolling(30).agg(lambda rT: rT**2).sum()
print(amd_cl_variance)
81/157:
T = 30
amd_log_returns = np.log(amd["Adj Close"]).diff()
amd_cl_variance = amd_log_returns.rolling(30).agg(lambda rT: float(rT)**2).sum()
print(amd_cl_variance)
81/158:
T = 30 # trading days window
amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cl_variance = amd_log_returns.rolling(T).std() * np.sqrt(trading_days)
print(amd_cl_variance)
81/159:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
81/160: print(combined.head())
81/161:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])
81/162:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
81/163:
amd["Discrete Returns"] = amd["Adj Close"].pct_change()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change()
81/164:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/165:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/166:
amd_skew = stats.skew(amd["Discrete Returns"].dropna())
nvidia_skew = stats.skew(nvidia["Discrete Returns"].dropna())

print("The skewness for AMD's return distribution is:", np.round(amd_skew,3))
print("The skewness for NVIDIA's return distribution is:", np.round(nvidia_skew,3))
81/167:
amd_kurtosis = stats.kurtosis(amd["Discrete Returns"].dropna())
nvidia_kurtosis = stats.kurtosis(nvidia["Discrete Returns"].dropna())

print("The excess kurtosis for AMD's return distribution is:", np.round(amd_kurtosis,6))
print("The excess kurtosis for NVIDIA's return distribution is:", np.round(nvidia_kurtosis,6))
81/168:
amd_p_value = stats.shapiro(amd["Discrete Returns"].dropna()).pvalue
if amd_p_value <= 0.05:
    print("Null hypothesis rejected. The AMD return distribution is non-normal.")
else:
    print("Null hypothesis accepted. The AMD return distribution is normal.")
81/169:
nvidia_p_value = stats.shapiro(nvidia["Discrete Returns"].dropna()).pvalue
if nvidia_p_value <= 0.05:
    print("Null hypothesis rejected. The NVIDIA return distribution is non-normal.")
else:
    print("Null hypothesis accepted. The NVIDIA return distribution is normal.")
81/170:
T = 30 # trading days window
amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cl_variance = amd_log_returns.rolling(T).std() * np.sqrt(trading_days)
print(amd_cl_variance)
81/171:
T = 30 # trading days window
amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cl_variance = amd_log_returns.rolling(T).std() * np.sqrt(trading_days)
print(amd_cl_variance)
81/172:
T = 30 # trading days window
amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cl_variance = amd_log_returns.rolling(T).std() * np.sqrt(trading_days)
print(amd_cl_variance)
81/173:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
81/174: print(combined.head())
81/175:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])
81/176:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
81/177:
amd["Discrete Returns"] = amd["Adj Close"].pct_change()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change()
81/178:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/179:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
81/180:
amd_skew = stats.skew(amd["Discrete Returns"].dropna())
nvidia_skew = stats.skew(nvidia["Discrete Returns"].dropna())

print("The skewness for AMD's return distribution is:", np.round(amd_skew,3))
print("The skewness for NVIDIA's return distribution is:", np.round(nvidia_skew,3))
81/181:
amd_kurtosis = stats.kurtosis(amd["Discrete Returns"].dropna())
nvidia_kurtosis = stats.kurtosis(nvidia["Discrete Returns"].dropna())

print("The excess kurtosis for AMD's return distribution is:", np.round(amd_kurtosis,6))
print("The excess kurtosis for NVIDIA's return distribution is:", np.round(nvidia_kurtosis,6))
81/182:
amd_p_value = stats.shapiro(amd["Discrete Returns"].dropna()).pvalue
if amd_p_value <= 0.05:
    print("Null hypothesis rejected. The AMD return distribution is non-normal.")
else:
    print("Null hypothesis accepted. The AMD return distribution is normal.")
81/183:
nvidia_p_value = stats.shapiro(nvidia["Discrete Returns"].dropna()).pvalue
if nvidia_p_value <= 0.05:
    print("Null hypothesis rejected. The NVIDIA return distribution is non-normal.")
else:
    print("Null hypothesis accepted. The NVIDIA return distribution is normal.")
81/184:
T = 30 # trading days window
amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cl_variance = amd_log_returns.rolling(T).std() * np.sqrt(trading_days)
print(amd_cl_variance)
95/1:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
95/2: print(combined.head())
95/3:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])
95/4:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
95/5:
amd["Discrete Returns"] = amd["Adj Close"].pct_change()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change()
95/6:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
95/7:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,300])
ax[1].set_ylim([0,300])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
95/8:
amd_skew = stats.skew(amd["Discrete Returns"].dropna())
nvidia_skew = stats.skew(nvidia["Discrete Returns"].dropna())

print("The skewness for AMD's return distribution is:", np.round(amd_skew,3))
print("The skewness for NVIDIA's return distribution is:", np.round(nvidia_skew,3))
95/9:
amd_kurtosis = stats.kurtosis(amd["Discrete Returns"].dropna())
nvidia_kurtosis = stats.kurtosis(nvidia["Discrete Returns"].dropna())

print("The excess kurtosis for AMD's return distribution is:", np.round(amd_kurtosis,6))
print("The excess kurtosis for NVIDIA's return distribution is:", np.round(nvidia_kurtosis,6))
95/10:
amd_p_value = stats.shapiro(amd["Discrete Returns"].dropna()).pvalue
if amd_p_value <= 0.05:
    print("Null hypothesis rejected. The AMD return distribution is non-normal.")
else:
    print("Null hypothesis accepted. The AMD return distribution is normal.")
95/11:
nvidia_p_value = stats.shapiro(nvidia["Discrete Returns"].dropna()).pvalue
if nvidia_p_value <= 0.05:
    print("Null hypothesis rejected. The NVIDIA return distribution is non-normal.")
else:
    print("Null hypothesis accepted. The NVIDIA return distribution is normal.")
95/12:
T = 30 # trading days window
amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cl_variance = amd_log_returns.rolling(T).std() * np.sqrt(trading_days)
print(amd_cl_variance)
95/13:
annual_trading_days = 252

T = 30 # trading days window
amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days).dropna()
print(amd_cchv)
95/14:
annual_trading_days = 252

T = 30 # trading days window
amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
print(amd_cchv)
95/15:
annual_trading_days = 252

T = 30 # trading days window
amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
print(amd_cchv.dropna())
95/16:
annual_trading_days = 252

T = 30 # trading days window
amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
95/17:
annual_trading_days = 252

T = 30 # trading days window
amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
print(amd_cchv)
95/18:
annual_trading_days = 252

T = 30 # trading days window
amd_log_returns = (amd["Adj Close"]**2).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
print(amd_cchv)
95/19:
annual_trading_days = 252

T = 30 # trading days window
amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
print(amd_cchv)
95/20:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
95/21:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

cchv = pd.DataFrame({"AMD": [amd, "cchv": amd_cchv], "NVIDIA": nvidia_cchv})

sns.lineplot(x)
95/22:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

combined.AMD["CCHV"] = amd_cchv
sns.lineplot(x)
95/23:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

combined["AMD"]["CCHV"] = amd_cchv
sns.lineplot(x)
95/24:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

combined.loc["AMD"]["CCHV"] = amd_cchv
sns.lineplot(x)
95/25:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD"]["CCHV"] = amd_cchv
combined.loc["NVIDIA"]["CCHV"] = amd_cchv
sns.lineplot(x=combined.Datetime, y="CCHV", hue="Stock")
95/26:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD"]["CCHV"] = amd_cchv
combined.loc["NVIDIA"]["CCHV"] = amd_cchv
print(combined.head())
sns.lineplot(x=combined.Datetime, y="CCHV", hue="Stock")
95/27:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD", "CCHV"] = amd_cchv
combined.loc["NVIDIA"]["CCHV"] = amd_cchv
print(combined.head())
sns.lineplot(x=combined.Datetime, y="CCHV", hue="Stock")
95/28:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD", "CCHV"] = amd_cchv
combined.loc["NVIDIA", "CCHV"] = amd_cchv
print(combined.head())
sns.lineplot(x=combined.Datetime, y="CCHV", hue="Stock")
95/29:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD", "CCHV"] = amd_cchv
combined.loc["NVIDIA", "CCHV"] = amd_cchv
print(combined.head())
sns.lineplot(x=combined.Datetime, y="CCHV", hue="Stock", data=combined)
95/30:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD", "CCHV"] = amd_cchv
combined.loc["NVIDIA", "CCHV"] = amd_cchv
print(combined.head())
sns.lineplot(x=combined.index, y="CCHV", hue="Stock", data=combined)
95/31:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD", "CCHV"] = amd_cchv
combined.loc["NVIDIA", "CCHV"] = amd_cchv
print(combined.head())
sns.lineplot(x=combined.index.Datetime, y="CCHV", hue="Stock", data=combined)
95/32:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD", "CCHV"] = amd_cchv
combined.loc["NVIDIA", "CCHV"] = amd_cchv
print(combined.head())
sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])
95/33:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD", "CCHV"] = amd_cchv
combined.loc["NVIDIA", "CCHV"] = amd_cchv
print(combined.tail())
sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])
95/34:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD", "CCHV"] = amd_cchv
combined.loc["NVIDIA", "CCHV"] = amd_cchv
print(combined.head())
sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])
95/35:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (amd["Adj Close"] / amd["Adj Close"].shift(1)).agg(np.log)
amd_cchv = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD", "CCHV"] = amd_cchv
combined.loc["NVIDIA", "CCHV"] = amd_cchv
print(combined.describe())
sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])
95/36:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (combined.loc["AMD", "Adj Close"] / combined.loc["AMD", "Adj Close"].shift(1)).agg(np.log)
combined.loc["AMD", "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD", "CCHV"] = amd_cchv
combined.loc["NVIDIA", "CCHV"] = amd_cchv
print(combined.describe())
sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])
95/37:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc["AMD", "Adj Close"] / combined.loc["AMD", "Adj Close"].shift(1)).agg(np.log)
combined.loc["AMD", "CCHV"] = 5#amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD", "CCHV"] = amd_cchv
combined.loc["NVIDIA", "CCHV"] = amd_cchv
print(combined.describe())
sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])
95/38:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc["AMD", "Adj Close"] / combined.loc["AMD", "Adj Close"].shift(1)).agg(np.log)
combined.loc[:, "CCHV"] = 5#amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD", "CCHV"] = amd_cchv
combined.loc["NVIDIA", "CCHV"] = amd_cchv
print(combined.describe())
sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])
95/39:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc["AMD", "Adj Close"] / combined.loc["AMD", "Adj Close"].shift(1)).agg(np.log)
combined.loc["AMD":, "CCHV"] = 5#amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD", "CCHV"] = amd_cchv
combined.loc["NVIDIA", "CCHV"] = amd_cchv
print(combined.describe())
sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])
95/40:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc["AMD", "Adj Close"] / combined.loc["AMD", "Adj Close"].shift(1)).agg(np.log)
combined.loc[:"AMD", "CCHV"] = 5#amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD", "CCHV"] = amd_cchv
combined.loc["NVIDIA", "CCHV"] = amd_cchv
print(combined.describe())
sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])
95/41:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc["AMD", "Adj Close"] / combined.loc["AMD", "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = 5#amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD", "CCHV"] = amd_cchv
combined.loc["NVIDIA", "CCHV"] = amd_cchv
print(combined.describe())
sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])
95/42:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (nvidia["Adj Close"] / nvidia["Adj Close"].shift(1)).agg(np.log)
nvidia_cchv = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc["AMD", "CCHV"] = amd_cchv
combined.loc["NVIDIA", "CCHV"] = amd_cchv
print(combined.describe())
sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])
95/43:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["AMD"],"Adj Close"] / combined.loc[["AMD"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

print(combined.describe())
sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])
95/44:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

print(combined.describe())
sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])
95/45:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

print(combined.describe())
sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]], size=(16, 8))
95/46:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

print(combined.describe())
sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]], sizes=(16, 8))
95/47:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

print(combined.describe())
sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]], sizes=(60, 8))
95/48:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])
95/49:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]][:-30])

line.set(xlabel="")
95/50:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]][-30:])

line.set(xlabel="")
95/51:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]][30:])

line.set(xlabel="")
95/52:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]][:-30])

line.set(xlabel="")
95/53:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]][:30])

line.set(xlabel="")
95/54:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]][:-30])

line.set(xlabel="")
95/55:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]][30:])

line.set(xlabel="")
95/56:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]][-30:])

line.set(xlabel="")
95/57:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]].sort()[-30:])

line.set(xlabel="")
95/58:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]].sort_values()[-30:])

line.set(xlabel="")
95/59:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]].sort_values(by="Datetime")[-30:])

line.set(xlabel="")
95/60:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]].sort_values(by="Datetime"))

line.set(xlabel="")
95/61:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]].sort_values(by="Datetime")[-30:])

line.set(xlabel="")
95/62:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]].sort_values(by="Datetime")[30:])

line.set(xlabel="")
95/63:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]].sort_values(by="Datetime")[:-30])

line.set(xlabel="")
95/64:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]].sort_values(by="Datetime")[:30])

line.set(xlabel="")
95/65:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]].sort_values(by="Datetime", Ascending=False)[:30])

line.set(xlabel="")
95/66:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]].sort_values(by="Datetime", ascending=False)[:30])

line.set(xlabel="")
95/67:
annual_trading_days = 252

T = 30 # trading days window



amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]].sort_values(by="Datetime", ascending=True)[:30])

line.set(xlabel="")
95/68:
annual_trading_days = 252

T = 30 # trading days window

combined.sort_values(by="Datetime", ascending=False)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

line.set(xlabel="")
95/69:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

line.set(xlabel="")
95/70:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]][-1:]
print(amd_last)
plt.text(df.G[df.Team==’LIV’],df.GA[df.Team==’LIV’],”LIV”, 
 fontdict=dict(color=’black’, alpha=0.5, size=16))
95/71:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]][-1:]
print(amd_last)
95/72:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]][:-1]
print(amd_last)
95/73:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]][1:]
print(amd_last)
95/74:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/75:
annual_trading_days = 252

T = 30 # trading days window

window_shift_modulo = combined.shape[0]

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/76:
annual_trading_days = 252

T = 30 # trading days window

window_shift_modulo = combined.shape[0]
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/77:
annual_trading_days = 252

T = 30 # trading days window

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/78:
annual_trading_days = 252

T = 30 # trading days window

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/79:
annual_trading_days = 252

T = 30 # trading days window

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo + 1) * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/80:
annual_trading_days = 252

T = 30 # trading days window

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo + 2) * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/81:
annual_trading_days = 252

T = 30 # trading days window

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo + 10) * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/82:
annual_trading_days = 252

T = 30 # trading days window

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/83:
annual_trading_days = 252

T = 30 # trading days window

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/84:
annual_trading_days = 252

T = 30 # trading days window

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/85:
annual_trading_days = 252

T = 30 # trading days window

combined.sort_index()

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/86:
annual_trading_days = 252

T = 30 # trading days window

combined.sort_index(ascending=False)

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/87:
annual_trading_days = 252

T = 30 # trading days window

combined.sort_index(ascending=True)

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/88:
annual_trading_days = 252

T = 30 # trading days window

combined.sort_index(ascending=False)

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/89:
annual_trading_days = 252

T = 30 # trading days window

combined.sort_index(level=1, ascending=False)

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/90:
annual_trading_days = 252

T = 30 # trading days window

combined.sort_index(level=0, ascending=False)

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/91:
annual_trading_days = 252

T = 30 # trading days window

combined.sort_index(level=0, ascending=Trie)

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/92:
annual_trading_days = 252

T = 30 # trading days window

combined.sort_index(level=0, ascending=True)

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/93:
annual_trading_days = 252

T = 30 # trading days window

combined.sort_index(level=1, ascending=True)

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/94:
annual_trading_days = 252

T = 30 # trading days window

combined.sort_index(level=0, ascending=True)

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/95:
annual_trading_days = 252

T = 30 # trading days window

combined.sort_index(level=0, ascending=False)

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/96:
annual_trading_days = 252

T = 30 # trading days window

combined.sort_index(level=1, ascending=False)

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/97:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=False)

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/98:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[0]
print(amd_last)
95/99:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo - 1) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]
print(amd_last)
95/100:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]
print(amd_last)
95/101:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

window_shift_modulo = combined.shape[0] % T
print(window_shift_modulo)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]
print(amd_last)
95/102:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

window_shift_modulo = combined.shape[0] % T

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]
print(amd_last)
95/103:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)
window_shift_modulo = combined.shape[0] % T

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])
print(combined.loc[["AMD"], "CCHV"].isnull().sum())

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]
print(amd_last)
95/104:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)
window_shift_modulo = combined.shape[0] % T

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std().shift() * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])
print(combined.loc[["AMD"], "CCHV"].isnull().sum())

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]
print(amd_last)
95/105:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)
window_shift_modulo = combined.shape[0] % T

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

print(combined.loc[["AMD"], "CCHV"])
print(combined.loc[["AMD"], "CCHV"].isnull().sum())

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]
print(amd_last)
95/106:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)


nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]
print(amd_last)
95/107:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]
print(amd_last)
95/108:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]

line.text(amd_last["Datetime"], amd_last["CCHV"], amd_last["CCHV"].round(3))
print(amd_last)
95/109:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]

line.text(amd_last["Datetime"], amd_last["CCHV"], np.round(amd_last["CCHV"],3))
print(amd_last)
95/110:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]

line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], np.round(amd_last["CCHV"],3))
print(amd_last)
95/111:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]

line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], np.round(amd_last["CCHV"], 3))
print(amd_last)
95/112:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]

line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s="Hi")
print(amd_last)
95/113:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]

line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"],3))
print(amd_last)
95/114:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]

line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=amd_last["CCHV"])
print(amd_last)
95/115:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]

line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=amd_last["CCHV"])
print(amd_last)
95/116:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]

line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=str(amd_last["CCHV"]))
print(amd_last)
95/117:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]

line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=str(amd_last))
print(amd_last)
95/118:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]

line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=str(amd_last.loc["CCHV"]))
print(amd_last)
95/119:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]

line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=str(amd_last["CCHV"][0]))
print(amd_last)
95/120:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]

line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],2))
print(amd_last)
95/121:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]

line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3))
print(amd_last)
95/122:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]

line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
print(amd_last)
95/123:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]
amd_last = combined.loc[["NVIDIA"]].iloc[-1:]

line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

print(amd_last)
95/124:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]

line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/125:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]

line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/126:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"]**2).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/127:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"]**2).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"]**2).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/128:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] - combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] - combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/129:
annual_trading_days = 252

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/130:
annual_trading_days = 260

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/131:
annual_trading_days = 260

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Close"] / combined.loc[["AMD"], "Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/132:
annual_trading_days = 260

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).apply(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).apply(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/133:
amd_rs = (1.0 / (4.0 * math.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2.0
nvidia_rs = (1.0 / (4.0 * math.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2.0


combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean() ** 0.5)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean() ** 0.5)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/134:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2.0
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2.0


combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean() ** 0.5)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean() ** 0.5)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/135:
import math
amd_rs = (1.0 / (4.0 * math.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2.0
nvidia_rs = (1.0 / (4.0 * math.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2.0


combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean() ** 0.5)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean() ** 0.5)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/136:
import math
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2.0
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2.0


combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean() ** 0.5)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean() ** 0.5)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/137:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2.0
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2.0


combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean() ** 0.5)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean() ** 0.5)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/138:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2.0
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2.0


combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/139:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2.0
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2.0

    def f(v):
        return trading_periods * v.mean()**0.5

combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).agg(func=f)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(func=f)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/140:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2.0
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2.0

def f(v):
    return trading_periods * v.mean()**0.5

combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).agg(func=f)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(func=f)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/141:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2.0
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2.0

def f(v):
    return annual_trading_days * v.mean()**0.5

combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).agg(func=f)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(func=f)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/142:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2.0
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2.0

combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/143:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2.0
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2.0

combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)
print(combined.loc[["AMD"]].head())
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/144:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2.0
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2.0

combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)

print(combined.loc[["AMD"]].head())

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/145:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2.0
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2.0

combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)

print(combined.loc[["AMD"]].tail())

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/146:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2

combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)

print(combined.loc[["AMD"]].tail())

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/147:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))

combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)

print(combined.loc[["AMD"]].tail())

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/148:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2

combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).apply(lambda x: annual_trading_days* x.mean()**0.5)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)

print(combined.loc[["AMD"]].tail())

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/149:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2

combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).apply(lambda x: annual_trading_days* (x.mean()**0.5))
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)

print(combined.loc[["AMD"]].tail())

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/150:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2

combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).apply(lambda x: (annual_trading_days * x.mean())**0.5)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(lambda x: annual_trading_days* x.mean()**0.5)

print(combined.loc[["AMD"]].tail())

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/151:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2

combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).apply(lambda x: (annual_trading_days * x.mean())**0.5)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).agg(lambda x: (annual_trading_days* x.mean())**0.5)

print(combined.loc[["AMD"]].tail())

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/152:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2

combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).apply(lambda x: (annual_trading_days * x.mean())**0.5)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).apply(lambda x: (annual_trading_days* x.mean())**0.5)

print(combined.loc[["AMD"]].tail())

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/153:
amd_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["AMD"], "High"] / combined.loc[["AMD"],"Low"]).apply(np.log))**2
nvidia_rs = (1.0 / (4.0 * np.log(2.0))) * ((combined.loc[["NVIDIA"], "High"] / combined.loc[["NVIDIA"],"Low"]).apply(np.log))**2

combined.loc[["AMD"], "PHV"] = amd_rs.rolling(window=T).apply(lambda x: (annual_trading_days * x.mean())**0.5)
combined.loc[["NVIDIA"], "PHV"] = nvidia_rs.rolling(window=T).apply(lambda x: (annual_trading_days* x.mean())**0.5)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="PHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["PHV"], s=np.round(amd_last["PHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["PHV"], s=np.round(nvidia_last["PHV"][0],3), color="orange")
95/154:
annual_trading_days = 260

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.regplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/155:
annual_trading_days = 260

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lmplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/156:
annual_trading_days = 260

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lmplot(x= "Datetime", y="CCHV", hue=["Stock"], data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/157:
annual_trading_days = 260

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lmplot(x= "Datetime", y="CCHV", hue=combined.loc[["AMD","NVIDIA"]].index, data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/158:
annual_trading_days = 260

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lmplot(x= "Datetime", y="CCHV", hue=combined.loc[["AMD","NVIDIA"]].index["Stock"], data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/159:
annual_trading_days = 260

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue=combined.loc[["AMD","NVIDIA"]].index["Stock"], data=combined.loc[["AMD","NVIDIA"]], err_style="bars", ci=95)

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/160:
annual_trading_days = 260

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]], err_style="bars", ci=95)

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/161:
annual_trading_days = 260

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]], err_style="bars", ci=60)

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/162:
annual_trading_days = 260

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]], err_style="bars", ci=10)

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/163:
annual_trading_days = 260

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")
95/164:
annual_trading_days = 260

T = 30 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
95/165:
annual_trading_days = 260

T = 60 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
95/166:
annual_trading_days = 260

T = 60 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T, center=True).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T, center=True).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
95/167:
annual_trading_days = 260

T = 60 # trading days window

combined = combined.sort_index(level=1, ascending=True)

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
95/168:
##Simple Risk-Reward-Ratio: The Sharpe Ratio
The easist method for a first glance on assessing the desirability of one asset to another in terms of risk and reward is the Sharpe Ratio. It was developed in 1966 to compare the expected return of two assets in relation to the implied risk. It is still used today in portfolio risk analysis and significantly contributed to William Sharpe's win of the Nobel Prize in Economics.

The Sharpe Ratio of two assets is best determined in comparison to a shared benchmark. The S&P500 is a popular index that covers the top 500 US equities. Both AMD and NVDA are featured on the S&P 500 and have been a strong contributor in the recent years. The S&P 500 is therefore a well fitting benchmark for a Sharpe Ratio calculation.
95/169:
## Simple Risk-Reward-Ratio: The Sharpe Ratio
The easist method for a first glance on assessing the desirability of one asset to another in terms of risk and reward is the Sharpe Ratio. It was developed in 1966 to compare the expected return of two assets in relation to the implied risk. It is still used today in portfolio risk analysis and significantly contributed to William Sharpe's win of the Nobel Prize in Economics.

The Sharpe Ratio of two assets is best determined in comparison to a shared benchmark. The S&P500 is a popular index that covers the top 500 US equities. Both AMD and NVDA are featured on the S&P 500 and have been a strong contributor in the recent years. The S&P 500 is therefore a well fitting benchmark for a Sharpe Ratio calculation.
95/170:
#### Setup S&P 500 Index Data
The data provider for the S&P 500 Index is nasdaq.com. The dataset features the same points on `Open`, `Close`, `High` and `Low` values. A `Volume` on the index dataset is not available.
The dataframe will be initiated with the `Date` column as its index.
95/171: sp500 = pd.read_csv("/datasets/S&P500.csv")
95/172: sp500 = pd.read_csv("./datasets/S&P500.csv")
95/173:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
combined = combined.sort_index(level=1, ascending=True)
95/174: sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date")
95/175:
sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date")

sp500.head()
95/176:
sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date")

sp500.head()
95/177:
sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date")

# 
sp500.describe()
95/178:
sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date")

# review dataframe structure
sp500.head()
95/179: sp500["Discrete Return"] = sp500.pct_change()
95/180: sp500["Discrete Return"] = sp500["Close"].pct_change()
95/181:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD", "Discrete Return"]] = combined.loc[["AMD", "Adj Close"]].pct_change()
combined.loc[["NVIDIA", "Discrete Return"]] = combined.loc[["NVIDIA", "Adj Close"]].pct_change()
95/182:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
95/183:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print(combined[:, "Discrete Return"])
95/184:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print(combined.loc[:, "Discrete Return"])
95/185:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print(combined.loc[:, "Discrete Return"].tail())
95/186:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail())
95/187:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail(10))
95/188:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail(20))
95/189:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail())
95/190:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print(sp500["Discrete Return"].tail())
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail())
95/191:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print(sp500["Discrete Return"].tail());
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail())
95/192:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print(sp500["Discrete Return"].tail())
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
95/193:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print(sp500["Discrete Return"].tail())
print("\n")
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
95/194:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print(sp500["Discrete Return"].tail())
print("\n")
print(combined.loc["Discrete Return"].tail());
95/195:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print(sp500["Discrete Return"].tail())
print("\n")
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
95/196:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
95/197:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
95/198:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
95/199:
sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date")

# review dataframe structure
sp500.head()

sp500.plot(title="S&P500 Index")
95/200:
sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date").sort_values(level=0, ascending=True)

# review dataframe structure
sp500.head()

sp500.plot(title="S&P500 Index")
95/201:
sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date").sort_values(ascending=True)

# review dataframe structure
sp500.head()

sp500.plot(title="S&P500 Index")
95/202:
sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date").sort_index(level=0, ascending=True)

# review dataframe structure
sp500.head()

sp500.plot(title="S&P500 Index")
95/203:
sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date").sort_index(level=0, ascending=True)

# review dataframe structure
sp500.head()

sp500.plot(title="S&P500 Index")
95/204:
sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date").sort_index(level=0, ascending=False)

# review dataframe structure
sp500.head()

sp500.plot(title="S&P500 Index")
95/205:
sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date").sort_index(ascending=False)

# review dataframe structure
sp500.head()

sp500.plot(title="S&P500 Index")
95/206:
sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date").sort_index(level=1, ascending=False)

# review dataframe structure
sp500.head()

sp500.plot(title="S&P500 Index")
95/207:
sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date")

# review dataframe structure
sp500.head()

sp500.plot(title="S&P500 Index")
95/208:
sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date")

# review dataframe structure
sp500.head()

sns.lineplot(x="Date", y="Close", data=sp500)
95/209:
sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date")

# review dataframe structure
sp500.head()
95/210:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
95/211:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
95/212:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
95/213:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
95/214: combined.loc[["AMD", "NVIDIA"], "Excess Return"] = combined.loc[["AMD", "NVIDIA"], "Discrete Return"].sub(axis=0, sp500["Discrete Return"])
95/215: combined.loc[["AMD", "NVIDIA"], "Excess Return"] = combined.loc[["AMD", "NVIDIA"], "Discrete Return"].sub(axis=0, other=sp500["Discrete Return"])
95/216:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
95/217: combined.loc[["AMD", "NVIDIA"], "Excess Return"] = combined.loc[["AMD", "NVIDIA"], "Discrete Return"].sub(axis=0, other=sp500["Discrete Return"])
95/218:
combined.loc[["AMD", "NVIDIA"], "Excess Return"] = combined.loc[["AMD", "NVIDIA"], "Discrete Return"].sub(axis=0, other=sp500["Discrete Return"])

combined.loc[["AMD", "NVIDIA"], "Excess Return"].plot()
95/219:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, other=sp500["Discrete Return"])


combined.loc[["AMD", "NVIDIA"], "Excess Return"].plot()
95/220:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, other=sp500["Discrete Return"])


combined.loc[["AMD", "NVIDIA"], "Excess Return"].plot()
95/221:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, other=sp500["Discrete Return"])


combined.loc[["AMD", "NVIDIA"], "Excess Return"].plot()
95/222:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])


combined.loc[["AMD", "NVIDIA"], "Excess Return"].plot()
95/223:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/224:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/225:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])
95/226:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
95/227:
sp500 = pd.read_csv("./datasets/S&P500.csv").set_index("Date")

# review dataframe structure
sp500.head()
95/228:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
95/229:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
95/230:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/231:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"] - sp500["Discrete Return"]
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"] - sp500["Discrete Return"]

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/232:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"] - sp500["Discrete Return"]
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"] - sp500["Discrete Return"]

print(combined.loc[["NVIDIA"]])

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/233:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"] - sp500["Discrete Return"]
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"] - sp500["Discrete Return"]

print(sp500)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/234:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"] - sp500["Discrete Return"]

print(sp500)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/235:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"] - sp500["Discrete Return"]

print(sp500["Discrete Return"])

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/236:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"] - sp500["Discrete Return"]

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/237:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=1, sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"] - sp500["Discrete Return"]

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/238:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"] - sp500["Discrete Return"]

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/239:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis="columns", other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"] - sp500["Discrete Return"]

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/240:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis="index", other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"] - sp500["Discrete Return"]

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/241:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"] - other=sp500["Discrete Return"]
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"] - sp500["Discrete Return"]

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/242:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"] - sp500["Discrete Return"]
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"] - sp500["Discrete Return"]

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/243:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"] - sp500["Discrete Return"]
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"] - sp500["Discrete Return"]

print(combined.loc[["AMD"], "Excess Return"])
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/244:
combined.loc[["AMD"], "Excess Return"] = float(combined.loc[["AMD"], "Discrete Return"]) - float(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"] - sp500["Discrete Return"]

print(combined.loc[["AMD"], "Excess Return"])
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/245:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"] - sp500["Discrete Return"]
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"] - sp500["Discrete Return"]

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/246:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"] - sp500["Discrete Return"]

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/247:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/248:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=0, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=0, other=sp500["Discrete Return"])

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/249:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/250:
sp500 = pd.read_csv("./datasets/S&P500.csv")
sp500["Date"] = pd.to_datetime(sp500["Date"])
# review dataframe structure
sp500.head()
95/251:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500.set_index("Date")

# review dataframe structure
sp500.head()
95/252:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
95/253:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500.set_index("Date")

# review dataframe structure
sp500.head()
95/254:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
95/255:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500.set_index(["Date"])

# review dataframe structure
sp500.head()
95/256:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
95/257:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index(["Date"])

# review dataframe structure
sp500.head()
95/258:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
95/259:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
95/260:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date")

# review dataframe structure
sp500.head()
95/261:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
95/262:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
95/263:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/264:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=0, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=0, other=sp500["Discrete Return"])

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/265:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/266:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Excess Return"])
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/267:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"]))
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/268:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(axis=1, level=1, other=sp500["Discrete Return"]))
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/269:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=2, other=sp500["Discrete Return"]))
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/270:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=0, other=sp500["Discrete Return"]))
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/271:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, ))
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/272:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0 ))
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/273:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=1 ))
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/274:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"] ))
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/275:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], index="Date" ))
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/276:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(sp500["Date", "Discrete Return"]))
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/277:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(sp500[["Date"], "Discrete Return"]))
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/278:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(sp500.loc[["Date"], "Discrete Return"]))
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/279:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(sp500.loc["Date", "Discrete Return"]))
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/280:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(sp500.iloc[0]["Discrete Return"]))
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/281:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"] - sp500["Discrete Return"])
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/282:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].dropna() - sp500["Discrete Return"].dropna())
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/283:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined[Discrete Return] - sp500["Discrete Return"])
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/284:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined["Discrete Return"] - sp500["Discrete Return"])
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/285:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"]- sp500["Discrete Return"])
print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/286:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"]- sp500["Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/287:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"] - sp500["Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/288:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/289:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"]))


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/290:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"]))

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/291:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"])

print(combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"], fill_value=0))

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/292:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"], fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"], fill_value=0)

print(combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"], fill_value=0))

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/293:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], level=1, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], level=1, fill_value=0)

print(combined.loc[["AMD"], "Discrete Return"].sub(axis=0, level=1, other=sp500["Discrete Return"], fill_value=0))

print(sp500["Discrete Return"])
print(combined.loc[["AMD"],"Discrete Return"])


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
95/294:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], level=1, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], level=1, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();
95/295:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=1, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], level=1, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();
95/296:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=1, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=1, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();
95/297:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=1, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();
95/298:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();
95/299:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return"].describe())
95/300:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

combined.loc[["AMD", "NVIDIA"], "Excess Return"].describe()
95/301:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

combined.loc[["AMD", "NVIDIA"], "Excess Return"].describe();
95/302:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

combined.loc[["AMD", "NVIDIA"], "Excess Return"].describe()
95/303:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

combined["Excess Return"].describe()
95/304:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

combined.loc[["AMD", "NVIDIA"], "Excess Return"].describe()
95/305:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();
95/306:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

combined.loc[["NVIDIA"], "Excess Return"].describe()
95/307:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

combined.loc[["AMD","NVIDIA"], "Excess Return"].describe()
95/308:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

plt.style.use('fivethirtyeight')
%matplotlib inline

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

combined.loc[["AMD","NVIDIA"], "Excess Return"].describe()
95/309:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

combined.loc[["AMD","NVIDIA"], "Excess Return"].describe()
95/310:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

combined.loc[["AMD","NVIDIA"], "Excess Return"].describe()
95/311:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
plt.style.use('fivethirtyeight')
%matplotlib inline


sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

combined.loc[["AMD","NVIDIA"], "Excess Return"].describe()
95/312:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

combined.loc[["AMD","NVIDIA"], "Excess Return"].describe()
95/313:
sp500 = pd.read_csv("./datasets/S&P500.csv", index_col=["Date"])

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])

# review dataframe structure
sp500.head()
95/314:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date")

# review dataframe structure
sp500.head()
95/315:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD","NVIDIA"], "Excess Return"].describe())
95/316:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
95/317:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD","NVIDIA"], "Excess Return"].describe())
95/318:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD","NVIDIA"], "Excess Return"].info())
95/319:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD","NVIDIA"], "Excess Return"].describe())
95/320:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD","NVIDIA"]].describe())
95/321:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD","NVIDIA"], "Excess Return"].to_df())
95/322:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD","NVIDIA"], "Excess Return"].to_frame())
95/323:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD","NVIDIA"], "Excess Return"].to_frame().describe())
95/324:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD","NVIDIA"], "Excess Return"].to_series().describe())
95/325:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD","NVIDIA"], "Excess Return"]describe())
95/326:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD","NVIDIA"], "Excess Return"].describe())
95/327:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD","NVIDIA"], "Excess Return"].describe(include="all"))
95/328:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(pd.DataFrame(combined.loc[["AMD","NVIDIA"], "Excess Return"].describe()))
95/329:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return"].groupby("Stock").describe())
95/330:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return"].groupby("Stock").describe().unstack(1))
95/331:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return"].groupby("Stock").describe())
95/332:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return"].groupby("Stock").describe(exclude=["count"]))
95/333:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return"].groupby("Stock").describe(exclude=[0]))
95/334:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return"].groupby("Stock").describe())
95/335:
amd_mean_excess_return = combined.loc[["AMD"], "Excess Return"].mean()
nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Excess Return"].mean()

amd_excess_return_std = combined.loc[["AMD"], "Excess Return"].std()
nvidia_excess_return_std = combined.loc[["AMD"], "Excess Return"].std()

amd_sharpe_ratio = amd_mean_excess_return.div(amd_excess_return_std)
nvidia_sharpe_ratio = nvidia_mean_excess_return.div(nvidia_excess_return_std)

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print(annualized_amd_sharpe_ratio)
print(annualized_nvidia_sharpe_ratio)
95/336:
amd_mean_excess_return = combined.loc[["AMD"], "Excess Return"].mean()
nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Excess Return"].mean()

amd_excess_return_std = combined.loc[["AMD"], "Excess Return"].std()
nvidia_excess_return_std = combined.loc[["AMD"], "Excess Return"].std()

amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print(annualized_amd_sharpe_ratio)
print(annualized_nvidia_sharpe_ratio)
95/337:
amd_mean_excess_return = combined.loc[["AMD"], "Excess Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Excess Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Excess Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Excess Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print(annualized_amd_sharpe_ratio)
print(annualized_nvidia_sharpe_ratio)
95/338:
amd_mean_excess_return = combined.loc[["AMD"], "Excess Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Excess Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Excess Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Excess Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
95/339: A higher Sharpe Ratio implies a higher return relative to the volatility. A Sharpe Ratio of 1 and up is an indication of a return proportional to the risk (to the volatility). Therefore, the stock with the highest Sharpe Ratio should be considered as most desirable. In our case, *NVIDIA* wins the bet for best return-per-risk!
95/340:
annual_trading_days = 252

T = 60 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std().shift(window_shift_modulo) * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
95/341:
annual_trading_days = 252

T = 60 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
95/342:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
95/343:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
95/344:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,200])
ax[1].set_ylim([0,200])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
95/345:
amd["Discrete Returns"] = amd["Adj Close"].pct_change()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change()
95/346:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
95/347:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,200])
ax[1].set_ylim([0,200])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
95/348:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

plt.xkcd()

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
combined = combined.sort_index(level=1, ascending=True)
95/349:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
95/350:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

plt.xkcd()

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
combined = combined.sort_index(level=1, ascending=True)
95/351: print(combined.head())
95/352:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])
95/353:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
95/354:
annual_trading_days = 252

T = 60 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
95/355:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
95/356:
annual_trading_days = 252

T = 60 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
95/357:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
combined = combined.sort_index(level=1, ascending=True)
95/358:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
combined = combined.sort_index(level=1, ascending=True)
95/359: print(combined.head())
95/360:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])
95/361:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
95/362:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date")

# review dataframe structure
sp500.head()
95/363:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
95/364:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
95/365:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return"].groupby("Stock").describe())
95/366:
amd_mean_excess_return = combined.loc[["AMD"], "Excess Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Excess Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Excess Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Excess Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
95/367:
amd["Discrete Returns"] = amd["Adj Close"].pct_change()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change()
95/368:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
95/369:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,200])
ax[1].set_ylim([0,200])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
95/370:
amd_skew = stats.skew(amd["Discrete Returns"].dropna())
nvidia_skew = stats.skew(nvidia["Discrete Returns"].dropna())

print("The skewness for AMD's return distribution is:", np.round(amd_skew,3))
print("The skewness for NVIDIA's return distribution is:", np.round(nvidia_skew,3))
95/371:
amd_kurtosis = stats.kurtosis(amd["Discrete Returns"].dropna())
nvidia_kurtosis = stats.kurtosis(nvidia["Discrete Returns"].dropna())

print("The excess kurtosis for AMD's return distribution is:", np.round(amd_kurtosis,6))
print("The excess kurtosis for NVIDIA's return distribution is:", np.round(nvidia_kurtosis,6))
95/372:
amd_p_value = stats.shapiro(amd["Discrete Returns"].dropna()).pvalue
if amd_p_value <= 0.05:
    print("Null hypothesis rejected. The AMD return distribution is non-normal.")
else:
    print("Null hypothesis accepted. The AMD return distribution is normal.")
95/373:
nvidia_p_value = stats.shapiro(nvidia["Discrete Returns"].dropna()).pvalue
if nvidia_p_value <= 0.05:
    print("Null hypothesis rejected. The NVIDIA return distribution is non-normal.")
else:
    print("Null hypothesis accepted. The NVIDIA return distribution is normal.")
95/374:
annual_trading_days = 252

T = 60 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
95/375: Both assets show a relatively similar looking historical volatility development over the last years. This is to be expected from stable participants of one peer group (computer chip manufacturers). Events as short-comings on resources (e.g. silicon) or Apple cutting ways with AMD and NVIDIA to develop their own M1 chip affects both companies simultaneously.
95/376:
annual_trading_days = 252

T = 60 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
95/377:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
95/378:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
combined = combined.sort_index(level=1, ascending=True)
95/379: print(combined.head())
95/380:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])
95/381:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
130/1:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

amzn = pd.read_csv("./datasets/AMZN.csv")
tsla = pd.read_csv("./datasets/TSLA.csv")

combined = amzn.assign(Stock="Amazon").append(tsla.assign(Stock="Tesla")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
130/2: print(tsla.head())
130/3:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn).set(xticks=[], xlabel="Amazon Value History (2016-2021)", ylabel="Adjusted Closing Position");
plt.show()
130/4:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla).set(xticks=[], xlabel="Tesla Value History (2016-2021)", ylabel="Adjusted Closing Position");
plt.show()
130/5:
amzn["Pct Change"] = amzn["Adj Close"].pct_change()
tsla["Pct Change"] = tsla["Adj Close"].pct_change()
130/6:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Pct Change", data=amzn, ax=ax[0])
sns.lineplot(x = "Date", y = "Pct Change", data=tsla, ax=ax[1])

# describe axes
ax[0].set(xticks=[], xlabel="Amazon", ylabel="Percental Change (%)")
ax[1].set(xticks=[], xlabel="Tesla", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amzn["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axhline(y=tsla["Pct Change"].mean(), linewidth=3.0, color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
130/7:
rounded_amzn_changes = amzn["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=20, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=20, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla["Pct Change"].mean().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
130/8:
amzn_recent = amzn[(amzn["Date"] > "2020-10-07") & (amzn["Date"] < "2021-04-07")]
tsla_recent = tsla[(tsla["Date"] > "2021-03-07") & (tsla["Date"] < "2021-04-07")]
130/9:
sns.lineplot(x = "Date", y = "Adj Close", data=amzn_recent).set(xticks=[], xlabel="Amazon Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
130/10:
sns.lineplot(x = "Date", y = "Adj Close", data=tsla_recent).set(xticks=[], xlabel="Tesla Value History (Oct 20 - Apr 21)", ylabel="Adjusted Closing Position");
plt.show()
130/11:
rounded_amzn_changes = amzn_recent["Pct Change"].round(4).value_counts()
rounded_tsla_changes = tsla_recent["Pct Change"].round(4).value_counts()

fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=rounded_amzn_changes.index, bins=15, ax=ax[0], kde=True, kde_kws=dict(bw_method=.5))
sns.histplot(x=rounded_tsla_changes.index, bins=15, ax=ax[1], kde=True, kde_kws=dict(bw_method=.5))

# describe axes
ax[0].set(xlabel="Amazon Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="Tesla Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(amzn_recent["Pct Change"].mean().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].mean(), color="orange", label="Mean (" + str(tsla_recent["Pct Change"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amzn_recent["Pct Change"].median(), color="green", label="Median (" + str(amzn_recent["Pct Change"].median().round(4)) + ")")
ax[1].axvline(x=tsla_recent["Pct Change"].median(), color="green", label="Median (" + str(tsla_recent["Pct Change"].median().round(4)) + ")")

ax[0].set_xlim([-0.25,0.25])
ax[1].set_xlim([-0.25,0.25])

ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
130/12:
def GKYZ(df, window=180):
    first = True
    results = pd.DataFrame({ "gkyz" : []})
    trading_days_in_year = 252
    for i, data in df.iterrows():
        previous_close = df.iloc[i:]["Open"] if(first == True) else df.iloc[i-1:]["Close"]
        print(df.iloc[:i]["Open"])
        print(previous_close)
        first = False
        #log_ocprev = np.log(df.iloc[i]["Open"] / previous_close)
        #log_hl = np.log(df.iloc[i]["High"] / df.iloc[i]["Low"])
        #log_co = np.log(df.iloc[i]["Close"] / df.iloc[i]["Close"])
        #rs = log_ocprev**2 + 0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2
        #results = rs
    
    return results.rolling(window=window).apply(lambda d: d.mean() * np.sqrt(trading_days_in_year)).dropna()

print(GKYZ(tsla_recent))
132/1:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
combined = combined.sort_index(level=1, ascending=True)
132/2: print(combined.head())
132/3:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])
132/4:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
132/5:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date")

# review dataframe structure
sp500.head()
132/6:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
132/7:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
132/8:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return"].groupby("Stock").describe())
132/9:
amd_mean_excess_return = combined.loc[["AMD"], "Excess Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Excess Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Excess Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Excess Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
132/10:
amd["Discrete Returns"] = amd["Adj Close"].pct_change()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change()
132/11:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
132/12:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,200])
ax[1].set_ylim([0,200])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
132/13:
amd_skew = stats.skew(amd["Discrete Returns"].dropna())
nvidia_skew = stats.skew(nvidia["Discrete Returns"].dropna())

print("The skewness for AMD's return distribution is:", np.round(amd_skew,3))
print("The skewness for NVIDIA's return distribution is:", np.round(nvidia_skew,3))
132/14:
amd_kurtosis = stats.kurtosis(amd["Discrete Returns"].dropna())
nvidia_kurtosis = stats.kurtosis(nvidia["Discrete Returns"].dropna())

print("The excess kurtosis for AMD's return distribution is:", np.round(amd_kurtosis,6))
print("The excess kurtosis for NVIDIA's return distribution is:", np.round(nvidia_kurtosis,6))
132/15:
amd_p_value = stats.shapiro(amd["Discrete Returns"].dropna()).pvalue
if amd_p_value <= 0.05:
    print("Null hypothesis rejected. The AMD return distribution is non-normal.")
else:
    print("Null hypothesis accepted. The AMD return distribution is normal.")
132/16:
nvidia_p_value = stats.shapiro(nvidia["Discrete Returns"].dropna()).pvalue
if nvidia_p_value <= 0.05:
    print("Null hypothesis rejected. The NVIDIA return distribution is non-normal.")
else:
    print("Null hypothesis accepted. The NVIDIA return distribution is normal.")
132/17:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
132/18: Both assets show a relatively similar looking historical volatility development over the last years. This is to be expected from stable participants of one peer group (computer chip manufacturers). Events as short-comings on resources (e.g. silicon) or Apple cutting ways with AMD and NVIDIA to develop their own M1 chip affects both companies simultaneously.
132/19:
annual_trading_days = 252

T = 60 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
132/20:
annual_trading_days = 252

T = 30 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
132/21:
annual_trading_days = 252

T = 90 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
132/22:
annual_trading_days = 252

T = 50 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
132/23:
annual_trading_days = 252

T = 60 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
134/1:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
combined = combined.sort_index(level=1, ascending=True)
134/2: print(combined.head())
134/3:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])
134/4:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")

plt.show()
134/5:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date")

# review dataframe structure
sp500.head()
134/6:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
134/7:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
134/8:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return"].groupby("Stock").describe())
134/9:
amd_mean_excess_return = combined.loc[["AMD"], "Excess Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Excess Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Excess Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Excess Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
136/1:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
136/2:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
combined = combined.sort_index(level=1, ascending=True)
137/1:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel")).set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=False)
combined = combined.sort_index(level=1, ascending=True)
137/2: print(combined.head())
137/3:
combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))
amd["Datetime"] = pd.to_datetime(amd["Date"])
nvidia["Datetime"] = pd.to_datetime(nvidia["Date"])
137/4:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
137/5:
amd["Discrete Returns"] = amd["Adj Close"].pct_change()
nvidia["Discrete Returns"] = nvidia["Adj Close"].pct_change()
137/6:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=amd, ax=ax[0])
sns.lineplot(x = "Datetime", y = "Discrete Returns", data=nvidia, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=amd["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=nvidia["Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
137/7:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="green", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="green", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,200])
ax[1].set_ylim([0,200])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
137/8:
amd_skew = stats.skew(amd["Discrete Returns"].dropna())
nvidia_skew = stats.skew(nvidia["Discrete Returns"].dropna())

print("The skewness for AMD's return distribution is:", np.round(amd_skew,3))
print("The skewness for NVIDIA's return distribution is:", np.round(nvidia_skew,3))
137/9:
amd_kurtosis = stats.kurtosis(amd["Discrete Returns"].dropna())
nvidia_kurtosis = stats.kurtosis(nvidia["Discrete Returns"].dropna())

print("The excess kurtosis for AMD's return distribution is:", np.round(amd_kurtosis,6))
print("The excess kurtosis for NVIDIA's return distribution is:", np.round(nvidia_kurtosis,6))
137/10:
amd_p_value = stats.shapiro(amd["Discrete Returns"].dropna()).pvalue
if amd_p_value <= 0.05:
    print("Null hypothesis rejected. The AMD return distribution is non-normal.")
else:
    print("Null hypothesis accepted. The AMD return distribution is normal.")
137/11:
nvidia_p_value = stats.shapiro(nvidia["Discrete Returns"].dropna()).pvalue
if nvidia_p_value <= 0.05:
    print("Null hypothesis rejected. The NVIDIA return distribution is non-normal.")
else:
    print("Null hypothesis accepted. The NVIDIA return distribution is normal.")
137/12:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1)).agg(np.log)
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
137/13:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date")

# review dataframe structure
sp500.head()
137/14:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
137/15:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
137/16:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return"].groupby("Stock").describe())
137/17:
amd_mean_excess_return = combined.loc[["AMD"], "Excess Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Excess Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Excess Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Excess Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
137/18: combined["Datetime"] = pd.to_datetime(combined.index.get_level_values("Date"))
137/19:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined.index.get_level_values("Date"))

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
137/20:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
137/21: print(combined.head())
137/22:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Datetime", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
137/23:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
137/24:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Returns", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Returns", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
137/25:
combined.loc[["AMD"], "Discrete Returns"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Returns"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
137/26:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Returns", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Returns", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
137/27:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Returns", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Returns", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.title("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/28:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Returns", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Returns", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.title("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/29:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Returns", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Returns", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

ax.title("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/30:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Returns", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Returns", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/31:
combined.loc[["AMD"], "Discrete Returns"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Returns"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
137/32:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/33:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
137/34: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
137/35:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/36:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.40)
ax[1].set_ylim(-0.25,0.40)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/37:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/38:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/39:
amd_return_q95 = combined.loc[["AMD"], "Discrete Return"].quantile(.1)
nvidia_return_q95 = combined.loc[["AMD"], "Discrete Return"].quantile(.1)
137/40:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=amd_return_q95, ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=nvidia_return_q95, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/41:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = amd_return_q95.index, y = "Discrete Return", data=amd_return_q95, ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=nvidia_return_q95, ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/42:
amd_return_q95 = combined.loc[["AMD"], "Discrete Return"].quantile(.1)
nvidia_return_q95 = combined.loc[["AMD"], "Discrete Return"].quantile(.1)

print(amd_return_q95)
137/43:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0], ci=95)
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1], ci=95)

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/44:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0], ci=99)
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1], ci=99)

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/45:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0], ci=10)
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1], ci=10)

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/46:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0], ci=99)
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1], ci=99)

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/47: qi95 = combined.loc[["AMD"]].percentile(95)
137/48: qi95 = combined.loc[["AMD"], "Discrete Return"].percentile(95)
137/49: qi95 = combined.loc[["AMD"], "Discrete Return"].quantile(95)
137/50: qi95 = combined.loc[["AMD"], "Discrete Return"].quantile(.95)
137/51:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile(.95)
print(qi95)
137/52:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile(.05)
print(qi95)
137/53:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile(.99)
print(qi95)
137/54:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile(.50)
print(qi95)
137/55:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile(.999)
print(qi95)
137/56:
qi95 = combined.loc[["AMD"], "Discrete Return"].p(.1)
print(qi95)
137/57:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.05, 0.95])
print(qi95)
137/58:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975])
print(qi95)
137/59:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995])
print(qi95)
137/60:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0, 1])
print(qi95)
137/61:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.99])
print(qi95)
137/62:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.99])
print(qi95)
137/63:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.998])
print(qi95)
137/64:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.999])
print(qi95)
137/65:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.9999])
print(qi95)
137/66:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995])
print(qi95)
137/67:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0025, 0.9975])
print(qi95)
137/68:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile(.05)
print(qi95)
137/69:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
137/70:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0], ci=99)
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1], ci=99)

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/71:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0], ci=99)
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1], ci=99)

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile")

plt.show()
137/72:
Hmm, the quantile span of 95% of the data appears to be eliminating all relevant outliers we discovered in the previous visualization. We want to feature a maximum tolerance for outliers as exactly the outliers are the interesting part of a stock value volatility. 

What would happen if we try a 99% interval instead?
137/73:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
137/74:


# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile")

plt.show()
137/75:
# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile")

plt.show()
137/76:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/77:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
137/78:
# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile")

plt.show()
137/79:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")
137/80:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
137/81:
# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile")

plt.show()
137/82:
fig, ax

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile")

plt.show()
137/83:
fig

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile")

plt.show()
137/84:
fig

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile")
137/85:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")
137/86:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
137/87:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
137/88:
fig

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile")
137/89:
fig

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
137/90:
fig

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
137/91:
fig

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
fig.show()
137/92:
fig

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
ax.show()
137/93:
fig

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
137/94:
fig

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.draw()
137/95:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.draw()
137/96:
fig

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.draw()
137/97:
fig

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
137/98:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
137/99:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
137/100:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
137/101:
This paints a bit more visible picture of the variance, but even this 99% quantile is not allowing us to include the valuable strong outliers visually.
Let us try one last time with a 99.9% quantile.
137/102:
qi99.9 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi99.9)
137/103:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
137/104:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
137/105:
qi995 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0025, 0.9975]) # peripheral 0.1% left out 
print(qi999)
137/106:
qi995 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0025, 0.9975]) # peripheral 0.1% left out 
print(qi995)
137/107:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
137/108:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
137/109:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
137/110:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
137/111:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
137/112:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
137/113:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
137/114:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
137/115:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
137/116:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
137/117: This is a visual that we can work well with. It displays a good overview of the overall fluctuation of the stock's value and highlights that there are significant outliers without warping the visual overview into a far stretch.
137/118: #### Standard Deviation to determine wider spread
137/119:
#### Standard Deviation to determine wider spread
From our visuals, AMD _looks_ slightly more volatile, but we can further investigate this impression by visualizing the first standard deviation of both percental change distributions.
By drawing two horizontal lines for the standard deviation and same y-limits on both graphs next to each other, we hopefully have a visual feedback on which stock has a wider daily variance.
137/120:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="yellow")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="yellow")
ax[1].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="yellow")
ax[1].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="yellow")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${/sigma}$ std.");
plt.show()
137/121:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="yellow")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="yellow")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="yellow")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="yellow")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${/sigma}$ std.");
plt.show()
137/122:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="yellow")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="yellow")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="yellow")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="yellow", alpha=.8)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${/sigma}$ std.");
plt.show()
137/123:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="yellow")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="yellow")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="yellow")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="yellow", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${/sigma}$ std.");
plt.show()
137/124:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="yellow")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="yellow")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="yellow")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="yellow", alpha=.7)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${/sigma}$ std.");
plt.show()
137/125:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="yellow")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="yellow")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="yellow")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="yellow", alpha=.6)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${/sigma}$ std.");
plt.show()
137/126:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="yellow")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="yellow")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="yellow")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.6)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${/sigma}$ std.");
plt.show()
137/127:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="yellow")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="yellow")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="yellow")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${/sigma}$ std.");
plt.show()
137/128:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5)
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${/sigma}$ std.");
plt.show()
137/129:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="$1\mu$")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${/sigma}$ std.");
plt.show()
137/130:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="$1\mu$")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1 ${/sigma}$ std.");
plt.show()
137/131:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="$1\mu$")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1 ${\sigma}$ std.");
plt.show()
137/132:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="$1\mu$")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ std.");
plt.show()
137/133:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="$1\mu$")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (SD).");
plt.show()
137/134:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="$1\mu$")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev.).");
plt.show()
137/135:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="$1\mu$")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
137/136:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="1${\sigma}$ (Std Dev)")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="1${\sigma}$ (Std Dev)")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
137/137:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="1${\sigma}$ (Std Dev) (" + combined.loc[["AMD"], "Discrete Return"].std().round(4) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="1${\sigma}$ (Std Dev) (" + combined.loc[["AMD"], "Discrete Return"].std().round(4) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
137/138:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="1${\sigma}$ (Std Dev) (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="1${\sigma}$ (Std Dev) (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
137/139:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="1${\sigma}$ (Std Dev) (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="1${\sigma}$ (Std Dev) (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
137/140:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="1${\sigma}$ (Std Dev) (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="1${\sigma}$ (Std Dev) (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(ddof=2)*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
137/141:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="1${\sigma}$ (Std Dev) (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="1${\sigma}$ (Std Dev) (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(2)*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
137/142:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="1${\sigma}$ (Std Dev) (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*2, linewidth=3.0, color="green", alpha=.5, label ="1${\sigma}$ (Std Dev) (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-2), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
137/143:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="1${\sigma}$ (Std Dev) (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="1${\sigma}$ (Std Dev) (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
137/144:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Returns", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Returns", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (max-range: 50% change in one day -> statistically very unlikely to exceed)
ax[0].set_ylim(-0.25,0.25)
ax[1].set_ylim(-0.25,0.25)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Returns"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Returns"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Returns"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period")

plt.show()
137/145:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Returns"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=nvidia["Discrete Returns"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Returns"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Returns"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="red", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="red", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,200])
ax[1].set_ylim([0,200])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
137/146:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Return"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=nvidia["Discrete Return"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Return"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Return"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Return"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Return"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="red", label="Median (" + str(amd["Discrete Returns"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="red", label="Median (" + str(nvidia["Discrete Returns"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,200])
ax[1].set_ylim([0,200])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
137/147:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Return"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=nvidia["Discrete Return"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Return"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Return"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Return"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Return"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Returns"].median(), color="red", label="Median (" + str(amd["Discrete Return"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Returns"].median(), color="red", label="Median (" + str(nvidia["Discrete Return"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,200])
ax[1].set_ylim([0,200])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
137/148:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=amd["Discrete Return"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=nvidia["Discrete Return"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=amd["Discrete Return"].mean(), color="orange", label="Mean $\mu$ (" + str(amd["Discrete Return"].mean().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Return"].mean(), color="orange", label="Mean $\mu$ (" + str(nvidia["Discrete Return"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=amd["Discrete Return"].median(), color="red", label="Median (" + str(amd["Discrete Return"].median().round(4)) + ")")
ax[1].axvline(x=nvidia["Discrete Return"].median(), color="red", label="Median (" + str(nvidia["Discrete Return"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,200])
ax[1].set_ylim([0,200])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
137/149:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=combined.loc[["AMD"], "Discrete Return"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=combined.loc[["NVIDIA"], "Discrete Return"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=combined.loc[["AMD"], "Discrete Return"].mean(), color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axvline(x=combined.loc[["NVIDIA"], "Discrete Return"].mean(), color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=combined.loc[["AMD"], "Discrete Return"].median(), color="red", label="Median (" + str(combined.loc[["AMD"], "Discrete Return"].median().round(4)) + ")")
ax[1].axvline(x=combined.loc[["NVIDIA"], "Discrete Return"].median(), color="red", label="Median (" + str(combined.loc[["NVIDIA"], "Discrete Return"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.3])
ax[1].set_xlim([-0.3,0.3])

ax[0].set_ylim([0,200])
ax[1].set_ylim([0,200])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
137/150:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=combined.loc[["AMD"], "Discrete Return"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=combined.loc[["NVIDIA"], "Discrete Return"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=combined.loc[["AMD"], "Discrete Return"].mean(), color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axvline(x=combined.loc[["NVIDIA"], "Discrete Return"].mean(), color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# set median vertical line
ax[0].axvline(x=combined.loc[["AMD"], "Discrete Return"].median(), color="red", label="Median (" + str(combined.loc[["AMD"], "Discrete Return"].median().round(4)) + ")")
ax[1].axvline(x=combined.loc[["NVIDIA"], "Discrete Return"].median(), color="red", label="Median (" + str(combined.loc[["NVIDIA"], "Discrete Return"].median().round(4)) + ")")

ax[0].set_xlim([-0.3,0.5])
ax[1].set_xlim([-0.3,0.5])

ax[0].set_ylim([0,200])
ax[1].set_ylim([0,200])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
137/151:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
137/152:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=combined.loc[["AMD"], "Discrete Return"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=combined.loc[["NVIDIA"], "Discrete Return"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=combined.loc[["AMD"], "Discrete Return"].mean(), color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axvline(x=combined.loc[["NVIDIA"], "Discrete Return"].mean(), color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# set std dev vertical line
ax[0].axvline(x=combined.loc[["AMD"], "Discrete Return"].std(), color="red", label="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axvline(x=combined.loc[["AMD"], "Discrete Return"].std()*(-1), color="red", label="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[1].axvline(x=combined.loc[["NVIDIA"], "Discrete Return"].std(), color="red", label="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[0].axvline(x=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), color="red", label="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")


ax[0].set_xlim([-0.3,0.5])
ax[1].set_xlim([-0.3,0.5])

ax[0].set_ylim([0,200])
ax[1].set_ylim([0,200])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
137/153:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=combined.loc[["AMD"], "Discrete Return"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=combined.loc[["NVIDIA"], "Discrete Return"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=combined.loc[["AMD"], "Discrete Return"].mean(), color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axvline(x=combined.loc[["NVIDIA"], "Discrete Return"].mean(), color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# set std dev vertical line
ax[0].axvline(x=combined.loc[["AMD"], "Discrete Return"].std(), color="red", label="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axvline(x=combined.loc[["AMD"], "Discrete Return"].std()*(-1), color="red", label="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[1].axvline(x=combined.loc[["NVIDIA"], "Discrete Return"].std(), color="red", label="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axvline(x=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), color="red", label="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")


ax[0].set_xlim([-0.3,0.5])
ax[1].set_xlim([-0.3,0.5])

ax[0].set_ylim([0,200])
ax[1].set_ylim([0,200])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
137/154:
fig, ax = plt.subplots(1, 2, figsize=(16, 8))

sns.histplot(x=combined.loc[["AMD"], "Discrete Return"], bins=75, ax=ax[0], kde=True)
sns.histplot(x=combined.loc[["NVIDIA"], "Discrete Return"], bins=75, ax=ax[1], kde=True)

# describe axes
ax[0].set(xlabel="AMD Percental Change Distribution", ylabel="Frequency")
ax[1].set(xlabel="NVIDIA Percental Change Distribution", ylabel="Frequency")

# set mean vertical line
ax[0].axvline(x=combined.loc[["AMD"], "Discrete Return"].mean(), color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axvline(x=combined.loc[["NVIDIA"], "Discrete Return"].mean(), color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# set std dev vertical line
ax[0].axvline(x=combined.loc[["AMD"], "Discrete Return"].std(), color="green", alpha=.5, label="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axvline(x=combined.loc[["AMD"], "Discrete Return"].std()*(-1), color="green", alpha=.5, label="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[1].axvline(x=combined.loc[["NVIDIA"], "Discrete Return"].std(), color="green", alpha=.5, label="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axvline(x=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), color="green", alpha=.5, label="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")


ax[0].set_xlim([-0.3,0.5])
ax[1].set_xlim([-0.3,0.5])

ax[0].set_ylim([0,200])
ax[1].set_ylim([0,200])


ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

plt.show()
137/155: import volatility
137/156: from volatility import volest
137/157: import volest
137/158: import volatility
137/159:
import volatility
print(volatility)
137/160:
import volatility
print(volatility.models)
137/161: from volatility import volest
137/162:
impofg volatility
from volatility import volest
137/163:
import volatility
from volatility import volest
137/164:
import volatility
from volatility import models
137/165: from volatility import models
137/166: import volest
137/167: import volatility
137/168:
import volatility

print(volatility.volest.VolatilityEstimator(estimator="Raw"))
137/169:
import volatility

print(volatility.VolatilityEstimator(estimator="Raw"))
139/1:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
139/2: print(combined.head())
139/3:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
139/4:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
139/5: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
139/6:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
139/7:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
139/8:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
139/9:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
139/10:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
139/11:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
139/12:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
139/13:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
139/14:
import volatility

print(volatility.VolatilityEstimator(estimator="Raw"))
139/15:
import volatility

print(volatility.volest.VolatilityEstimator(estimator="Raw"))
139/16:
import volatility.volest

print(volatility.volest.VolatilityEstimator(estimator="Raw"))
139/17:
import volatility

print(volatility.volest.VolatilityEstimator(estimator="Raw"))
140/1:
import volatility

print(volatility.volest.VolatilityEstimator(estimator="Raw"))
140/2:
import models from volatility.volest

print(volatility.volest.VolatilityEstimator(estimator="Raw"))
140/3:
from volatility.volest import models

print(volatility.volest.VolatilityEstimator(estimator="Raw"))
140/4:
import volatility as volest
print(volatility.volest.VolatilityEstimator(estimator="Raw"))
140/5:
import volatility as volest
print(volest.volest.VolatilityEstimator(estimator="Raw"))
140/6:
import volatility as volest
print(volest.volest.VolatilityEstimator(estimator="Raw"))
140/7: import volatility as volest
140/8:
import volatility as volest
volest.volest.ESTIMATORS
140/9:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/10:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
140/11: print(combined.head())
140/12:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
140/13:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
140/14: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
140/15:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
140/16:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
140/17:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
140/18:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
140/19:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
140/20:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
140/21:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
140/22:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
140/23: import volatility as volest
140/24:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = amd_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/25:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Datetime", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Datetime"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/26:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Date"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Date"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/27:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Date"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Date"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/28:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
140/29: print(combined.head())
140/30:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
140/31:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
140/32: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
140/33:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
140/34:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
140/35:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
140/36:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
140/37:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
140/38:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
140/39:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
140/40:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
140/41: import volatility as volest
140/42:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Date"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Date"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/43:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
140/44: print(combined.head())
140/45:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
140/46:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
140/47: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
140/48:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
140/49:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
140/50:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
140/51:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
140/52:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
140/53:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
140/54:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
140/55:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
140/56:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Date"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Date"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/57:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last["Datetime"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Date"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/58:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = nvidia_log_returns.rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
#line.text(x= amd_last["Date"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
#line.text(x= nvidia_last["Date"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/59:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
#line.text(x= amd_last["Date"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
#line.text(x= nvidia_last["Date"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/60:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
print(amd_last)
#line.text(x= amd_last["Date"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
#line.text(x= nvidia_last["Date"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/61:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index["Date"], y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Date"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/62:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index, y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last["Date"], y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/63:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index, y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last.index, y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/64:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_indexer("Date"), y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last.index, y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/65:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_indexer("Date"), y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/66:
annual_trading_days = 252

T = 45 # trading days window

amd_log_returns = (combined.loc[["AMD"], "Adj Close"] / combined.loc[["AMD"], "Adj Close"].shift(1))
print(amd_log_returns)
print(combined.loc[["AMD"], "Discrete Return"])
combined.loc[["AMD"], "CCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

nvidia_log_returns = (combined.loc[["NVIDIA"],"Adj Close"] / combined.loc[["NVIDIA"],"Adj Close"].shift(1)).agg(np.log)
combined.loc[["NVIDIA"], "CCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/67:
annual_trading_days = 252

T = 45 # trading days window

combined.loc[["AMD"], "CCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc[["NVIDIA"], "CCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="CCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["CCHV"], s=np.round(amd_last["CCHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["CCHV"], s=np.round(nvidia_last["CCHV"][0],3), color="orange")

plt.show()
140/68:
annual_trading_days = 252

T = 45 # trading days window

combined.loc[["AMD"], "ACCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc[["NVIDIA"], "ACCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="ACCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["ACCHV"], s=np.round(amd_last["ACCHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["ACCHV"], s=np.round(nvidia_last["ACCHV"][0],3), color="orange")

plt.show()
140/69:
annual_trading_days = 252

T = 45 # trading days window

combined.loc[["AMD"], "ACCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc[["NVIDIA"], "ACCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="ACCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["ACCHV"], s=np.round(amd_last["ACCHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["ACCHV"], s=np.round(nvidia_last["ACCHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/70:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window=window).apply(lambda x: x * np.sqrt(annual_trading_days))
    return annualized.dropna()

combined[["AMD"], "PHV"] = parkinson(combined[["AMD"]], T)

combined.loc[["AMD"], "ACCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc[["NVIDIA"], "ACCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="ACCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["ACCHV"], s=np.round(amd_last["ACCHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["ACCHV"], s=np.round(nvidia_last["ACCHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/71:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window=window).apply(lambda x: x * np.sqrt(annual_trading_days))
    return annualized.dropna()

combined[["AMD"], "PHV"] = parkinson(combined.loc[["AMD"]], T)

combined.loc[["AMD"], "ACCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc[["NVIDIA"], "ACCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="ACCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["ACCHV"], s=np.round(amd_last["ACCHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["ACCHV"], s=np.round(nvidia_last["ACCHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/72:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window=window).apply(lambda x: x * np.sqrt(annual_trading_days))
    return annualized.dropna()

combined[["AMD"], "PHV"] = parkinson(combined.loc["AMD"], T)

combined.loc[["AMD"], "ACCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc[["NVIDIA"], "ACCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="ACCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["ACCHV"], s=np.round(amd_last["ACCHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["ACCHV"], s=np.round(nvidia_last["ACCHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/73:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window=window).apply(lambda x: x.mean() * np.sqrt(annual_trading_days))
    return annualized.dropna()

combined[["AMD"], "PHV"] = parkinson(combined.loc[["AMD"]], T)

combined.loc[["AMD"], "ACCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc[["NVIDIA"], "ACCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="ACCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["ACCHV"], s=np.round(amd_last["ACCHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["ACCHV"], s=np.round(nvidia_last["ACCHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/74:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window=window).apply(lambda x: x.mean() * np.sqrt(annual_trading_days))
    return annualized.dropna()

combined.loc[["AMD"], "PHV"] = parkinson(combined.loc[["AMD"]], T)

combined.loc[["AMD"], "ACCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc[["NVIDIA"], "ACCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="ACCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["ACCHV"], s=np.round(amd_last["ACCHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["ACCHV"], s=np.round(nvidia_last["ACCHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/75:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window=window).std() * np.sqrt(annual_trading_days))
    return annualized.dropna()

combined.loc[["AMD"], "PHV"] = parkinson(combined.loc[["AMD"]], T)

combined.loc[["AMD"], "ACCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc[["NVIDIA"], "ACCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="ACCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["ACCHV"], s=np.round(amd_last["ACCHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["ACCHV"], s=np.round(nvidia_last["ACCHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/76:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).std() * np.sqrt(annual_trading_days)
    return annualized.dropna()

combined.loc[["AMD"], "PHV"] = parkinson(combined.loc[["AMD"]], T)

combined.loc[["AMD"], "ACCHV"] = combined.loc[["AMD"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)
combined.loc[["NVIDIA"], "ACCHV"] = combined.loc[["NVIDIA"], "Discrete Return"].rolling(T).std() * np.sqrt(annual_trading_days)

fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="ACCHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Close to Close Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["ACCHV"], s=np.round(amd_last["ACCHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["ACCHV"], s=np.round(nvidia_last["ACCHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/77:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).std() * np.sqrt(annual_trading_days)
    return annualized.dropna()

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/78:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window) * np.sqrt(annual_trading_days)
    return annualized.dropna()

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/79:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    print(sigma)
    annualized =  sigma.rolling(window).std() * np.sqrt(annual_trading_days)
    return annualized.dropna()

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/80:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    print(sigma)
    annualized =  sigma.rolling(window).apply(lambda x: print(x)) * np.sqrt(annual_trading_days)
    return annualized.dropna()

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/81:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).apply(lambda x: print(x)) * np.sqrt(annual_trading_days)
    return annualized.dropna()

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/82:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).apply(lambda x: print(x))
    return annualized.dropna()

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/83:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).apply(lambda x: x * 2)
    return annualized.dropna()

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/84:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).apply(lambda x: float(x) * 2)
    return annualized.dropna()

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/85:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).applymap(lambda x: float(x) * 2)
    return annualized.dropna()

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/86:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).to_frame().applymap(lambda x: float(x) * 2)
    return annualized.dropna()

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/87:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).to_dataframe().applymap(lambda x: float(x) * 2)
    return annualized.dropna()

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/88:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).map(lambda x: x * 2)
    return annualized.dropna()

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/89:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)
    print(type(sigma.rolling(window)))
    annualized =  sigma.rolling(window).map(lambda x: x * 2)
    return annualized.dropna()

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/90:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        x * np.sqrt(annual_trading_days)
    annualized =  sigma.rolling(window).apply(func=annualize)
    return annualized.dropna()

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/91:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2).dropna()

    def annualize(x):
        x * np.sqrt(annual_trading_days)
    annualized =  sigma.rolling(window).apply(func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/92:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        x.dropna() * np.sqrt(annual_trading_days)
    annualized =  sigma.rolling(window).apply(func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/93:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        x.dropna() * np.sqrt(annual_trading_days)
    annualized =  sigma.rolling(window).apply(raw=True, func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/94:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        x.dropna() * np.sqrt(annual_trading_days)
    annualized =  sigma.rolling(window).apply(raw=False, func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/95:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        return x.dropna() * np.sqrt(annual_trading_days)
    annualized =  sigma.rolling(window).apply(raw=False, func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/96:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        return x.dropna() * np.sqrt(annual_trading_days)
    annualized =  sigma.rolling(window).agg(raw=False, func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/97:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        return x.dropna() * np.sqrt(annual_trading_days)
    annualized =  sigma.rolling(window).agg(func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/98:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        return x * np.sqrt(annual_trading_days)
    annualized =  sigma.rolling(window).agg(func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/99:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        return x * np.sqrt(annual_trading_days)
    annualized =  sigma.rolling(window).agg(annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/100:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        return x * np.sqrt(annual_trading_days)
    annualized =  sigma.rolling(window).agg(lambda x: annualize(x))
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/101:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        return x * np.sqrt(annual_trading_days)
    annualized =  sigma.rolling(window).agg(lambda x: annualize(x=x))
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/102:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        print(x)
        return x * np.sqrt(annual_trading_days)
    annualized =  sigma.rolling(window).agg(lambda x: annualize(x=x))
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/103:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        print(x)
        return x * np.sqrt(annual_trading_days)
    annualized =  sigma.rolling(window).apply(lambda x: x.agg(annualize(x=x)))
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/104:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        return x.agg(lambda x: x * np.sqrt(annual_trading_days))
    annualized =  sigma.rolling(window).apply(annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/105:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        return x.agg(lambda x: x * np.sqrt(annual_trading_days))
    annualized =  sigma.rolling(window).apply(func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/106:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        return x.applymap(lambda x: x * np.sqrt(annual_trading_days))
    annualized =  sigma.rolling(window).apply(func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/107:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        return x.agg(lambda x: x * np.sqrt(annual_trading_days))
    annualized =  sigma.rolling(window).apply(func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/108:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(x):
        return x.apply(lambda x: x * np.sqrt(annual_trading_days))
    annualized =  sigma.rolling(window).apply(func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/109:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(series):
        return series.apply(lambda x: x * np.sqrt(annual_trading_days), axis=1, reduce=False, raw=False)

    annualized =  sigma.rolling(window).apply(func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/110:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(series):
        return series.apply(func= lambda x: x * np.sqrt(annual_trading_days), axis=1, reduce=False, raw=False)

    annualized =  sigma.rolling(window).apply(func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/111:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(series):
        return series.apply(func=(lambda x: x * np.sqrt(annual_trading_days)), axis=1, reduce=False, raw=False)

    annualized =  sigma.rolling(window).apply(func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/112:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(series):
        return map(lambda x: x * np.sqrt(annual_trading_days), series)

    annualized =  sigma.rolling(window).apply(func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/113:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(series):
        return map(lambda x: x * np.sqrt(annual_trading_days), series)

    annualized =  sigma.rolling(window).agg(func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/114:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(series):
        return map(lambda x: x * np.sqrt(annual_trading_days), series)

    annualized =  sigma.rolling(window).agg(annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/115:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(series):
        return map(lambda x: x * np.sqrt(annual_trading_days), series)

    annualized =  sigma.rolling(window).agg(lambda x: annualize(x))
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/116:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(series):
        return map(lambda x: x * np.sqrt(annual_trading_days), series)

    annualized =  sigma.rolling(window).agg(func=annual_trading_days)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/117:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(series):
        return map(lambda x: x * np.sqrt(annual_trading_days), series)

    annualized =  sigma.rolling(window).agg(func=annualize)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/118:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    def annualize(series):
        return lambda x: x.mul

    annualized =  sigma.rolling(window).agg(np.multiply, np.sqrt(annual_trading_days))
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/119:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)
    return sigma

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/120:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)
    return sigma

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T) * np.sqrt(annual_trading_days)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/121:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)
    return sigma

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T) * np.sqrt(annual_trading_days)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T) * np.sqrt(annual_trading_days)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/122:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).mul(5)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/123:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).multiply(5)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/124:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window)
    print(annualized)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/125:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window)
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/126:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).apply(lambda x: x.mean() * np.sqrt(annual_trading_days))
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, 45 days rolling")

plt.show()
140/127:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).apply(lambda x: x.mean() * np.sqrt(annual_trading_days))
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period,", T,"days rolling")

plt.show()
140/128:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).apply(lambda x: x.mean() * np.sqrt(annual_trading_days))
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, " +  T + " days rolling")

plt.show()
140/129:
annual_trading_days = 252

T = 30 # trading days window

def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).apply(lambda x: x.mean() * np.sqrt(annual_trading_days))
    return annualized

combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)


fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, " + str(T) + " days rolling")

plt.show()
140/130:
def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).apply(lambda x: x.mean() * np.sqrt(annual_trading_days))
    return annualized
140/131:
annual_trading_days = 252
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], T)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, " + str(T) + " days rolling")

plt.show()
140/132:
annual_trading_days = 252
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Historical Volatility (CCHV) in 5-year period, " + str(T) + " days rolling")

plt.show()
140/133:
annual_trading_days = 252
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Annualized Parkison Historical Volatility (APHV) in 5-year period, " + str(T) + " days rolling")

plt.show()
140/134:
annual_trading_days = 252
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Parkinson Historical Volatilityin 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/135:
annual_trading_days = 252
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Parkinson Historical Volatility in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/136:
annual_trading_days = 252
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/137:
def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).apply(lambda x: x.max() * np.sqrt(annual_trading_days))
    return annualized
140/138:
annual_trading_days = 252
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/139:
def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).apply(lambda x: x.mean() * np.sqrt(annual_trading_days))
    return annualized
140/140:
annual_trading_days = 252
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/141:
def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.rolling(window).std()  * np.sqrt(annual_trading_days)
    return annualized
140/142:
annual_trading_days = 252
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/143:
def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma.apply(lambda x: x * np.sqrt(annual_trading_days))
    return annualized
140/144:
annual_trading_days = 252
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/145:
def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2)))  *((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma
    return annualized
140/146:
def parkinson(data, window):
    sigma = np.sqrt((1 / (4 * np.log(2))) * ((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma
    return annualized
140/147:
def parkinson(data, window):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()
    sigma = np.sqrt((1 / (4 * np.log(2))) * ((data["High"] / data["Low"]).apply(np.log))**2)

    annualized =  sigma
    return annualized
140/148:
def parkinson(data, window):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    sigma = np.sqrt(variance)

    annualized =  sigma
    return annualized
140/149:
annual_trading_days = 252
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/150:
def parkinson(data, window):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    sigma = np.sqrt(variance)
    return sigma
140/151:
annual_trading_days = 252
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T) * np.sqrt(annual_trading_days)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T) * np.sqrt(annual_trading_days)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/152:
def parkinson(data, window):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).mean()

    sigma = np.sqrt(variance)
    return sigma
140/153:
annual_trading_days = 252
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T) * np.sqrt(annual_trading_days)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T) * np.sqrt(annual_trading_days)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/154:
def parkinson(data, window):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * (252/window) * HL.rolling(window=window).sum()

    sigma = np.sqrt(variance)
    return sigma
140/155:
annual_trading_days = 252
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/156:
def parkinson(data, window, annual_trading_days = 252, annualized = True):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    def annualize(v):
        return v * (annual_trading_days/window)

    if annualized:
        return np.sqrt(annualize(variance))
    else return np.sqrt(variance)
140/157:
def parkinson(data, window, annual_trading_days = 252, annualized = True):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    def annualize(v):
        return v * (annual_trading_days/window)

    if annualized:
        return np.sqrt(annualize(variance))
    else: return np.sqrt(variance)
140/158:
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/159:
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualize=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualize=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/160:
T = 30 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/161:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/162:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=40, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/163:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=50, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/164:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True).shift(10)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/165:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True).shift(15)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/166:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/167: ### Covariance of AMD & NVIDIA
140/168:
### Covariance of AMD & NVIDIA
If variables (in this case: two volatility time-series) move together, we speak of a _positive_ covariance. For movements in an opposite direction, we observe a _negative_ covariance. For our volatility graphs, our attempt is to proof a positive covariance between AMD and NVIDIA's volatility.

We can use the following equation for covariance:

### $cov(A, B) = \rho \times$
140/169: corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"], combined.loc[["NVIDIA"], "Discrete Return"])
140/170:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"], combined.loc[["NVIDIA"], "Discrete Return"])
cov = corrcoef * combined.loc[["AMD"], "APHV"] * combined.loc[["NVIDIA"], "APHV"]
140/171:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"], combined.loc[["NVIDIA"], "Discrete Return"])[0,1]
cov = corrcoef * combined.loc[["AMD"], "APHV"] * combined.loc[["NVIDIA"], "APHV"]
140/172:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"], combined.loc[["NVIDIA"], "Discrete Return"])[0,1]
cov = corrcoef * combined.loc[["AMD"], "APHV"] * combined.loc[["NVIDIA"], "APHV"]

cov.plot()
140/173:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"], combined.loc[["NVIDIA"], "Discrete Return"])[0,1]
cov = corrcoef * combined.loc[["AMD"], "APHV"] * combined.loc[["NVIDIA"], "APHV"]

print(cov)
140/174:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"], combined.loc[["NVIDIA"], "Discrete Return"])[0,1]
print(corrcoef)
cov = corrcoef * combined.loc[["AMD"], "APHV"] * combined.loc[["NVIDIA"], "APHV"]

print(cov)
140/175:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"], combined.loc[["NVIDIA"], "Discrete Return"])[0,1]
print(corrcoef)
print(ombined.loc[["AMD"], "Discrete Return"])
cov = corrcoef * combined.loc[["AMD"], "APHV"] * combined.loc[["NVIDIA"], "APHV"]

print(cov)
140/176:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"], combined.loc[["NVIDIA"], "Discrete Return"])[0,1]
print(corrcoef)
print(combined.loc[["AMD"], "Discrete Return"])
cov = corrcoef * combined.loc[["AMD"], "APHV"] * combined.loc[["NVIDIA"], "APHV"]

print(cov)
140/177:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
140/178: print(combined.head())
140/179:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
140/180:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
140/181: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
140/182:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
140/183:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
140/184:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
140/185:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
140/186:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
140/187:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
140/188:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
140/189:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
140/190:
def parkinson(data, window, annual_trading_days = 252, annualized= True):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    def annualize(v):
        return v * (annual_trading_days/window)

    if annualized:
        return np.sqrt(annualize(variance))
    else: return np.sqrt(variance)
140/191:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/192:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"], combined.loc[["NVIDIA"], "Discrete Return"])[0,1]
print(corrcoef)
print(combined.loc[["AMD"], "Discrete Return"])
cov = corrcoef * combined.loc[["AMD"], "APHV"] * combined.loc[["NVIDIA"], "APHV"]

print(cov)
140/193:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date")

# review dataframe structure
sp500.head()
140/194:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
140/195:
sp500["Discrete Return"] = sp500["Close"].pct_change()

combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
140/196:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Datetime", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return"].groupby("Stock").describe())
140/197:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print(corrcoef)
print(combined.loc[["AMD"], "Discrete Return"])
cov = corrcoef * combined.loc[["AMD"], "APHV"] * combined.loc[["NVIDIA"], "APHV"]

print(cov)
140/198:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient: ", corrcoef)
cov = corrcoef * combined.loc[["AMD"], "APHV"] * combined.loc[["NVIDIA"], "APHV"]

print(cov)
140/199:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)
cov = corrcoef * combined.loc[["AMD"], "APHV"] * combined.loc[["NVIDIA"], "APHV"]

print(cov)
140/200:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"] * combined.loc[["NVIDIA"], "APHV"]
print(cov)
140/201:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/202:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"] * combined.loc[["NVIDIA"], "APHV"]
print(cov)
140/203:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"]
print(cov)
140/204:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].dropna()
print(cov)
140/205:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].dropna() * combined.loc[["NVIDIA"], "Discrete Return"].dropna()
print(cov)
140/206:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].dropna() * combined.loc[["NVIDIA"], "APHV"].dropna()
print(cov)
140/207:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].dropna()
print(cov)
140/208:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].dropna() * combined.loc[["NVIDIA"], "APHV"].dropna()
print(cov)
140/209:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].dropna()
print(cov)
140/210:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

print(combined.loc[["NVIDIA"], "APHV"].dropna())
cov = corrcoef * combined.loc[["AMD"], "APHV"].dropna()
print(cov)
140/211:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

print(combined.loc[["NVIDIA"], "APHV"].dropna())
cov = corrcoef * combined.loc[["NVIDIA"], "APHV"].dropna() 
print(cov)
140/212:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

print(combined.loc[["NVIDIA"], "APHV"].dropna())
cov = corrcoef * combined.loc[["NVIDIA"], "APHV"].dropna() * combined.loc[["NVIDIA"], "APHV"].dropna()
print(cov)
140/213:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

print(combined.loc[["NVIDIA"], "APHV"].dropna())
cov = corrcoef * combined.loc[["NVIDIA"], "APHV"].dropna() * combined.loc[["AMD"], "APHV"].dropna()
print(cov)
140/214:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

print(combined.loc[["NVIDIA"], "APHV"].dropna())
print(combined.loc[["AMD"], "APHV"].dropna())

cov = corrcoef * combined.loc[["NVIDIA"], "APHV"].dropna() * combined.loc[["AMD"], "APHV"].dropna()
print(cov)
140/215:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

print(combined.loc[["NVIDIA"], "APHV"].head())
print(combined.loc[["AMD"], "APHV"].head())

cov = corrcoef * combined.loc[["NVIDIA"], "APHV"].dropna() * combined.loc[["AMD"], "APHV"].dropna()
print(cov)
140/216:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

print(combined.loc[["NVIDIA"], "APHV"].tail())
print(combined.loc[["AMD"], "APHV"].tail())

cov = corrcoef * combined.loc[["NVIDIA"], "APHV"].dropna() * combined.loc[["AMD"], "APHV"].dropna()
print(cov)
140/217:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

print(combined.loc[["NVIDIA"], "APHV"].dropna())
print(combined.loc[["AMD"], "APHV"].dropna())

cov = corrcoef * combined.loc[["NVIDIA"], "APHV"].dropna() * combined.loc[["AMD"], "APHV"].dropna()
print(cov)
140/218:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

print(combined.loc[["NVIDIA"], "APHV"].dropna())
print(combined.loc[["AMD"], "APHV"].dropna())

cov = corrcoef * (combined.loc[["NVIDIA"], "APHV"].dropna()) * combined.loc[["AMD"], "APHV"].dropna()
print(cov)
140/219:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

print(combined.loc[["NVIDIA"], "APHV"].dropna())
print(combined.loc[["AMD"], "APHV"].dropna())

cov = corrcoef * (combined.loc[["NVIDIA"], "APHV"].dropna()) * (combined.loc[["AMD"], "APHV"].dropna())
print(cov)
140/220:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

print(combined.loc[["NVIDIA"], "APHV"].dropna())
print(combined.loc[["AMD"], "APHV"])

cov = corrcoef * (combined.loc[["NVIDIA"], "APHV"].dropna()) * (combined.loc[["AMD"], "APHV"].dropna())
print(cov)
140/221:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

print(combined.loc[["NVIDIA"], "APHV"])
print(combined.loc[["AMD"], "APHV"])

cov = corrcoef * (combined.loc[["NVIDIA"], "APHV"].dropna()) * (combined.loc[["AMD"], "APHV"].dropna())
print(cov)
140/222:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

print(combined.loc[["NVIDIA"], "APHV"])
print(combined.loc[["AMD"], "APHV"])

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(combined.loc[["NVIDIA"], "APHV"], axis=0)
print(cov)
140/223:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

print(combined.loc[["NVIDIA"], "APHV"])
print(combined.loc[["AMD"], "APHV"])

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)
print(cov)
140/224:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

print(combined.loc[["NVIDIA"], "APHV"])
print(combined.loc[["AMD"], "APHV"])

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0).dropna()
140/225:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0).dropna()

plt.plot(cov)
140/226:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0).dropna()

plt.plot(cov, color="gold")
plt.show()
140/227:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

plt.plot(cov, color="gold")
plt.show()
140/228:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
plt.plot(cov, color="gold")
plt.show()
140/229:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
plt.plot(cov.dropna(), color="gold")
plt.show()
140/230:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
plt.plot(x=cov.index, data=cov, color="gold")
plt.show()
140/231:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
plt.plot(data=cov, color="gold")
plt.show()
140/232:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
plt.lineplot(data=cov, color="gold")
plt.show()
140/233:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(data=cov, color="gold")
plt.show()
140/234:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(cov, color="gold")
plt.show()
140/235:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(x=cov.index.get_level_values("Date"), data=cov, color="gold")
plt.show()
140/236:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(x="Date", data=cov, color="gold")
plt.show()
140/237:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(x="Date", y=cov[1] data=cov, color="gold")
plt.show()
140/238:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(x="Date", y=cov[1], data=cov, color="gold")
plt.show()
140/239:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(x="Date", y="APHV", data=cov, color="gold")
plt.show()
140/240:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(x="Date", data=cov, color="gold")
plt.show()
140/241:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
print(type(cov))
sns.lineplot(x="Date", data=cov, color="gold")
plt.show()
140/242:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(x="Date", data=cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/243:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].to_series().mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(x="Date", data=cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/244:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(x="Date", data=cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/245:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(x="Date", data=cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/246:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(x="Date", y="APHV" data=cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/247:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(x="Date", y="APHV", data=cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/248:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(data=cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/249:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/250:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * list(combined.loc[["AMD"], "APHV"]).mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/251:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * list(combined.loc[["AMD"], "APHV"]) * list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/252:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * list(combined.loc[["AMD"], "APHV"]) * list((combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/253:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * list(combined.loc[["AMD"], "APHV"]) * list(combined.loc[["NVIDIA"], "APHV"])

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/254:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * list(combined.loc[["AMD"], "APHV"].dropna()) * list(combined.loc[["NVIDIA"], "APHV"].dropna())

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/255:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].dropna().tolist()

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/256:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = combined.loc[["AMD"], "APHV"].dropna().tolist()

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/257:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = float(corrcoef) * combined.loc[["AMD"], "APHV"].dropna().tolist()

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/258:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * float(combined.loc[["AMD"], "APHV"].dropna().tolist())

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/259:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = combined.loc[["AMD"], "PHV"].mul(combined.loc[["NVIDIA"], "PHV"])

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/260:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = combined.loc[["AMD"], "APHV"].mul(combined.loc[["NVIDIA"], "APHV"])

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/261:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = combined.loc[["AMD"], "APHV"].mul(combined.loc[["NVIDIA"], "APHV"], axis=0)

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/262:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = combined.loc[["AMD"], "APHV"].mul(combined.loc[["NVIDIA"], "APHV"], axis=1)

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/263:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = combined.loc[["AMD"], "APHV"].mul(combined.loc[["NVIDIA"], "APHV"], axis=0)

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/264:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/265:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/266:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
print(type(cov))
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/267:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0) * corrcoef

print(cov)
print(type(cov))
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/268:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

print(cov)
print(type(cov))
sns.lineplot(cov.loc[["AMD", "NVIDIA"]], color="gold")
plt.show()
140/269:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

cov.plot()
plt.show()
140/270:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"] * (-1)), axis=0)

cov.plot()
plt.show()
140/271:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

cov.plot()
plt.show()
140/272:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

cov = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)
140/273:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

covariance = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)
140/274:
# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", data=covariance)

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Covariance")

plt.title("AMD/NVIDIA Covariance in 5-year period")
140/275:
# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y=covariance.index.get_index_values("Date") data=covariance)

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Covariance")

plt.title("AMD/NVIDIA Covariance in 5-year period")
140/276:
# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y=covariance.index.get_index_values("Date"), data=covariance)

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Covariance")

plt.title("AMD/NVIDIA Covariance in 5-year period")
140/277:
# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y=covariance.index.get_level_values("Date"), data=covariance)

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Covariance")

plt.title("AMD/NVIDIA Covariance in 5-year period")
140/278:
# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y=covariance.values, data=covariance)

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Covariance")

plt.title("AMD/NVIDIA Covariance in 5-year period")
140/279:
# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y=covariance.values, data=covariance, color="red")

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Covariance")

plt.title("AMD/NVIDIA Covariance in 5-year period")
140/280:
corrcoef = np.corrcoef(combined.loc[["AMD"], "APHV"].dropna(), combined.loc[["NVIDIA"], "APHV"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

covariance = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)
140/281:
# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y=covariance.values, data=covariance, color="red")

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Covariance")

plt.title("AMD/NVIDIA Covariance in 5-year period")
140/282:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

covariance = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

corr = np.cov(combined.loc[["AMD"], "APHV"], combined.loc[["NVIDIA"], "APHV"])
140/283:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

covariance = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

corr = np.cov(combined.loc[["AMD"], "Discrete Return"], combined.loc[["NVIDIA"], "Discrete Return"])
covcov = corr / (combined.loc[["AMD"], "APHV"] * combined.loc[["NVIDIA"], "APHV"])
140/284:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

covariance = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

corr = np.cov(combined.loc[["AMD"], "Discrete Return"], combined.loc[["NVIDIA"], "Discrete Return"])
covcov = corr / (combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"], axis=0=)
140/285:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

covariance = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

corr = np.cov(combined.loc[["AMD"], "Discrete Return"], combined.loc[["NVIDIA"], "Discrete Return"])
covcov = corr / (combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"], axis=0))
140/286:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

covariance = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

corr = np.cov(combined.loc[["AMD"], "Discrete Return"], combined.loc[["NVIDIA"], "Discrete Return"])
covcov = corr / (combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"], axis=0)))
140/287:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

covariance = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

corr = np.cov(combined.loc[["AMD"], "Discrete Return"], combined.loc[["NVIDIA"], "Discrete Return"])
covcov = corr / (combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0))
140/288:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

covariance = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

corr = np.cov(combined.loc[["AMD"], "Discrete Return"], combined.loc[["NVIDIA"], "Discrete Return"])
print(corr)
covcov = corr / (combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0))
140/289:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

covariance = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

corr = np.cov(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())
print(corr)
covcov = corr / (combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0))
140/290:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

covariance = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)[0,1]

corr = np.cov(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())
print(corr)
covcov = corr / (combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0))
140/291:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

covariance = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

corr = np.cov(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())
print(corr)
covcov = corr / (combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0))
140/292:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

covariance = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

corr = np.cov(combined.loc[["AMD"], "APHV"].dropna(), combined.loc[["NVIDIA"], "APHV"].dropna())
print(corr)
covcov = corr / (combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0))
140/293:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

covariance = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)

corr = np.cov(combined.loc[["AMD"], "APHV"].dropna(), combined.loc[["NVIDIA"], "APHV"].dropna(), bias=True)
print(corr)
covcov = corr / (combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0))
140/294:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

covariance = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)
140/295: combined.loc[["AMD"], "APHV"].cov(combined.loc[["NVIDIA"], "APHV"])
140/296: combined.loc[["AMD", "NVIDIA"], "APHV"].cov(combined.loc[["NVIDIA"], "APHV"])
140/297: combined.loc[["AMD", "NVIDIA"], "APHV"].cov()
140/298: combined.loc[["AMD", "NVIDIA"], "APHV"].cov()
140/299: combined.loc[["AMD", "NVIDIA"].cov()
140/300: combined.loc[["AMD", "NVIDIA"]].cov()
140/301: combined.loc[["AMD"], "APHV"].cov(combined.loc[["NVIDIA"], "APHV"])
140/302: combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna())
140/303: combined.loc[["AMD"], "APHV"].values.dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna())
140/304: combined.loc[["AMD"], "APHV"].values<.cov(combined.loc[["NVIDIA"], "APHV"].dropna())
140/305: combined.loc[["AMD"], "APHV"].values.cov(combined.loc[["NVIDIA"], "APHV"].dropna())
140/306: combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna())
140/307: print(combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna()))
140/308:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/309:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("Correlation Coefficient:", corrcoef)

covariance = corrcoef * combined.loc[["AMD"], "APHV"].mul(list(combined.loc[["NVIDIA"], "APHV"]), axis=0)
140/310: print(combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna()))
140/311:
print(combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna()))

combined.loc[["AMD", "NVIDIA"], "APHV"].to_frame()
140/312:
print(combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna()))

combined.loc[["AMD", "NVIDIA"], "APHV"].dropna().to_frame()
140/313:
print(combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna()))

combined.loc[["AMD", "NVIDIA"], "APHV"].dropna().to_frame().cov()
140/314:
print(combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna()))

combined.loc[["AMD", "NVIDIA"], "APHV"].dropna().to_frame()
140/315:
print(combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna()))

combined.loc[["AMD", "NVIDIA"], "APHV"].dropna().to_frame().transpose()
140/316:
print(combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna()))

combined.loc[["AMD", "NVIDIA"], "APHV"].dropna().to_frame()
140/317:
print(combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna()))

combined.loc[["AMD", "NVIDIA"], "APHV"].dropna().to_frame().reset_index()
140/318:
print(combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna()))

matrix_df["AMD"] = combined.loc[["AMD"], "APNV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APNV"]

combined.loc[["AMD", "NVIDIA"], "APHV"].dropna().to_frame().reset_index()
140/319:
print(combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna()))

matrix_df["AMD"] = combined.loc[["AMD"], "APNV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APNV"]

matrix_df.dropna().to_frame().reset_index()
140/320:
print(combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna()))

matrix_df["AMD"] = combined.loc[["AMD"], "APNV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APNV"]

matrix_df.dropna().to_frame()
140/321:
print(combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna()))

matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/322:
print(combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna()))

matrix_df = pd.DataFrame({ "Date": combined.index.get_level_values("Date"), "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values})
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/323:
print(combined.loc[["AMD"], "APHV"].dropna().cov(combined.loc[["NVIDIA"], "APHV"].dropna()))

print(combined.index.get_level_values("Date"))
matrix_df = pd.DataFrame({ "Date": combined.index.get_level_values("Date"), "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values})
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/324:

print(combined.index.get_level_values("Date"))
matrix_df = pd.DataFrame({ "Date": combined.index.get_level_values("Date"), "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values})
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/325:

print(combined.index.get_level_values("Date", "AMD"))
matrix_df = pd.DataFrame({ "Date": combined.index.get_level_values("Date"), "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values})
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/326:

print(combined.index.get_level_values(["Date", "AMD"]))
matrix_df = pd.DataFrame({ "Date": combined.index.get_level_values("Date"), "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values})
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/327:

print(combined.index.get_level_values(["AMD"]))
matrix_df = pd.DataFrame({ "Date": combined.index.get_level_values("Date"), "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values})
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/328:

print(combined.index.get_level_values("AMD"))
matrix_df = pd.DataFrame({ "Date": combined.index.get_level_values("Date"), "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values})
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/329:

print(combined.loc[["AMD"]].index.get_level_values("AMD"))
matrix_df = pd.DataFrame({ "Date": combined.index.get_level_values("Date"), "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values})
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/330:

print(combined.loc[["AMD"]].index.get_level_values("Date"))
matrix_df = pd.DataFrame({ "Date": combined.index.get_level_values("Date"), "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values})
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/331:

matrix_df = pd.DataFrame({ "Date": combined.loc[["AMD"]].index.get_level_values("Date"), "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values})
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/332:

matrix_df = pd.DataFrame({ "Date": combined.loc[["AMD"]].index.get_level_values("Date").tolist(), "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values})
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/333:

matrix_df = pd.DataFrame({ "Date": combined.loc[["AMD"]].index.get_level_values("Date").tolist(), "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values}).set_index("Date")
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/334:
print(combined.loc[["AMD"]].index.get_level_values("Date").tolist())
matrix_df = pd.DataFrame({ "Date": [], "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values}).set_index("Date")
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/335:
print(combined.loc[["AMD"]].index.get_level_values("Date")
matrix_df = pd.DataFrame({ "Date": [], "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values}).set_index("Date")
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/336:
print(combined.loc[["AMD"]].index.get_level_values("Date"))
matrix_df = pd.DataFrame({ "Date": [], "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values}).set_index("Date")
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/337:
print(combined.loc[["AMD"]].index.get_level_values("Date"))
matrix_df = pd.DataFrame({ "Date": combined.loc[["AMD"]].index.get_level_values("Date"), "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values}).set_index("Date")
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/338:
print(combined.loc[["AMD"]].index.get_level_values("Date"))
matrix_df = pd.DataFrame({ "Date": combined.loc[["AMD"]].index.get_level_values("Date"), "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values})
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/339:
print(combined.loc[["AMD"]].index.get_level_values("Date"))
matrix_df = pd.DataFrame({ "Date": combined.loc[["AMD"]].index.get_level_values("Date"), "AMD": combined.loc[["AMD"], "APHV"].values, "NVIDIA": combined.loc[["NVIDIA"], "APHV"].values}).set_index(["Date"])
matrix_df["AMD"] = combined.loc[["AMD"], "APHV"]
matrix_df["NVIDIA"] = combined.loc[["AMD"], "APHV"]

matrix_df.dropna().to_frame()
140/340: np.corrcoef(combined.loc[["AMD"], "APHV"].dropna(), combined.loc[["NVIDIA"], "APHV"].dropna())[0,1]
140/341: np.corrcoef(combined.loc[["AMD"], "Close"].dropna(), combined.loc[["NVIDIA"], "Close"].dropna())[0,1]
140/342: np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
140/343:
np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna() * -1)[0,1]
140/344: np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
140/345:
np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]

np.cov(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())
140/346:
np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]

np.cov(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna()) **250
140/347:
np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]

np.cov(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())*250
140/348:
np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]

np.cov(combined.loc[["AMD"], "Discrete Return"].dropna()*250, combined.loc[["NVIDIA"], "Discrete Return"].dropna()*250)
140/349:
np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]

np.cov(combined.loc[["AMD"], "Discrete Return"].dropna()*250, combined.loc[["NVIDIA"], "Discrete Return"].dropna()*-250)
140/350:
np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]

np.cov(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())
140/351:
np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]

np.cov(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())*annual_trading_days
140/352:
np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]

np.cov(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())
140/353:
np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]

np.corr(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())
140/354:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("The correlation coefficient of AMD and NVIDIA is:",corrcoef)
140/355:
combined.loc[["AMD"], "Excess Return"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Date", y = "Excess Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return"].groupby("Stock").describe())
140/356:
sp500["Discrete Return"] = sp500["Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
140/357:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
140/358:
sp500["Discrete Return"] = sp500["Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].head());
140/359:
sp500["Discrete Return"] = sp500["Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
140/360:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
140/361: print(combined.head())
140/362:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
140/363:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
140/364: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
140/365:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
140/366:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
140/367:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
140/368:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
140/369:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
140/370:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
140/371:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
140/372:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
140/373:
def parkinson(data, window, annual_trading_days = 252, annualized= True):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    def annualize(v):
        return v * (annual_trading_days/window)

    if annualized:
        return np.sqrt(annualize(variance))
    else: return np.sqrt(variance)
140/374:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
140/375:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("The correlation coefficient of AMD and NVIDIA is:",corrcoef)
140/376:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date")

# review dataframe structure
sp500.head()
140/377:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
140/378:
sp500["Discrete Return"] = sp500["Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
140/379:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
140/380:
amd_mean_excess_return = combined.loc[["AMD"], "Excess Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Excess Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Excess Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Excess Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
140/381:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date").sort_index(ascending=True)

# review dataframe structure
sp500.head()
140/382:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
140/383:
sp500["Discrete Return"] = sp500["Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
140/384:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"], axis=0, level=0, fill_value=0)

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
140/385:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
140/386:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].describe())
140/387:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
140/388:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"] * -1)
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
140/389:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"] * -1)
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"] -1)

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
140/390:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"] * -1)
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"] * -1)

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
140/391:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
140/392:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
140/393:
amd_mean_excess_return = combined.loc[["AMD"], "Excess Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Excess Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Excess Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Excess Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
140/394:
amd_mean_excess_return = combined.loc[["AMD"], "Excess Return SP500"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Excess Return SP500"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Excess Return SP500"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Excess Return SP500"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
140/395:
amd_mean_excess_return = combined.loc[["AMD"], "Discrete Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Discrete Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Discrete Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Discrete Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
140/396: ## Value At Risk
140/397:
breakpoint()
## Value At Risk
140/398: ## Value At Risk
140/399:
The historical volatility can give us a broad sense of the potential fluctuations and the implied gain/loss on our stock investment. As an investor, the informed choice of a moderately volatile stock can return a fair profit. Simultaneously, volatility is a direct threat for loss. A rapid loss takes time to recover from, implied that the stock's value recovers at all, and so to ensure a predictable value of our assets, investors should define a maximum for their loss tolerance. For our friend, the maximum loss tolerance is at 20% of her investment.

In real life practice, a maximum loss of 20% cannot be ensured. Stocks are differently volatile over the course of time and can depreciate rapidly due to a variety of events. In a consideration of historical development of a stock as a benchmark for future performance, we can analyze the past data and derive a _likelyhood_ for the stock's risk for value depreciation to exceed our investment loss threshold. What we measure is the so called _tail risk_ of a stock - and a good method to quantify it is to estimate the historical _Value at Risk_ (VaR).

### Historical Value at Risk
Value at Risk is a metric that describes if losses will not exceed a certain level in a provided confidence level. Value at Risk results are often accompanied with a more human-friendly written statement, which we will also practice further ahead. 

An example for Value at Risk:
VaR(99) = -5.7%
_99% certainty that **losses won't exceed** -5.7% in a given day based on historical data._
140/400: combined.loc[["AMD"], "VaR95"] = np.percentile(combined[["AMD"], "Discrete Return"], 100-95)
140/401: combined.loc[["AMD"], "VaR95"] = np.percentile(combined.loc[["AMD"], "Discrete Return"], 100-95)
140/402:
combined.loc[["AMD"], "VaR95"] = np.percentile(combined.loc[["AMD"], "Discrete Return"], 100-95)
print(combined.loc[["AMD"], "VaR95"])
140/403:
combined.loc[["AMD"], "VaR95"] = np.percentile(combined.loc[["AMD"], "Discrete Return"], 5)
print(combined.loc[["AMD"], "VaR95"])
140/404:
combined.loc[["AMD"], "VaR95"] = np.percentile(combined.loc[["AMD"], "Discrete Return"].dropna(), 5)
print(combined.loc[["AMD"], "VaR95"])
140/405:
combined.loc[["AMD"], "VaR95"] = np.percentile(combined.loc[["AMD"], "Discrete Return"].dropna(), 5)
print(combined.loc[["AMD"], "VaR95"])
140/406:
combined.loc[["AMD"], "VaR95"] = np.percentile(combined.loc[["AMD"], "Discrete Return"].dropna(), 1 - .95)
print(combined.loc[["AMD"], "VaR95"])
140/407:
combined.loc[["AMD"], "VaR95"] = np.percentile(combined.loc[["AMD"], "Discrete Return"].dropna(), (100 - 95))
print(combined.loc[["AMD"], "VaR95"])
140/408:
confidence_level = 95
amd_HVaR95 = np.percentile(combined.loc[["AMD"], "Discrete Return"].dropna(), (100 - confidence_level))
nvidia_HVaR95  = np.percentile(combined.loc[["NVIDIA"], "Discrete Return"].dropna(), (100 - confidence_level))

print("AMD Value at Risk: " + combined.loc[["AMD"], "HVaR95"])
140/409:
confidence_level = 95
amd_HVaR95 = np.percentile(combined.loc[["AMD"], "Discrete Return"].dropna(), (100 - confidence_level))
nvidia_HVaR95  = np.percentile(combined.loc[["NVIDIA"], "Discrete Return"].dropna(), (100 - confidence_level))

print("AMD Value at Risk: " + amd_HVaR95)
140/410:
confidence_level = 95
amd_HVaR95 = np.percentile(combined.loc[["AMD"], "Discrete Return"].dropna(), (100 - confidence_level))
nvidia_HVaR95  = np.percentile(combined.loc[["NVIDIA"], "Discrete Return"].dropna(), (100 - confidence_level))

print("AMD Value at Risk: " + str(amd_HVaR95))
140/411:
confidence_level = 95
amd_HVaR95 = np.percentile(combined.loc[["AMD"], "Discrete Return"].dropna(), (100 - confidence_level))
nvidia_HVaR95  = np.percentile(combined.loc[["NVIDIA"], "Discrete Return"].dropna(), (100 - confidence_level))

print("AMD Value at Risk: " + str(np.round(100 * amd_HVaR95, 2)))
140/412:
confidence_level = 95
amd_HVaR95 = np.percentile(combined.loc[["AMD"], "Discrete Return"].dropna(), (100 - confidence_level))
nvidia_HVaR95  = np.percentile(combined.loc[["NVIDIA"], "Discrete Return"].dropna(), (100 - confidence_level))

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed str(np.round(100 * amd_HVaR95, 2)))% in one day based on historical data.")
140/413:
confidence_level = 95
amd_HVaR95 = np.percentile(combined.loc[["AMD"], "Discrete Return"].dropna(), (100 - confidence_level))
nvidia_HVaR95  = np.percentile(combined.loc[["NVIDIA"], "Discrete Return"].dropna(), (100 - confidence_level))

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2))) + "% in one day based on historical data.")
140/414:
confidence_level = 95
amd_HVaR95 = np.percentile(combined.loc[["AMD"], "Discrete Return"].dropna(), (100 - confidence_level))
nvidia_HVaR95  = np.percentile(combined.loc[["NVIDIA"], "Discrete Return"].dropna(), (100 - confidence_level))

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
140/415:
confidence_level = 95
amd_HVaR95 = np.percentile(combined.loc[["AMD"], "Discrete Return"].dropna(), (100 - confidence_level))
nvidia_HVaR95  = np.percentile(combined.loc[["NVIDIA"], "Discrete Return"].dropna(), (100 - confidence_level))

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
140/416:
confidence_level = 95
amd_HVaR95 = np.percentile(combined.loc[["AMD"], "Discrete Return"].dropna(), (100 - confidence_level))
nvidia_HVaR95  = np.percentile(combined.loc[["NVIDIA"], "Discrete Return"].dropna(), (100 - confidence_level))

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
140/417:
confidence_level = 99
amd_HVaR99 = np.percentile(combined.loc[["AMD"], "Discrete Return"].dropna(), (100 - confidence_level))
nvidia_HVaR99  = np.percentile(combined.loc[["NVIDIA"], "Discrete Return"].dropna(), (100 - confidence_level))

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR99, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR99, 2)) + "% in one day based on historical data.")
140/418:
confidence_level = 99.9
amd_HVaR999 = np.percentile(combined.loc[["AMD"], "Discrete Return"].dropna(), (100 - confidence_level))
nvidia_HVaR999  = np.percentile(combined.loc[["NVIDIA"], "Discrete Return"].dropna(), (100 - confidence_level))

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
140/419:
confidence_level = 99.9
amd_HVaR999 = np.percentile(combined.loc[["AMD"], "Discrete Return"].dropna(), (100 - confidence_level))
nvidia_HVaR999  = np.percentile(combined.loc[["NVIDIA"], "Discrete Return"].dropna(), (100 - confidence_level))

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
140/420:
def VaR(data, ci):
    return np.percentile(data.dropna(), (100 - ci))

confidence_level = 95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], 95)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], 95)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
140/421:
def VaR(data, ci):
    return np.percentile(data.dropna(), (100 - ci))
140/422:

confidence_level = 99.9
amd_HVaR999 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR999  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
140/423:
confidence_level = 99
amd_HVaR99 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR959 = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR99, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR99, 2)) + "% in one day based on historical data.")
140/424:

confidence_level = 95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
140/425: combined.loc[["AMD", "NVIDIA"], "Discrete Return"].plot(hue="Stock")
140/426: sns.histplot(x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]])
140/427: sns.histplot(x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock")
140/428:
fig, ax = plt.subplots(figsize=(12,16))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock")

plt.show()
140/429:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock")

plt.show()
140/430:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock", stat="probability")

plt.show()
140/431:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))

plt.show()
140/432:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.6, label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))

plt.show()
140/433:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.6, label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))

plt.show()
140/434:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.6, label="AMD VaR 95%")

plt.show()
140/435:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.6, label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))

plt.legend(ncol=2)

plt.show()
140/436:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.6, label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))

plt.legend(ncol=0)

plt.show()
140/437:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.6, label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))

plt.legend(ncol=1)

plt.show()
140/438:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.6, label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))

plt.legend()

plt.show()
140/439:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.6, label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))

plt.show()
140/440:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.6, label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.6, label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=0.6, label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))



plt.show()
140/441:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.6, label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=0.10, label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))



plt.show()
140/442:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.4, label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.7, label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))



plt.show()
140/443:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.4, label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.7, label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.4, label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.7, label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia__HVaR999))



plt.show()
140/444:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.4, label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.7, label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.4, label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.7, label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))



plt.show()
140/445:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.4, label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.7, label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.4, label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.7, label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))



plt.show()
140/446:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0.05], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.4, label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.7, label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.4, label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.7, label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))



plt.show()
140/447:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < combined.loc[["AMD", "NVIDIA"], "Discrete Return"].std()], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.4, label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.7, label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.4, label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.7, label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))



plt.show()
140/448:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.4, label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.7, label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.4, label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.7, label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))



plt.show()
140/449:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", stat="probability")

plt.axvline(x=amd_AHVaR95, color="blue", alpha=0.4, label="AMD VaR 95%: {0:.2f}%".format(amd_AHVaR95))
plt.axvline(x=amd_AHVaR99, color="blue", alpha=0.7, label="AMD VaR 99%: {0:.2f}%".format(amd_AHVaR99))
plt.axvline(x=amd_AHVaR999, color="blue", alpha=1.0, label="AMD VaR 99.9%: {0:.2f}%".format(amd_AHVaR999))

plt.axvline(x=nvidia_AHVaR95, color="orange", alpha=0.4, label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_AHVaR95))
plt.axvline(x=nvidia_AHVaR99, color="orange", alpha=0.7, label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_AHVaR99))
plt.axvline(x=nvidia_AHVaR999, color="orange", alpha=1.0, label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_AHVaR999))


plt.show()
140/450:

confidence_level = 95
amd_AHVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(annual_trading_days)
nvidia_AHVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(annual_trading_days)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_AHVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_AHVaR95, 2)) + "% in one day based on historical data.")
140/451:

confidence_level = 95
amd_AHVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(5)
nvidia_AHVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(5)
print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_AHVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_AHVaR95, 2)) + "% in one day based on historical data.")
140/452:

confidence_level = 95
amd_AHVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(5)
nvidia_AHVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(5)
print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_AHVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_AHVaR95, 2)) + "% in one day based on historical data.")
140/453:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.4, linestyle=(0, (5, 10)) label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.7, label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.4, label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.7, label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))



plt.show()
140/454:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.4, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.7, label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.4, label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.7, label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))



plt.show()
140/455:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.4, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.7, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.4, label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.7, label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))



plt.show()
140/456:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.4, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.7, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.4, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.7, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))



plt.show()
140/457:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.7, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.7, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))



plt.show()
140/458:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))



plt.show()
140/459:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", stat="probability")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
140/460:

confidence_level = 99.9
amd_HVaR999 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR999  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
140/461:
confidence_level = 99
amd_HVaR99 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR959 = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR99, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR99, 2)) + "% in one day based on historical data.")
140/462:

confidence_level = 95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
140/463: Great! In simplified words, the probability to lose more than 4.3~5.2% of our investment value in one day is lower than five percent, with NVIDIA offering the better chance for less loss. A 95% confidence level implies a scenario of 5% of worse cases. As humans, especially with our monetary capital, we would like to be extra safe and eliminate as much as risk as possible when making an investment decision. Therefore, let's look at the 99% and 99.9% Value at Risk, too!
140/464:

confidence_level = 95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
140/465: Great! In simplified words, the probability to lose more than 4.3~5.2% of our investment value in one day is lower than five percent, with NVIDIA offering the better chance for less loss. A 95% confidence level implies a scenario of 5% of worse cases. As humans, especially with our monetary capital, we would like to be extra safe and eliminate as much as risk as possible when making an investment decision. Therefore, let's look at the 99% and 99.9% Value at Risk, too!
140/466:
confidence_level = 99
amd_HVaR99 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR959 = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR99, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR99, 2)) + "% in one day based on historical data.")
140/467:
These look like favorable insights for our analysis! we can say with a 99.9% certainty that neither AMD (-15%) nor NVIDIA (-17%) exceed our maximal loss threshold of 20% in one single day. 

An interesting observation is that for the 95% and 99% confidence level, NVIDIA has been favorable with a lower loss rate. For our 99.9% confidence level, AMD appears to be more favorable due to it's lower loss rate of -15%. This indicates that for NVIDIA, the 1st percentile features more or stronger outliers than AMD's 1st percentile.
142/1:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
142/2: print(combined.head())
142/3:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
142/4:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
142/5: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
142/6:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
142/7:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
142/8:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
142/9:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
142/10:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
142/11:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
142/12:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
142/13:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
142/14:
def parkinson(data, window, annual_trading_days = 252, annualized= True):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    def annualize(v):
        return v * (annual_trading_days/window)

    if annualized:
        return np.sqrt(annualize(variance))
    else: return np.sqrt(variance)
142/15:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
142/16:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("The correlation coefficient of AMD and NVIDIA is:",corrcoef)
142/17:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date").sort_index(ascending=True)

# review dataframe structure
sp500.head()
142/18:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
142/19:
sp500["Discrete Return"] = sp500["Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
142/20:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
142/21:
amd_mean_excess_return = combined.loc[["AMD"], "Discrete Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Discrete Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Discrete Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Discrete Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
142/22:

confidence_level = 95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
142/23:
def VaR(data, confidence):
    return np.percentile(data.dropna(), (1 - confidence/100))
142/24:

confidence_level = 95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
142/25:
def VaR(data, confidence):
    return np.percentile(data.dropna(), (100 - confidence))
142/26:

confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
142/27:
def VaR(data, confidence):
    return np.percentile(data.dropna(), (100 - confidence*100))
142/28:
def VaR(data, confidence):
    return np.percentile(data.dropna(), (100 - confidence*100))
142/29:

confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
142/30:
confidence_level = .99
amd_HVaR99 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR959 = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR99, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR99, 2)) + "% in one day based on historical data.")
142/31:
confidence_level = .99
amd_HVaR99 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR99 = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR99, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR99, 2)) + "% in one day based on historical data.")
142/32:

confidence_level = .99.9
amd_HVaR999 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR999  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
142/33:

confidence_level = .999
amd_HVaR999 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR999  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
142/34:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", stat="probability", element="step")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/35:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", stat="probability", kde=True, kde_kws=(multiple=fill))

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/36:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", stat="probability", kde=True, kde_kws={"multiple": "fill"})

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/37:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", stat="probability", kde=True, kde_kws={"multiple": ("fill")})

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/38:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", stat="probability", kde=True, kde_kws={"multiple": ("fill")})

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/39:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock",  kde=True, kde_kws={"multiple": ("fill")})

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/40:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/41:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", multiple="fill")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/42:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", multiple="fill")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/43:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/44:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", multiple="fill")

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/45:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", multiple="fill")
ax.set(ylimit=20)

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/46:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", multiple="fill")
ax.set_ylim(20)

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/47:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", multiple="fill")
ax.set_ylim(10)

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/48:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")
ax.set_ylim()

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/49:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/50:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < amd_HVaR95], color="orange", alpha=0.5 hue="Stock", fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/51:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"][combined.loc[["AMD"], "Discrete Return"] < amd_HVaR95], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/52:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][combined.loc[["AMD"], "Discrete Return"] < amd_HVaR95], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/53:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/54:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95 & combined.loc[["AMD"], "Discrete Return"] < 0], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/55:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95 && combined.loc[["AMD"], "Discrete Return"] < 0], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/56:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95 AND combined.loc[["AMD"], "Discrete Return"] < 0], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/57:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95 and combined.loc[["AMD"], "Discrete Return"] < 0], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/58:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) and (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/59:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/60:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/61:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.distplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/62:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/63:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/64:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/65:
fig, ax = plt.subplots(figsize=(12,8))

sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/66:
fig, ax = plt.subplots(figsize=(12,8))

sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/67:
fig, ax = plt.subplots(figsize=(12,8))

sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
ax.set_ylim()

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/68:
fig, ax = plt.subplots(figsize=(12,8))

sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")
ax.set_ylim()

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/69:
fig, ax = plt.subplots(figsize=(12,8))

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")
ax.set_ylim()

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/70:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")
ax.set_ylim()

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/71:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][(combined.loc[["AMD", "NVIDIA"], "Discrete Return"], hue="Stock")
ax.fill_between()
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/72:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return" > 0], hue="Stock")
ax.fill_between()
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/73:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] > 0], hue="Stock")
ax.fill_between()
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/74:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] > 0], hue="Stock")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/75:
fig, ax = plt.subplots(figsize=(12,8))

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/76:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = amd_data["Discrete Return" < 0]
x, y = x[mask_95], y[mask_95]
ax.fill_between(x, y1=y, alpha=0.5, facecolor="orange")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/77:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = x< 0
x, y = x[mask_95], y[mask_95]
ax.fill_between(x, y1=y, alpha=0.5, facecolor="orange")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/78:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = x< 0
x, y = x[mask_95], y[mask_95]
ax.fill_between(x, y1=y, alpha=0.5, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/79:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR95)
x, y = x[mask_95], y[mask_95]
ax.fill_between(x, y1=y, alpha=0.5, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/80:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR95)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR99)
mask_999 = (x < 0) & (x > amd_HVaR999)
x95, y95 = x[mask_95], y[mask_95]
x99, y99 = x[mask_99], y[mask_99]

ax.fill_between(x95, y1=y95, alpha=0.5, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/81:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR95)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR99)
mask_999 = (x < 0) & (x > amd_HVaR999)
x95, y95 = x[mask_95], y[mask_95]
x99, y99 = x[mask_99], y[mask_99]

ax.fill_between(x95, y1=y95, alpha=0.5, facecolor="blue")
ax.fill_between(x99, y1=y99, alpha=0.8, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/82:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR95)
mask_99 = (x =< amd_HVaR95) & (x > amd_HVaR99)
mask_999 = (x < 0) & (x > amd_HVaR999)
x95, y95 = x[mask_95], y[mask_95]
x99, y99 = x[mask_99], y[mask_99]

ax.fill_between(x95, y1=y95, alpha=0.5, facecolor="blue")
ax.fill_between(x99, y1=y99, alpha=0.8, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/83:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR95)
mask_99 = (x <= amd_HVaR95) & (x > amd_HVaR99)
mask_999 = (x < 0) & (x > amd_HVaR999)
x95, y95 = x[mask_95], y[mask_95]
x99, y99 = x[mask_99], y[mask_99]

ax.fill_between(x95, y1=y95, alpha=0.5, facecolor="blue")
ax.fill_between(x99, y1=y99, alpha=0.8, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/84:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR95)
mask_99 = (x <= amd_HVaR95) & (x >= amd_HVaR99)
mask_999 = (x < 0) & (x > amd_HVaR999)
x95, y95 = x[mask_95], y[mask_95]
x99, y99 = x[mask_99], y[mask_99]

ax.fill_between(x95, y1=y95, alpha=0.5, facecolor="blue")
ax.fill_between(x99, y1=y99, alpha=0.8, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/85:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x >= amd_HVaR95)
mask_99 = (x <= amd_HVaR95) & (x >= amd_HVaR99)
mask_999 = (x < 0) & (x > amd_HVaR999)
x95, y95 = x[mask_95], y[mask_95]
x99, y99 = x[mask_99], y[mask_99]

ax.fill_between(x95, y1=y95, alpha=0.5, facecolor="blue")
ax.fill_between(x99, y1=y99, alpha=0.8, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/86:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x >= amd_HVaR95)
mask_99 = (x <= amd_HVaR95) & (x > amd_HVaR99)
mask_999 = (x < 0) & (x > amd_HVaR999)
x95, y95 = x[mask_95], y[mask_95]
x99, y99 = x[mask_99], y[mask_99]

ax.fill_between(x95, y1=y95, alpha=0.5, facecolor="blue")
ax.fill_between(x99, y1=y99, alpha=0.8, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/87:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0)
mask_99 = (x <= amd_HVaR95) & (x > amd_HVaR99)
mask_999 = (x < 0) & (x > amd_HVaR999)
x95, y95 = x[mask_95], y[mask_95]
x99, y99 = x[mask_99], y[mask_99]

ax.fill_between(x95, y1=y95, alpha=0.5, facecolor="blue")
ax.fill_between(x99, y1=y99, alpha=0.8, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/88:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0)
mask_99 = (x > amd_HVaR99)
mask_999 = (x < 0) & (x > amd_HVaR999)
x95, y95 = x[mask_95], y[mask_95]
x99, y99 = x[mask_99], y[mask_99]

ax.fill_between(x95, y1=y95, alpha=0.5, facecolor="blue")
ax.fill_between(x99, y1=y99, alpha=0.8, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/89:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0)
mask_99 = (x < amd_HVaR95)
mask_999 = (x < 0) & (x > amd_HVaR999)
x95, y95 = x[mask_95], y[mask_95]
x99, y99 = x[mask_99], y[mask_99]

ax.fill_between(x95, y1=y95, alpha=0.5, facecolor="blue")
ax.fill_between(x99, y1=y99, alpha=0.8, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/90:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0)
mask_99 = (x < amd_HVaR95)
mask_999 = (x < amd_HVaR99)
ax.fill_between(x[mask_95], y1=y[mask_95], alpha=0.5, facecolor="blue")
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=0.8, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/91:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0)
mask_99 = (x < amd_HVaR95)
mask_999 = (x < amd_HVaR99)
ax.fill_between(x[mask_95], y1=y[mask_95], alpha=0.5, facecolor="blue")
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=1, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/92:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0)
mask_99 = (x < amd_HVaR95)
mask_999 = (x < amd_HVaR99) & (x >= amd_HVaR999)
ax.fill_between(x[mask_95], y1=y[mask_95], alpha=0.5, facecolor="blue")
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=1, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/93:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0)
mask_99 = (x < amd_HVaR95)
mask_999 = (x < amd_HVaR99) & (x <= amd_HVaR999)
ax.fill_between(x[mask_95], y1=y[mask_95], alpha=0.5, facecolor="blue")
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=1, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/94:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0)
mask_99 = (x < amd_HVaR95) & (x <= amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x <= amd_HVaR999)
ax.fill_between(x[mask_95], y1=y[mask_95], alpha=0.5, facecolor="blue")
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=1, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/95:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x <= amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x <= amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x <= amd_HVaR999)
ax.fill_between(x[mask_95], y1=y[mask_95], alpha=0.5, facecolor="blue")
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=1, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/96:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x[mask_95], y1=y[mask_95], alpha=0.5, facecolor="blue")
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=1, facecolor="blue")
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/97:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x[mask_95], y1=y[mask_95], alpha=0.5, facecolor="blue")
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=0.8, facecolor="blue")
ax.fill_between(x[mask_999], y1=y[mask_999], alpha=1, facecolor="blue")

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/98:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x[mask_95], y1=y[mask_95], alpha=0.3, facecolor="blue")
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=0.5, facecolor="blue")
ax.fill_between(x[mask_999], y1=y[mask_999], alpha=1, facecolor="blue")

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/99:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x[mask_95], y1=y[mask_95], alpha=0.3, facecolor="blue")
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=0.5, facecolor="blue")
ax.fill_betweenx(x[mask_999], y1=y[mask_999], alpha=1, facecolor="blue")

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/100:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x[mask_95], y1=[mask_95], alpha=0.3, facecolor="blue")
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=0.5, facecolor="blue")
ax.fill_betweenx(x[mask_999][0], x1=x[mask_999][-1:], alpha=1, facecolor="blue")

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/101:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x[mask_95], y1=[mask_95], alpha=0.3, facecolor="blue")
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=0.5, facecolor="blue")
ax.fill_betweenx(x[mask_999][0], x1=x[mask_999][:-1], alpha=1, facecolor="blue")

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/102:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x[mask_95], y1=y[mask_95], alpha=0.3, facecolor="blue")
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=0.5, facecolor="blue")
ax.fill_betweenx(x[mask_999][0], x1=x[mask_999][:-1], alpha=1, facecolor="blue")

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/103:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x[mask_95], y1=y[mask_95], alpha=0.3, facecolor="blue")
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=0.5, facecolor="blue")
ax.fill_between(x[mask_999], y1=[mask_999], alpha=1, facecolor="blue")

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/104:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x[mask_95], y1=y[mask_95], alpha=0.3, facecolor="blue")
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=0.5, facecolor="blue")
ax.fill_between(x[mask_999], y1=y[mask_999], alpha=1, facecolor="blue")

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/105:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x[mask_95], y1=y[mask_95], alpha=0.3, facecolor="blue", interpolate=True)
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=0.5, facecolor="blue")
ax.fill_between(x[mask_999], y1=y[mask_999], alpha=1, facecolor="blue")

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/106:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x[mask_95], y1=y[mask_95], alpha=0.3, facecolor="blue", interpolate=True)
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=0.5, facecolor="blue", interpolate=True)
ax.fill_between(x[mask_999], y1=y[mask_999], alpha=1, facecolor="blue")

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/107:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x[mask_95], y1=y[mask_95], alpha=0.3, facecolor="blue", interpolate=True)
ax.fill_between(x[mask_99], y1=y[mask_99], alpha=0.5, facecolor="blue", interpolate=True)
ax.fill_between(x[mask_999], y1=y[mask_999], alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/108:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95 alpha=0.3, facecolor="blue", interpolate=True)
ax.fill_between(x, y1=y, alpha=0.5, facecolor="blue", interpolate=True)
ax.fill_between(x[mask_999], y1=y[mask_999], alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/109:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=True)
ax.fill_between(x, y1=y, alpha=0.5, facecolor="blue", interpolate=True)
ax.fill_between(x[mask_999], y1=y[mask_999], alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/110:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=True)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=True)
ax.fill_between(x[mask_999], y1=y[mask_999], alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/111:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=True)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=True)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/112:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=True)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=True)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/113:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=True)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=True)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/114:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=True)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/115:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/116:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=False, step="pre")
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/117:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=False, step="post")
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/118:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=False, step="mid")
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/119:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x > amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/120:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x >= amd_HVaR999)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/121:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x >= amd_HVaR95)
mask_99 = (x < amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/122:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x >= amd_HVaR95)
mask_99 = (x =< amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/123:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x >= amd_HVaR95)
mask_99 = (x <= amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/124:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x >= amd_HVaR95)
mask_99 = (x <= amd_HVaR95 - 1) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/125:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x >= amd_HVaR95)
mask_99 = (x <= amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/126:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x >= amd_HVaR95)
mask_99 = (x <= amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=False, step="pre")
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/127:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x >= amd_HVaR95)
mask_99 = (x <= amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=True)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/128:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x >= amd_HVaR95)
mask_99 = (x <= amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=True)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

mask_95 = (x < 0) & (x >= nvidia_HVaR95)
mask_99 = (x <= nvidia_HVaR95) & (x > nvidia_HVaR999)
mask_999 = (x < nvidia_HVaR99) & (x > nvidia_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="orange", interpolate=False)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="orange", interpolate=True)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="orange", interpolate=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/129:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock")

line = ax.get_lines()[-1]
x, y = line.get_data()
mask_95 = (x < 0) & (x >= amd_HVaR95)
mask_99 = (x <= amd_HVaR95) & (x > amd_HVaR999)
mask_999 = (x < amd_HVaR99) & (x > amd_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="blue", interpolate=False)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="blue", interpolate=True)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="blue", interpolate=True)

line = ax.get_lines()[-2]
x, y = line.get_data()
mask_95 = (x < 0) & (x >= nvidia_HVaR95)
mask_99 = (x <= nvidia_HVaR95) & (x > nvidia_HVaR999)
mask_999 = (x < nvidia_HVaR99) & (x > nvidia_HVaR999)
ax.fill_between(x, y1=y, where=mask_95, alpha=0.3, facecolor="orange", interpolate=False)
ax.fill_between(x, y1=y, where=mask_99, alpha=0.5, facecolor="orange", interpolate=True)
ax.fill_between(x, y1=y, where=mask_999, alpha=1, facecolor="orange", interpolate=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/130:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)


plt.axvline(x=amd_HVaR95, color="blue", alpha=0.5, linestyle=(0, (5, 10)), label="AMD VaR 95%: {0:.2f}%".format(amd_HVaR95))
plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR95, color="orange", alpha=0.5, linestyle=(0, (5, 10)), label="NVIDIA VaR 95%: {0:.2f}%".format(nvidia_HVaR95))
plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/131:
fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

plt.show()
142/132:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((0, 0), 10, 10))

plt.show()
142/133:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((0, 0), amd_HVaR999 - amd_HVaR99, 10))

plt.show()
142/134:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR999 - amd_HVaR99, 10))

plt.show()
142/135:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR999 + amd_HVaR99, 10))

plt.show()
142/136:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)

#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, 10))

plt.show()
142/137:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

y_lim = 20

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, y_lim))

ax.set_ylim(y_lim)
plt.show()
142/138:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

y_lim = 20

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, y_lim))

ax.set_ylim((0, y_lim))
plt.show()
142/139:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

y_lim = 18

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, y_lim))

ax.set_ylim((0, y_lim))
plt.show()
142/140:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

y_lim = 18

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, y_lim, alpha=0.5))

ax.set_ylim((0, y_lim))
plt.show()
142/141:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

y_lim = 18

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, y_lim, alpha=0.5))
ax.add_patch(patches.Rectangle((nvidia_HVaR999, 0), nvidia_HVaR99 - nvidia_HVaR999, y_lim, alpha=0.5))

ax.set_ylim((0, y_lim))
plt.show()
142/142:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

y_lim = 18

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, y_lim, alpha=0.5, color="blue"))
ax.add_patch(patches.Rectangle((nvidia_HVaR999, 0), nvidia_HVaR99 - nvidia_HVaR999, y_lim, alpha=0.5, color="orange"))

ax.set_ylim((0, y_lim))
plt.show()
142/143:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

y_lim = 15

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, y_lim, alpha=0.5, color="blue"))
ax.add_patch(patches.Rectangle((nvidia_HVaR999, 0), nvidia_HVaR99 - nvidia_HVaR999, y_lim, alpha=0.5, color="orange"))

ax.set_ylim((0, y_lim))
plt.show()
142/144:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

y_lim = 10

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, y_lim, alpha=0.5, color="blue"))
ax.add_patch(patches.Rectangle((nvidia_HVaR999, 0), nvidia_HVaR99 - nvidia_HVaR999, y_lim, alpha=0.5, color="orange"))

ax.set_ylim((0, y_lim))
plt.show()
142/145:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

y_lim = 8

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, y_lim, alpha=0.5, color="blue"))
ax.add_patch(patches.Rectangle((nvidia_HVaR999, 0), nvidia_HVaR99 - nvidia_HVaR999, y_lim, alpha=0.5, color="orange"))

ax.set_ylim((0, y_lim))
plt.show()
142/146:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

y_lim = 8

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, y_lim, alpha=0.5, color="blue"))
ax.add_patch(patches.Rectangle((nvidia_HVaR999, 0), nvidia_HVaR99 - nvidia_HVaR999, y_lim, alpha=0.5, color="orange"))

ax.set_ylim((0, y_lim))
ax.set_label(x="Negative Return")

plt.show()
142/147:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

y_lim = 8

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, y_lim, alpha=0.5, color="blue"))
ax.add_patch(patches.Rectangle((nvidia_HVaR999, 0), nvidia_HVaR99 - nvidia_HVaR999, y_lim, alpha=0.5, color="orange"))

ax.set_ylim((0, y_lim))
ax.set(xlabel="Negative Return")

plt.show()
142/148:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

y_lim = 8

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.histplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, y_lim, alpha=0.5, color="blue"))
ax.add_patch(patches.Rectangle((nvidia_HVaR999, 0), nvidia_HVaR99 - nvidia_HVaR999, y_lim, alpha=0.5, color="orange"))

ax.set_ylim((0, y_lim))
ax.set(xlabel="Negative Return")

plt.show()
142/149:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

y_lim = 8

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 5)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, y_lim, alpha=0.5, color="blue"))
ax.add_patch(patches.Rectangle((nvidia_HVaR999, 0), nvidia_HVaR99 - nvidia_HVaR999, y_lim, alpha=0.5, color="orange"))

ax.set_ylim((0, y_lim))
ax.set(xlabel="Negative Return")

plt.show()
142/150:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

y_lim = 8

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 8)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, y_lim, alpha=0.5, color="blue"))
ax.add_patch(patches.Rectangle((nvidia_HVaR999, 0), nvidia_HVaR99 - nvidia_HVaR999, y_lim, alpha=0.5, color="orange"))

ax.set_ylim((0, y_lim))
ax.set(xlabel="Negative Return")

plt.show()
142/151:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

y_lim = 8

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 10)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 5)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, y_lim, alpha=0.5, color="blue"))
ax.add_patch(patches.Rectangle((nvidia_HVaR999, 0), nvidia_HVaR99 - nvidia_HVaR999, y_lim, alpha=0.5, color="orange"))

ax.set_ylim((0, y_lim))
ax.set(xlabel="Negative Return")

plt.show()
142/152:
import matplotlib.patches as patches

fig, ax = plt.subplots(figsize=(12,8))

y_lim = 8

amd_data = combined.loc[["AMD"], "Discrete Return"]

sns.kdeplot(ax=ax, x="Discrete Return", data=combined.loc[["AMD", "NVIDIA"]][combined.loc[["AMD", "NVIDIA"], "Discrete Return"] < 0], hue="Stock", fill=True)
#sns.displot(ax=ax, x="Discrete Return", data=combined.loc[["AMD"]][(combined.loc[["AMD"], "Discrete Return"] >= amd_HVaR95) & (combined.loc[["AMD"], "Discrete Return"] < 0)], color="orange", alpha=0.5,  fill=True)

plt.axvline(x=amd_HVaR99, color="blue", alpha=0.8, linestyle=(0, (5, 10)), label="AMD VaR 99%: {0:.2f}%".format(amd_HVaR99))
plt.axvline(x=amd_HVaR999, color="blue", alpha=1.0, linestyle=(0, (5, 1)), label="AMD VaR 99.9%: {0:.2f}%".format(amd_HVaR999))

plt.axvline(x=nvidia_HVaR99, color="orange", alpha=0.8, linestyle=(0, (5, 10)), label="NVIDIA VaR 99%: {0:.2f}%".format(nvidia_HVaR99))
plt.axvline(x=nvidia_HVaR999, color="orange", alpha=1.0, linestyle=(0, (5, 1)), label="NVIDIA VaR 99.9%: {0:.2f}%".format(nvidia_HVaR999))

ax.add_patch(patches.Rectangle((amd_HVaR999, 0), amd_HVaR99 - amd_HVaR999, y_lim, alpha=0.5, color="blue"))
ax.add_patch(patches.Rectangle((nvidia_HVaR999, 0), nvidia_HVaR99 - nvidia_HVaR999, y_lim, alpha=0.5, color="orange"))

ax.set_ylim((0, y_lim))
ax.set(xlabel="Negative Return")

plt.show()
142/153:

confidence_level = 95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(10000 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(10000 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
142/154:

confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(10000 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(10000 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
142/155:

confidence_level = .999
amd_HVaR999 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR999  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(10000 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(10000 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
142/156:
confidence_level = .99
amd_HVaR99 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR99 = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR99, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR99, 2)) + "% in one day based on historical data.")
142/157:

confidence_level = .999
amd_HVaR999 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR999  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
142/158:

confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
142/159: ### 30-day Historical Value at Risk
142/160:
confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(21)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(21)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
142/161:
monthly_trading_days = 22

confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(22)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(22)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
142/162: For our 95% confidence level, NVIDIA and AMD both fall over our 20% loss threshold on a monthly scale. We are interested to know with which certainty we can guarantee a loss threshold of 20% based on historical data. For that, we could attempt trial and error with various confidence levels until we have found the right one. Alternatively, we can change the equation to determine at which percentile (i.e. our `1 - confidence level`) the closest score under our 20% threshold (-0.2 value in our Discrete Return distribution) falls:
142/163: amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(22)
142/164:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(22)
confidence = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(confidence)
142/165:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(22)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)
142/166:
monthly_trading_days = 22

confidence_level = .95
amd_MHVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(22)
nvidia_MHVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(22)

print("AMD Monthly Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Monthly Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_MHVaR95, 2)) + "% in one day based on historical data.")
142/167:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(22)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], 1-q)

print("AMD Monthly Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one day based on historical data.")
142/168:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(22)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], 1-q)

print("AMD Monthly Value at Risk: " + str(1-q*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one day based on historical data.")
142/169:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(22)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], 1-q)

print("AMD Monthly Value at Risk: " + str((1-q)*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one day based on historical data.")
142/170:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(22)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q)*100)

print("AMD Monthly Value at Risk: " + str((1-q)*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one day based on historical data.")
142/171:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(22)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1+q)*100)

print("AMD Monthly Value at Risk: " + str((1-q)*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one day based on historical data.")
142/172:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(22)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], 1-q)

print("AMD Monthly Value at Risk: " + str((1-q)*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one day based on historical data.")
142/173:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], 1-q)

print("AMD Monthly Value at Risk: " + str((1-q)*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one day based on historical data.")
142/174:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q)*100)

print("AMD Monthly Value at Risk: " + str((1-q)*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one day based on historical data.")
142/175:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], ((1-q)*100))

print("AMD Monthly Value at Risk: " + str((1-q)*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one day based on historical data.")
142/176:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q)

print("AMD Monthly Value at Risk: " + str((1-q)*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one day based on historical data.")
142/177:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))

print("AMD Monthly Value at Risk: " + str((1-q)*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one day based on historical data.")
142/178:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str((1-q)*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one day based on historical data.")
142/179:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(np.abs(amd_monthly_returns) < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str((1-q)*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/180:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(md_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str((1-q)*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/181:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str((1-q)*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/182:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-q)*100),2) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/183:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-q)*100),2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/184:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-q)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/185:
threshold = -0.25
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-q)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/186:
threshold = -0.5
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-q)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/187:
threshold = -0.5
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < (threshold * np.sqrt(monthly_trading_days))) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-q)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/188:
threshold = -0.5
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns > (threshold * np.sqrt(monthly_trading_days))) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-q)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/189:
threshold = -0.5
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(np.abs(amd_monthly_returns) > (threshold * np.sqrt(monthly_trading_days))) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-q)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/190:
threshold = -0.5
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(np.abs(amd_monthly_returns) < (threshold * np.sqrt(monthly_trading_days))) / len(amd_monthly_returns)
print(q)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-q)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/191:
threshold = -0.5
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(np.abs(amd_monthly_returns) < (threshold * np.sqrt(monthly_trading_days))) / len(amd_monthly_returns)
print(p)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-p)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/192:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(np.abs(amd_monthly_returns) < (threshold * np.sqrt(monthly_trading_days))) / len(amd_monthly_returns)
print(p)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-p)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/193:
threshold = -0.1
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(np.abs(amd_monthly_returns) < (threshold * np.sqrt(monthly_trading_days))) / len(amd_monthly_returns)
print(p)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-p)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/194:
threshold = -0.1
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(np.abs(amd_monthly_returns) < threshold)) / len(amd_monthly_returns)
print(p)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-p)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/195:
threshold = -0.1
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(np.abs(amd_monthly_returns) < threshold) / len(amd_monthly_returns)
print(p)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-p)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/196:
threshold = -0.1
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(p)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-p)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/197:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(p)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-p)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/198:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(p)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-p))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-p)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/199:
threshold = -0.3
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(p)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-p))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-p)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/200:
threshold = -0.9
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(p)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-p))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-p)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/201:
threshold = -0.1
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(p)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-p))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-p)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/202:
threshold = -0.11
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(p)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-p))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-p)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/203:
threshold = -0.101
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(p)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-p))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-p)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/204:
threshold = -0.1
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(p)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-p))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-p)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/205:
threshold = -0.1
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(p)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-p))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-p)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/206:
threshold = -0.2
amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
p = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
print(p)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-p))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-p)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/207:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-q)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/208:
threshold = -0.25

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-q)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/209:
threshold = -0.1

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-q)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/210:
threshold = -0.05

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-q)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/211:
threshold = -0.001

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-q)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/212:
threshold = -0.000

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round((1-q)*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/213:
threshold = -0.000

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/214:
threshold = -0.000

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence)  * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/215:
threshold = -0.000

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) 

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/216:
threshold = -0.000

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/217:
threshold = 2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/218:
threshold = 

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(np.abs(amd_monthly_returns) < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/219:
threshold = 0

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(np.abs(amd_monthly_returns) < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/220:
threshold = 0

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"][combined.loc[["AMD"], "Discrete Return"] < 0] * np.sqrt(monthly_trading_days)
q = sum(np.abs(amd_monthly_returns) < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/221:
threshold = 2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"][combined.loc[["AMD"], "Discrete Return"] < 0] * np.sqrt(monthly_trading_days)
q = sum(np.abs(amd_monthly_returns) < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/222:
threshold = 1

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"][combined.loc[["AMD"], "Discrete Return"] < 0] * np.sqrt(monthly_trading_days)
q = sum(np.abs(amd_monthly_returns) < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/223:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"][combined.loc[["AMD"], "Discrete Return"] < 0] * np.sqrt(monthly_trading_days)
q = sum(np.abs(amd_monthly_returns) < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/224:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"][combined.loc[["AMD"], "Discrete Return"] < 0] * np.sqrt(monthly_trading_days)
q = sum(np.abs(amd_monthly_returns) < np.abs(threshold)) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/225:
threshold = -0.1

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"][combined.loc[["AMD"], "Discrete Return"] < 0] * np.sqrt(monthly_trading_days)
q = sum(np.abs(amd_monthly_returns) < np.abs(threshold)) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/226:
threshold = -0.05

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"][combined.loc[["AMD"], "Discrete Return"] < 0] * np.sqrt(monthly_trading_days)
q = sum(np.abs(amd_monthly_returns) < np.abs(threshold)) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/227:
threshold = -0.01

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"][combined.loc[["AMD"], "Discrete Return"] < 0] * np.sqrt(monthly_trading_days)
q = sum(np.abs(amd_monthly_returns) < np.abs(threshold)) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/228:
threshold = -0.001

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"][combined.loc[["AMD"], "Discrete Return"] < 0] * np.sqrt(monthly_trading_days)
q = sum(np.abs(amd_monthly_returns) < np.abs(threshold)) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/229:
threshold = -0.001

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(np.abs(amd_monthly_returns) < np.abs(threshold)) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/230:
threshold = -0.001

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/231:
threshold = -0.001

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns > threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/232:
threshold = -0.001

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/233:
threshold = -0.000

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/234:
threshold = 0.1

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/235:
threshold = 0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/236:
threshold = 0.3

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/237:
threshold = 0.5

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/238:
threshold = -0.5

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/239:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/240:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/241:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR), 2) + "% in one trading month based on historical data.")
142/242:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/243:
threshold = -0.1981

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/244:
threshold = -0.1982

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/245:
threshold = -0.1980

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/246:
threshold = -0.197

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/247:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/248:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

print(q)
confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR, 2)) + "% in one trading month based on historical data.")
142/249:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/250:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns) * 100

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/251:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = (sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)) * 100

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/252:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold / len(amd_monthly_returns))
confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/253:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold / len(amd_monthly_returns)
confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/254:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold )/ len(amd_monthly_returns)
confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/255:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("AMD Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one trading month based on historical data.")
142/256:
nvdia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)
confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("NVIDIA Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_MHVaR)) + "% in one trading month based on historical data.")
142/257:
nvdia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)
confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("NVIDIA Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_MHVaR)) + "% in one trading month based on historical data.")
142/258:
nvidia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)
confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print("NVIDIA Monthly Value at Risk: " + str(np.round(confidence*100,2)) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_MHVaR)) + "% in one trading month based on historical data.")
142/259:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q
142/260:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

forecasted_values.plot()
142/261:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

sns.lineplot(forecasted_values)
142/262:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

sns.lineplot(x=forecasted_values.index, y=forecasted_values)
142/263:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

sns.lineplot(x=forecasted_values[0], y=forecasted_values[1])
142/264:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values[0])
sns.lineplot(x=forecasted_values[0], y=forecasted_values[1])
142/265:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values[0])
print(forecasted_values[1])
sns.lineplot(x=forecasted_values[0], y=forecasted_values[1])
142/266:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values.squeeze(0))
print(forecasted_values[1])
sns.lineplot(x=forecasted_values[0], y=forecasted_values[1])
142/267:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values.squeeze())
print(forecasted_values[1])
sns.lineplot(x=forecasted_values[0], y=forecasted_values[1])
142/268:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values.squeeze([0]))
print(forecasted_values[1])
sns.lineplot(x=forecasted_values[0], y=forecasted_values[1])
142/269:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values.squeeze(0))
print(forecasted_values[1])
sns.lineplot(x=forecasted_values[0], y=forecasted_values[1])
142/270:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values.squeeze(0))
sns.lineplot(x=forecasted_values[0], y=forecasted_values[1])
142/271:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values.squeeze((0)))
sns.lineplot(x=forecasted_values[0], y=forecasted_values[1])
142/272:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values.squeeze())
sns.lineplot(x=forecasted_values[0:, 0], y=forecasted_values[1])
142/273:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values.squeeze())
sns.lineplot(x=forecasted_values[0:, 0], y=forecasted_values[0: 1])
142/274:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values.squeeze())
sns.lineplot(x=forecasted_values[0:, 0], y=forecasted_values[0:, 1])
142/275:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

sns.lineplot(x=forecasted_values[0:, 0], y=forecasted_values[0:, 1])
142/276:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values[0:, 0])
sns.lineplot(x=forecasted_values[0:, 0], y=forecasted_values[0:, 1])
142/277:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values[-1:, 0])
sns.lineplot(x=forecasted_values[0:, 0], y=forecasted_values[0:, 1])
142/278:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values[0:-1, 0])
sns.lineplot(x=forecasted_values[0:, 0], y=forecasted_values[0:, 1])
142/279:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values[0:0, 0])
sns.lineplot(x=forecasted_values[0:, 0], y=forecasted_values[0:, 1])
142/280:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values[0:1, 0])
sns.lineplot(x=forecasted_values[0:, 0], y=forecasted_values[0:, 1])
142/281:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values[:-1, 0])
sns.lineplot(x=forecasted_values[0:, 0], y=forecasted_values[0:, 1])
142/282:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values[:0, 0])
sns.lineplot(x=forecasted_values[0:, 0], y=forecasted_values[0:, 1])
142/283:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values[:, 0])
sns.lineplot(x=forecasted_values[0:, 0], y=forecasted_values[0:, 1])
142/284:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values[:, 0])
print(forecasted_values[:, 1])
sns.lineplot(x=forecasted_values[0:, 0], y=forecasted_values[0:, 1])
142/285:
# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])

# Loop through each forecast period
for i in range(100):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values[:, 0])
print(forecasted_values[:, 1])
sns.lineplot(x=forecasted_values[:, 0], y=forecasted_values[:, 1])
142/286:
# Aggregate forecasted VaR
forecasted_values = np.empty([200, 2])

# Loop through each forecast period
for i in range(200):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values[:, 0])
print(forecasted_values[:, 1])
sns.lineplot(x=forecasted_values[:, 0], y=forecasted_values[:, 1])
142/287:
# Aggregate forecasted VaR
forecasted_values = np.empty([200, 2])

# Loop through each forecast period
for i in range(200):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns < threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

print(forecasted_values[:, 0])
print(forecasted_values[:, 1])
sns.lineplot(x=forecasted_values[:, 0], y=forecasted_values[:, 1])
142/288:
# Aggregate forecasted VaR
forecasted_values = np.empty([200, 2])

# Loop through each forecast period
for i in range(200):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns =< threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

sns.lineplot(x=forecasted_values[:, 0], y=forecasted_values[:, 1])
142/289:
# Aggregate forecasted VaR
forecasted_values = np.empty([200, 2])

# Loop through each forecast period
for i in range(200):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

sns.lineplot(x=forecasted_values[:, 0], y=forecasted_values[:, 1])
142/290:
# Aggregate forecasted VaR
forecasted_values = np.empty([400, 2])

# Loop through each forecast period
for i in range(400):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

sns.lineplot(x=forecasted_values[:, 0], y=forecasted_values[:, 1])
142/291:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = q

sns.lineplot(x=forecasted_values[:, 0], y=forecasted_values[:, 1])
142/292:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

sns.lineplot(x=forecasted_values[:, 0], y=forecasted_values[:, 1])
142/293:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

sns.lineplot(x=forecasted_values[:, 0], y=forecasted_values[:, 1])
plt.title("Confidence Level at " + str(threshold * 100) + "%")
142/294:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

sns.lineplot(x=forecasted_values[:, 0], y=forecasted_values[:, 1]*100)
plt.title("Confidence Level for " + str(threshold * 100) + "% max loss ")
142/295:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

sns.lineplot(x=forecasted_values[:, 0], y=forecasted_values[:, 1]*100)
plt.title("Confidence Level for " + str(threshold * 100) + "% max loss over time, based on historical data prior day 0")
142/296:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

sns.lineplot(x=forecasted_values[:, 0], y=forecasted_values[:, 1]*100)
plt.title("AMD, confidence level for " + str(threshold * 100) + "% max loss over time, based on historical data prior day 0")
142/297:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

sns.lineplot(x=forecasted_values[:, 0], y=forecasted_values[:, 1]*100)
plt.title("AMD, confidence for " + str(threshold * 100) + "% max loss over time, based on historical data prior day 1")
142/298:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(x=forecasted_values[:, 0], y=forecasted_values[:, 1]*100)
plt.title("AMD, confidence for " + str(threshold * 100) + "% max loss over time, based on historical data prior day 1")
142/299:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=forecasted_values[:, 1]*100)
ax.set(xlabel="Days", ylabel="Confidence (%)")
plt.title("AMD, confidence for " + str(threshold * 100) + "% max loss over time, based on historical data prior day 1")
142/300:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=forecasted_values[:, 1]*100)
ax.set(xlabel="Days", ylabel="Confidence in max. -20% loss (%)")
plt.title("AMD, confidence for " + str(threshold * 100) + "% max loss over time, based on historical data prior day 1")
142/301:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=1-forecasted_values[:, 1])
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
plt.title("AMD, confidence for " + str(threshold * 100) + "% max loss over time, based on historical data prior day 1")
142/302:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
plt.title("AMD, confidence for " + str(threshold * 100) + "% max loss over time, based on historical data prior day 1")
142/303:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
plt.title("AMD, chance for losses greater than" + str(threshold * 100) + " over time, based on historical data prior day 1")
142/304:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
plt.title("AMD, chance for losses greater than" + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/305:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[1:, 0], y=(1-forecasted_values[1:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/306:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[0:, 0], y=(1-forecasted_values[0:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/307:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/308:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    print(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/309:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i)
    print(combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/310:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    print(combined.loc[["AMD"], "Discrete Return"] * np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/311:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/312:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    print(q)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/313:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/314:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)", yticklabel="%")
plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/315:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)", yticklabels="%")
plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/316:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)", yticklabels=str((1-forecasted_values[:, 1])*100) + "%")
plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/317:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:,.2%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/318:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:,2%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/319:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:,.2%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/320:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{::.2%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/321:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.2%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/322:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:..2%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/323:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1])*100)
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.2%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/324:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.2%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/325:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/326:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i+1, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i+1, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/327:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i+1
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/328:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i+1
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
ax.set_xbound((1,500))

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/329:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i+1
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
ax.set_xlim((1,500))

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/330:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i+1
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
ax.set_xlim([1,500])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/331:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i+1
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
ax.set_xlim([0,500])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/332:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i+1
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/333:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i+1
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
ax.set_xticklabels([0, ax.get_xticklabels()[:-1]])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/334:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i+1
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
ax.set_xticklabels([01]])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/335:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i+1
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
ax.set_xticklabels([1, ax.get_xticklabels()]])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/336:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i+1
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
ax.set_xticklabels([1, ax.get_xticklabels()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
142/337:
# Aggregate forecasted VaR
forecasted_values = np.empty([500, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i+1
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
ax.set_xticklabels([1, ax.get_xticklabels()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
149/1: %history -g
149/2: %history -g -f "./restore.py"
149/3: %history -g -f "./restore.py"
149/4: %history -g -f restore.py
149/5:
days = 500
VaR_estimate = 0.15

# Aggregate forecasted VaR
VaR_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR_forecasts[i, 1] = VaR_estimate * np.sqrt(i + 1)
149/6:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
149/7: print(combined.head())
149/8:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
149/9:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
149/10: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
149/11:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
149/12:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
149/13:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
149/14:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
149/15:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
149/16:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
149/17:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
149/18:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
149/19:
def parkinson(data, window, annual_trading_days = 252, annualized= True):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    def annualize(v):
        return v * (annual_trading_days/window)

    if annualized:
        return np.sqrt(annualize(variance))
    else: return np.sqrt(variance)
149/20:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
149/21:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("The correlation coefficient of AMD and NVIDIA is:",corrcoef)
149/22:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date").sort_index(ascending=True)

# review dataframe structure
sp500.head()
149/23:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
149/24:
sp500["Discrete Return"] = sp500["Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
149/25:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
149/26:
amd_mean_excess_return = combined.loc[["AMD"], "Discrete Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Discrete Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Discrete Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Discrete Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
149/27:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
149/28: print(combined.head())
149/29:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
149/30:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
149/31: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
149/32:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
149/33:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
149/34:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
149/35:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
149/36:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
149/37:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
149/38:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
149/39:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
149/40:
def parkinson(data, window, annual_trading_days = 252, annualized= True):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    def annualize(v):
        return v * (annual_trading_days/window)

    if annualized:
        return np.sqrt(annualize(variance))
    else: return np.sqrt(variance)
149/41:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
149/42:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("The correlation coefficient of AMD and NVIDIA is:",corrcoef)
149/43:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date").sort_index(ascending=True)

# review dataframe structure
sp500.head()
149/44:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
149/45:
sp500["Discrete Return"] = sp500["Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
149/46:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
149/47:
amd_mean_excess_return = combined.loc[["AMD"], "Discrete Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Discrete Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Discrete Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Discrete Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
149/48:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
149/49: print(combined.head())
149/50:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
149/51:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
149/52: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
149/53:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
149/54:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
149/55:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
149/56:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
149/57:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
149/58:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
149/59:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
149/60:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
149/61:
def parkinson(data, window, annual_trading_days = 252, annualized= True):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    def annualize(v):
        return v * (annual_trading_days/window)

    if annualized:
        return np.sqrt(annualize(variance))
    else: return np.sqrt(variance)
149/62:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
149/63:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("The correlation coefficient of AMD and NVIDIA is:",corrcoef)
149/64:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date").sort_index(ascending=True)

# review dataframe structure
sp500.head()
149/65:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
149/66:
sp500["Discrete Return"] = sp500["Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
149/67:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
149/68:
amd_mean_excess_return = combined.loc[["AMD"], "Discrete Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Discrete Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Discrete Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Discrete Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
149/69:
def VaR(data, confidence):
    return np.percentile(data.dropna(), (100 - confidence))
149/70:

confidence_level = 95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
149/71:
confidence_level = 99
amd_HVaR99 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR959 = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR99, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR99, 2)) + "% in one day based on historical data.")
149/72:

confidence_level = 99.9
amd_HVaR999 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR999  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
149/73:
days = 500
VaR_estimate = 0.15

# Aggregate forecasted VaR
VaR_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR_forecasts[i, 1] = VaR_estimate * np.sqrt(i + 1)
149/74:
days = 500
VaR95_estimate = 0.15

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
ax.set_xticklabels([1, ax.get_xticklabels()]])

plt.title("VaR95 scaled over time")
plt.show()
149/75:
days = 500
VaR95_estimate = 0.15

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
ax.set_xticklabels([1, ax.get_xticklabels()])

plt.title("VaR95 scaled over time")
plt.show()
150/1:
days = 500
VaR95_estimate = 0.15

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
150/2:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
150/3: print(combined.head())
150/4:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
150/5:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
150/6: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
150/7:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
150/8:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
150/9:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
150/10:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
150/11:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
150/12:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
150/13:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
150/14:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
150/15:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
150/16: print(combined.head())
150/17:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
150/18:
def parkinson(data, window, annual_trading_days = 252, annualized= True):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    def annualize(v):
        return v * (annual_trading_days/window)

    if annualized:
        return np.sqrt(annualize(variance))
    else: return np.sqrt(variance)
150/19:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
150/20: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
150/21:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
150/22:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
150/23:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
150/24:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
150/25:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
150/26:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("The correlation coefficient of AMD and NVIDIA is:",corrcoef)
150/27:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
150/28:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
150/29:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
150/30:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
150/31:
def parkinson(data, window, annual_trading_days = 252, annualized= True):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    def annualize(v):
        return v * (annual_trading_days/window)

    if annualized:
        return np.sqrt(annualize(variance))
    else: return np.sqrt(variance)
150/32:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
150/33:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("The correlation coefficient of AMD and NVIDIA is:",corrcoef)
150/34:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date").sort_index(ascending=True)

# review dataframe structure
sp500.head()
150/35:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
150/36:
sp500["Discrete Return"] = sp500["Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
150/37:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date").sort_index(ascending=True)

# review dataframe structure
sp500.head()
150/38:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
150/39:
amd_mean_excess_return = combined.loc[["AMD"], "Discrete Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Discrete Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Discrete Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Discrete Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
150/40:
def VaR(data, confidence):
    return np.percentile(data.dropna(), (100 - confidence))
150/41:

confidence_level = 95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
150/42:
confidence_level = 99
amd_HVaR99 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR959 = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR99, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR99, 2)) + "% in one day based on historical data.")
150/43:

confidence_level = 99.9
amd_HVaR999 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR999  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
150/44:
days = 500
VaR95_estimate = 0.15

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
150/45:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
150/46:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
150/47: print(combined.head())
150/48:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
150/49:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
150/50: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
150/51:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
150/52:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
150/53:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
150/54:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
150/55:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
150/56:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
150/57:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
150/58:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
150/59:
def parkinson(data, window, annual_trading_days = 252, annualized= True):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    def annualize(v):
        return v * (annual_trading_days/window)

    if annualized:
        return np.sqrt(annualize(variance))
    else: return np.sqrt(variance)
150/60:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
150/61:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("The correlation coefficient of AMD and NVIDIA is:",corrcoef)
150/62:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date").sort_index(ascending=True)

# review dataframe structure
sp500.head()
150/63:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
150/64:
sp500["Discrete Return"] = sp500["Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
150/65:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
150/66:
amd_mean_excess_return = combined.loc[["AMD"], "Discrete Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Discrete Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Discrete Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Discrete Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
150/67:
annual_trading_days = 252

def parkinson(data, window, annual_trading_days = 252, annualized= True):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    def annualize(v):
        return v * (annual_trading_days/window)

    if annualized:
        return np.sqrt(annualize(variance))
    else: return np.sqrt(variance)
150/68:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
150/69:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("The correlation coefficient of AMD and NVIDIA is:",corrcoef)
150/70:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date").sort_index(ascending=True)

# review dataframe structure
sp500.head()
150/71:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
150/72:
sp500["Discrete Return"] = sp500["Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
150/73:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
150/74:
amd_mean_excess_return = combined.loc[["AMD"], "Discrete Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Discrete Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Discrete Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Discrete Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
150/75:
def VaR(data, confidence):
    return np.percentile(data.dropna(), (100 - confidence))
150/76:

confidence_level = 95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
150/77:
confidence_level = 99
amd_HVaR99 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR959 = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR99, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR99, 2)) + "% in one day based on historical data.")
150/78:

confidence_level = 99.9
amd_HVaR999 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR999  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
150/79:
confidence_level = 99
amd_HVaR99 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR99 = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR99, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR99, 2)) + "% in one day based on historical data.")
150/80:

confidence_level = 99.9
amd_HVaR999 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR999  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
150/81:
days = 500
VaR95_estimate = 0.15

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
152/1:
days = 500
VaR95_estimate = 15

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
152/2:

confidence_level = 99.9
amd_HVaR999 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR999  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
152/3:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
152/4: print(combined.head())
152/5:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
152/6:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
152/7: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
152/8:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
152/9:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
152/10:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
152/11:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
152/12:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
152/13:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
152/14:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
152/15:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
152/16:
annual_trading_days = 252

def parkinson(data, window, annual_trading_days = 252, annualized= True):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    def annualize(v):
        return v * (annual_trading_days/window)

    if annualized:
        return np.sqrt(annualize(variance))
    else: return np.sqrt(variance)
152/17:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
152/18:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("The correlation coefficient of AMD and NVIDIA is:",corrcoef)
152/19:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date").sort_index(ascending=True)

# review dataframe structure
sp500.head()
152/20:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
152/21:
sp500["Discrete Return"] = sp500["Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
152/22:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
152/23:
amd_mean_excess_return = combined.loc[["AMD"], "Discrete Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Discrete Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Discrete Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Discrete Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
152/24:
def VaR(data, confidence):
    return np.percentile(data.dropna(), (100 - confidence))
152/25:

confidence_level = 95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
152/26:
confidence_level = 99
amd_HVaR99 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR99 = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR99, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR99, 2)) + "% in one day based on historical data.")
152/27:

confidence_level = 99.9
amd_HVaR999 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR999  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
152/28:
days = 500
VaR95_estimate = 15

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
152/29:
days = 500
VaR95_estimate = 0.15

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
152/30:
days = 500
VaR95_estimate = 0.15

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 0 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
152/31:
days = 500
VaR95_estimate = 0.15

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
152/32:
days = 500
VaR95_estimate = 0.15

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
#ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
152/33:
days = 500
VaR95_estimate = 0.15

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
#ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
152/34:
days = 500
VaR95_estimate = 0.15

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
152/35:
days = 500
VaR95_estimate = 0.15

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.1%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
152/36:
days = 500
VaR95_estimate = 0.15

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
152/37:
days = 500
VaR95_estimate = 1.5

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
152/38:
days = 500
VaR95_estimate = 0.15

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
152/39:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
152/40:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1- VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
plt.title("VaR95 scaled over time")
plt.show()
152/41:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1- VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
plt.title("VaR95 scaled over time")
plt.show()
152/42:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
plt.title("VaR95 scaled over time")
plt.show()
152/43:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1- VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
plt.title("VaR95 scaled over time")
plt.show()
152/44:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1 - np.abs(VaR95_forecasts[:, 1])))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
plt.title("VaR95 scaled over time")
plt.show()
152/45:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(np.abs(VaR95_forecasts[:, 1])))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
plt.title("VaR95 scaled over time")
plt.show()
152/46:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1- np.abs(VaR95_forecasts[:, 1])))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
plt.title("VaR95 scaled over time")
plt.show()
152/47:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(100 + (1- np.abs(VaR95_forecasts[:, 1]))))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
plt.title("VaR95 scaled over time")
plt.show()
152/48:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(100 + VaR95_forecasts[:, 1])))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
plt.title("VaR95 scaled over time")
plt.show()
152/49:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(100 + VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
plt.title("VaR95 scaled over time")
plt.show()
152/50:
days = 1000
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(100 + VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
plt.title("VaR95 scaled over time")
plt.show()
152/51:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(100 + VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
plt.title("VaR95 scaled over time")
plt.show()
152/52:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(100 + VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.2%}'.format(y) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time")
plt.show()
152/53:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(100 + VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.-2%}'.format(y) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time")
plt.show()
152/54:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(100 + VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time")
plt.show()
152/55:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(100 + VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y/100 in ax.get_yticks()])

plt.title("VaR95 scaled over time")
plt.show()
152/56:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(100 + VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for 100 in ax.get_yticks()])

plt.title("VaR95 scaled over time")
plt.show()
152/57:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(100 + VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time")
plt.show()
152/58:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(100 + VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("Confidence in VaR95 scaled over time")
plt.show()
152/59:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(100 + VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted Confidence in VaR for -3.6% (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("Confidence in VaR95 scaled over time")
plt.show()
152/60:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(100 + VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted Confidence in VaR for -3.6% (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("Confidence in loss max. 20% scaled over time)
plt.show()
152/61:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(100 + VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted Confidence in VaR for -3.6% (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("Confidence in loss max. 20% scaled over time")
plt.show()
152/62:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=VaR95_forecasts[:,1])
ax.set(xlabel="Days", ylabel="Forecasted Confidence in VaR for -3.6% (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("Confidence in loss max. 20% scaled over time")
plt.show()
152/63:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:,1]))
ax.set(xlabel="Days", ylabel="Forecasted Confidence in VaR for -3.6% (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("Confidence in loss max. 20% scaled over time")
plt.show()
152/64:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:,1]))
ax.set(xlabel="Days", ylabel="Forecasted Confidence in VaR for -3.6% (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("VaR95 maximum loss scaled over time")
plt.show()
152/65:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:,1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("VaR95 maximum loss scaled over time, based on VaR95 at day 1")
plt.show()
152/66:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:,1]))
ax.set(xlabel="Days", ylabel="Forecasted VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time, based on VaR95 at day 1")
plt.show()
152/67:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:,1]))
ax.set(xlabel="Days (T)", ylabel="Forecasted VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time, based on VaR95 at day 1")
plt.show()
152/68:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:,1]))
ax.set(xlabel="Days (t)", ylabel="Forecasted VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time, based on VaR95 at day 1")
plt.show()
152/69:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1-VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time, based on VaR95 at day 1")
plt.show()
152/70:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time, based on VaR95 at day 1")
plt.show()
152/71:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(100 - y ) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time, based on VaR95 at day 1")
plt.show()
152/72:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(1 - y) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time, based on VaR95 at day 1")
plt.show()
152/73:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(100 - y) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time, based on VaR95 at day 1")
plt.show()
152/74:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(100 - y/100) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time, based on VaR95 at day 1")
plt.show()
152/75:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time, based on VaR95 at day 1")
plt.show()
152/76:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format((y/100) + 100) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time, based on VaR95 at day 1")
plt.show()
152/77:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format((y/100) + 1) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time, based on VaR95 at day 1")
plt.show()
152/78:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time, based on VaR95 at day 1")
plt.show()
152/79:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1- VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time, based on VaR95 at day 1")
plt.show()
152/80:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1- VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted max. loss for VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("VaR95 scaled over time, based on VaR95 at day 1")
plt.show()
152/81:
days = 500
VaR95_estimate = -

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1- VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted max. loss for VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("Confidence in max. -5% loss scaled over time, based on VaR95=-5% at day 1")
plt.show()
152/82:
days = 500
VaR95_estimate = -0.5

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1- VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted max. loss for VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("Confidence in max. -5% loss scaled over time, based on VaR95=-5% at day 1")
plt.show()
152/83:
days = 500
VaR95_estimate = -5.0

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1- VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted max. loss for VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("Confidence in max. -5% loss scaled over time, based on VaR95=-5% at day 1")
plt.show()
152/84:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1- VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted max. loss for VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("Confidence in max. -5% loss scaled over time, based on VaR95=-5% at day 1")
plt.show()
152/85:
days = 500
VaR95_estimate = -5.0

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1- VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Forecasted max. loss for VaR 95 (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("Confidence in max. -5% loss scaled over time, based on VaR95=-5% at day 1")
plt.show()
152/86:
days = 500
VaR95_t1 = -5.0

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_t1 * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(1- VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Confidence in max 5% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("Confidence in max. 5% loss scaled over time, based on VaR95=-5% at day 1")
plt.show()
152/87:
days = 500
VaR95_t1 = -5.0

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_t1 * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Confidence in max 5% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("Confidence in max. 5% loss scaled over time, based on VaR95=-5% at day 1")
plt.show()
152/88:
days = 500
VaR95_t1 = -5.0

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_t1 * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Confidence in max 5% loss (%)")
ax.set_yticklabels(['{:.0%}'.format((y/100) + 1) for y in ax.get_yticks()])

plt.title("Confidence in max. 5% loss scaled over time, based on VaR95=-5% at day 1")
plt.show()
152/89:
days = 252
VaR95_t1 = -5.0

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_t1 * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Confidence in max 5% loss (%)")
ax.set_yticklabels(['{:.0%}'.format((y/100) + 1) for y in ax.get_yticks()])

plt.title("Confidence in max. 5% loss scaled over time, based on VaR95=-5% at day 1")
plt.show()
152/90:
days = 252
VaR95_t1 = -5.0

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_t1 * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Confidence in max 5% loss (%)")
ax.set_yticklabels(['{:.0%}'.format((y/100) + 1) for y in ax.get_yticks()])

plt.title("Confidence in max. 5% loss scaled over time, based on VaR95=-5% at day 1")
plt.show()
152/91:
days = 252
VaR95_t1 = -10.0

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_t1 * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Confidence in max 10% loss (%)")
ax.set_yticklabels(['{:.0%}'.format((y/100) + 1) for y in ax.get_yticks()])

plt.title("Confidence in max. 10% loss scaled over time, based on VaR95=-10% at day 1")
plt.show()
152/92:
days = 252
VaR95_t1 = -5.0

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_t1 * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Confidence in max 5% loss (%)")
ax.set_yticklabels(['{:.0%}'.format((y/100) + 1) for y in ax.get_yticks()])

plt.title("Confidence in max. 5% loss scaled over time, based on VaR95=-5% at day 1")
plt.show()
152/93: As we can see, due to the square root influence over time, we rapidly lose confidence into a max 5% loss over the first week, but only observe a slow deprecation in confidence over the later days. In the context of the stock market, this makes sense as multiple losses over a short period of time are plausible, implying that the confidence in a stable value over two weeks can quickly drop. Meanwhile, a stock's value often recovers and experiences upsurges over the course of time and thus confidence in a maximum loss over longer periods of time becomes more stable.
152/94:
breakpoint()
As we can see, due to the square root influence over time, we rapidly lose confidence into a max 5% loss over the first week, but only observe a slow deprecation in confidence over the later days. In the context of the stock market, this makes sense as multiple losses over a short period of time are plausible, implying that the confidence in a stable value over two weeks can quickly drop. Meanwhile, a stock's value often recovers and experiences upsurges over the course of time and thus confidence in a maximum loss over longer periods of time becomes more stable.
152/95: Let us now come back to the Historical Value at Risk on a monthly scale for our friend. What max. loss can we communicate her on a 95% confidence level?
152/96: ### Monthly Historical Value at Risk
152/97:
monthly_trading_days = 21

confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(22)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(22)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
142/162: For our 95% confidence level, NVIDIA and AMD both fall over our 20% loss threshold on a monthly scale. We are interested to know with which certainty we can guarantee a loss threshold of 20% based on historical data. For that, we could attempt trial and error with various confidence levels until we have found the right one. Alternatively, we can change the equation to determine at which percentile (i.e. our `1 - confidence level`) the closest score under our 20% threshold (-0.2 value in our Discrete Return distribution) falls:
152/98:
monthly_trading_days = 21

confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(22)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(22)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
152/99:
monthly_trading_days = 22

confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(22)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(22)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
152/100:
monthly_trading_days = 21

confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(22)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(22)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
152/101:
monthly_trading_days = 21

confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(monthly_trading_days)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(monthly_trading_days)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
152/102:
monthly_trading_days = 21

confidence_level = 95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(monthly_trading_days)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(monthly_trading_days)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
152/103:

confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
152/104:

confidence_level = 95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
152/105:
def VaR(data, confidence):
    return np.percentile(data.dropna(), (1 - confidence))
152/106:

confidence_level = 95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
152/107:
def VaR(data, confidence):
    return np.percentile(data.dropna(), (1 - confidence)*100)
152/108:

confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
152/109:

confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
152/110:
confidence_level = .99
amd_HVaR99 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR99 = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR99, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR99, 2)) + "% in one day based on historical data.")
152/111:

confidence_level = .999
amd_HVaR999 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR999  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
152/112:
monthly_trading_days = 21

confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(monthly_trading_days)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(monthly_trading_days)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
152/113:
monthly_trading_days = 21

confidence_level = .99
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(monthly_trading_days)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(monthly_trading_days)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
152/114:
monthly_trading_days = 21

confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(monthly_trading_days)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(monthly_trading_days)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
152/115:
monthly_trading_days = 21

confidence_level = .99
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(monthly_trading_days)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(monthly_trading_days)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
152/116: For our 95% confidence level, NVIDIA and AMD both fall over our 20% loss threshold on a monthly scale. We are interested to know with which certainty we can guarantee a loss threshold of 20% based on historical data. For that, we could attempt trial and error with various confidence levels until we have found the right one. Alternatively, we can change the equation to determine at which percentile (i.e. our `1 - confidence level`) the closest score under our 20% threshold (-0.2 value in our Discrete Return distribution) falls:
152/117: %history -g -f restore394.py
152/118: %history -g -f restore2.py
154/1: %history -g -f restore2.py
156/1: ### Determining Confidence for Monthly Historical Value at Risk = 20%
156/2:
We can derive the confidence level from determining the closest percentile below the threshold (0.2%). We can calculate the named percentile with the following formula:

## $q = {{|x < k|} \over {|x|}}
156/3: With this, we can determine the confidence in a max. 20% loss for AMD:
156/4: ##### AMD
156/5:
# Aggregate forecasted VaR
amd_forecast = np.empty([monthly_trading_days, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i+1
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
ax.set_xticklabels([1, ax.get_xticklabels()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
156/6:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
156/7: print(combined.head())
156/8:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
156/9:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
156/10: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
156/11:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
156/12:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
156/13:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
156/14:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
156/15:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
156/16:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
156/17:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
156/18:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
156/19:
annual_trading_days = 252

def parkinson(data, window, annual_trading_days = 252, annualized= True):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    def annualize(v):
        return v * (annual_trading_days/window)

    if annualized:
        return np.sqrt(annualize(variance))
    else: return np.sqrt(variance)
156/20:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
156/21:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("The correlation coefficient of AMD and NVIDIA is:",corrcoef)
156/22:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date").sort_index(ascending=True)

# review dataframe structure
sp500.head()
156/23:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
156/24:
sp500["Discrete Return"] = sp500["Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
156/25:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
156/26:
amd_mean_excess_return = combined.loc[["AMD"], "Discrete Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Discrete Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Discrete Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Discrete Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
156/27:
def VaR(data, confidence):
    return np.percentile(data.dropna(), (1 - confidence)*100)
156/28:

confidence_level = .95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
156/29:
confidence_level = .99
amd_HVaR99 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR99 = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR99, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR99, 2)) + "% in one day based on historical data.")
156/30:

confidence_level = .999
amd_HVaR999 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR999  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
156/31:
days = 252
VaR95_t1 = -5.0

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_t1 * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(VaR95_forecasts[:,1]))
ax.set(xlabel="Days t", ylabel="Confidence in max 5% loss (%)")
ax.set_yticklabels(['{:.0%}'.format((y/100) + 1) for y in ax.get_yticks()])

plt.title("Confidence in max. 5% loss scaled over time, based on VaR95=-5% at day 1")
plt.show()
156/32:
monthly_trading_days = 21

confidence_level = .99
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level) * np.sqrt(monthly_trading_days)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level) * np.sqrt(monthly_trading_days)

print("AMD Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
156/33:
# Aggregate forecasted VaR
amd_forecast = np.empty([monthly_trading_days, 2])

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i+1
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
ax.set_xticklabels([1, ax.get_xticklabels()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
156/34:
# Aggregate forecasted VaR
amd_forecast = np.empty([monthly_trading_days, 2])

threshold = -0.2

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    forecasted_values[i, 0] = i+1
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=forecasted_values[:, 0], y=(1-forecasted_values[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
ax.set_xticklabels([1, ax.get_xticklabels()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
156/35:
# Aggregate forecasted VaR
amd_forecast = np.empty([monthly_trading_days, 2])

threshold = -0.2

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    amd_forecast[i, 0] = i+1
    # Save the forecasted VaR 95
    amd_forecast[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=amd_forecast[:, 0], y=(1-amd_forecast[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])
ax.set_xticklabels([1, ax.get_xticklabels()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
156/36:
# Aggregate forecasted VaR
amd_forecast = np.empty([monthly_trading_days, 2])

threshold = -0.2

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    amd_forecast[i, 0] = i + 1
    # Save the forecasted VaR 95
    amd_forecast[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=amd_forecast[:, 0], y=(1-amd_forecast[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
156/37:
# Aggregate forecasted VaR
amd_forecast = np.empty([monthly_trading_days, 2])

threshold = -0.2

# Loop through each forecast period
for i in range(monthly_trading_days):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    amd_forecast[i, 0] = i + 1
    # Save the forecasted VaR 95
    amd_forecast[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=amd_forecast[:, 0], y=(1-amd_forecast[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
156/38:
# Aggregate forecasted VaR
amd_forecast = np.empty([500, 2])

threshold = -0.2

# Loop through each forecast period
for i in range(500):
    amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(np.sqrt(i))
    q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)
    # Save the time horizon i
    amd_forecast[i, 0] = i + 1
    # Save the forecasted VaR 95
    amd_forecast[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=amd_forecast[:, 0], y=(1-amd_forecast[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
156/39:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))

# Loop through each forecast period
for i in range(500):
    # Save the time horizon i
    amd_forecast[i, 0] = i + 1
    # Save the forecasted VaR 95
    amd_forecast[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=amd_forecast[:, 0], y=(1-amd_forecast[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
156/40:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))

print(q)
print(amd_MHVaR)
156/41:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * float(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], (1-q))

print(q)
print(amd_MHVaR)
156/42:
threshold = -0.2


amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print(q)
print(amd_MHVaR)
156/43:
threshold = -0.2


amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print(confidence)
print(amd_MHVaR)
156/44: print("AMD Monthly Historical Value at Risk: " + str(confidence_level*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one day based on historical data.")
156/45: print("AMD Monthly Historical Value at Risk: " + str(amd_confidence*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one day based on historical data.")
156/46:
threshold = -0.2


amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)

print(confidence)
print(amd_MHVaR)
156/47: print("AMD Monthly Historical Value at Risk: " + str(amd_confidence*100) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one day based on historical data.")
156/48: print("AMD Monthly Historical Value at Risk: {:.0%}".format(amd_confidence) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one day based on historical data.")
156/49: print("AMD Monthly Historical Value at Risk: {:.2%}".format(amd_confidence) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one day based on historical data.")
156/50: print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + "% certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one day based on historical data.")
156/51: print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one day based on historical data.")
156/52: print("AMD Monthly Historical Value at Risk: {:.5%}".format(amd_confidence) + " certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one day based on historical data.")
156/53: print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed " + str(np.round(100 * amd_MHVaR)) + "% in one day based on historical data.")
156/54: print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed {:.0%} in one day based on historical data.".format(100 * amd_MHVaR))
156/55: print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed {:.0%} in one day based on historical data.".format(amd_MHVaR))
156/56:
threshold = -0.2


amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/57:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/58: print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed {:.0%} in one day based on historical data.".format(amd_MHVaR))
156/59:
nvidia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)

nvidia_confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/60:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed {:.0%} in one day based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed {:.0%} in one day based on historical data.".format(nvidia_MHVaR))
156/61:
nvidia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns < threshold) / len(nvidia_monthly_returns)

nvidia_confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/62:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed {:.0%} in one day based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed {:.0%} in one day based on historical data.".format(nvidia_MHVaR))
156/63:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(nvidia_MHVaR))
156/64:
threshold = -0.21

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/65:
nvidia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)

nvidia_confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/66:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(nvidia_MHVaR))
156/67:
threshold = -0.17

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/68:
nvidia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)

nvidia_confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/69:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(nvidia_MHVaR))
156/70:
threshold = -0.169

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/71:
nvidia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)

nvidia_confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/72:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(nvidia_MHVaR))
156/73:
threshold = -0.164

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/74:
nvidia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)

nvidia_confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/75:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(nvidia_MHVaR))
156/76:
threshold = -0.160

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/77:
nvidia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)

nvidia_confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/78:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(nvidia_MHVaR))
156/79:
threshold = -0.15

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/80:
nvidia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)

nvidia_confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/81:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(nvidia_MHVaR))
156/82:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/83:
nvidia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)

nvidia_confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence) * np.sqrt(monthly_trading_days)
156/84:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(nvidia_MHVaR))
156/85:
threshold = -0.2

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], amd_confidence) * np.sqrt(monthly_trading_days)
156/86:
nvidia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)

nvidia_confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], nvidia_confidence) * np.sqrt(monthly_trading_days)
156/87:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(nvidia_MHVaR))
156/88:
threshold = -0.17

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], amd_confidence) * np.sqrt(monthly_trading_days)
156/89:
nvidia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)

nvidia_confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], nvidia_confidence) * np.sqrt(monthly_trading_days)
156/90:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(nvidia_MHVaR))
156/91:
threshold = -0.15

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], amd_confidence) * np.sqrt(monthly_trading_days)
156/92:
nvidia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)

nvidia_confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], nvidia_confidence) * np.sqrt(monthly_trading_days)
156/93:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(nvidia_MHVaR))
156/94:
threshold = -0.21

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], amd_confidence) * np.sqrt(monthly_trading_days)
156/95:
nvidia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)

nvidia_confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], nvidia_confidence) * np.sqrt(monthly_trading_days)
156/96:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(nvidia_MHVaR))
156/97:
threshold = -0.20

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], amd_confidence) * np.sqrt(monthly_trading_days)
156/98:
nvidia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)

nvidia_confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], nvidia_confidence) * np.sqrt(monthly_trading_days)
156/99:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(nvidia_MHVaR))
156/100:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(nvidia_MHVaR))
156/101:
These are quantitative results we can work with. On a monthly scale, based on the past historical data, NVIDIA features a lower chance for a monthly loss higher than 20%.

## Conclusion $III$: NVIDIA has a historically lower chance to exceed a higher loss than 20% over one month.
156/102: # Summary & Conclusions
156/103:
Let us collect our observations and conclusions.

### Observation $A$: The standard deviation of daily return is higher for AMD.
### Observation $B$: AMD's and NVIDIA's volatility indicate a similar development.

## Conclusion $I$: AMD and NVIDIA's historical value evolution is moderately positively correlated.
## Conclusion $II$: NVIDIA shows a higher return-per-risk by Sharpe Ratio.
## Conclusion $III$: NVIDIA has a historically lower chance to exceed a loss higher than 20% over one month.
156/104:
### Observation $A$: The standard deviation of daily return is higher for AMD.
### Observation $B$: AMD's and NVIDIA's volatility indicate a similar development.
156/105:
With historical data, we were able to show that AMD had a higher fluctuation in value over time than NVIDIA. Both stocks share a similar development pattern in growth and depreciation. We can quantify their relation with a correlation coefficient of ~0.54, indicating a positive correlation between both datasets. This is a strong support for our initital assumption that both stocks are part of the same peer group, as furthermore the visualization of their volatilities indicates that both are affected by the same historical events.

In the pursuit of risk-determination, NVIDIA turned out to be the more desirable stock in regards to return-per-risk defined through the Sharpe Ratio. This tendency in NVIDIA's favor is underlined by the higher confidence in a maximum loss threshold of 20% compared to AMD. Both the Sharpe Ratio and Value at Risk estimates are a common factor for risk analysis and comparison and therefore form vital insights to make a preliminary conclusion about the preferability of one of the two stocks. 

To sum up: Based on the historical data of the last five years, including the intra-day variances of the stock values, NVIDIA is the more promising stock for our investment in regards to simple return-per-risk defined through the Sharpe Ratio with a probability of only 5% to exceed the 20% loss threshold in a period of one month (compared to AMD: 7% exceedance chance).
156/106:
## Critique
The approaches to determine the preferability of investment choice as applied above have to discussed. As with all investment choices, the strength of the analysis depends the variety of defining markers, the identifiaction and selection of the relevant markers, as well as in the appropriate weighting of these markers. A uni or bivariate analysis in the domain of stock market investment cannot be considered of reliable significance due it's interrelated nature of various market mechanisms. A quick look on any stock report will highlight the noteworthy variety of different statistics and criteria which are deemed relevant to get a first impression of a stock's value development. It is therefore no coincidence that the attempt to predict the preferability of an investment based on data (e.g. "Quantitative Finance") has become a huge sector in the digital industry. 

A contextual flaw in the above approaches is the focus on determining limits of loss. The approach fails in its analysis to underline the necessity of promising returns, as the target of investment is the gain of _relevant_ value. Thus, a comparison between taken risk and implied profit chances can be better performed by looking at the typical downfalls (depreciations) and the deeper analysis of events promising good returns. To put it into other words: Is taking the decent chance for a 10% loss worth the expected 7% upsurge (as an example provided by an Earnings Call in the past ? A word has to be made about the investment strategy to determine the methods of risk-reward analysis: Is the intention to hold a value steady and accumulate profits moderately (mid- to long-term)? Then an investment with low volatility and equal tendencies to growth and depreciation is favorable. If rather the fast gain of a return is the intention of an investment, the chances for a value upsurge should clearly outweigh the probability of loss.

A word on the assumptions underlying the conclusions about the behaviour of both stocks: The forming of conclusions based on a large frame of historical data implies that all data is equally relevant. This approach assumes that the market stays the same. In reality, the market is _highly_ time-relevant and can take unexpected significant turns within the span of trading hours of just one day. Especially any decision based on the average volatility over large timeframe falls for the illusion that the variance of its values is homogenous, meaning that the variance between the data points is the same across all observations throughout the time-series. A homogeneity of a stock's variance, or in the market terms a _homoskedasticity_, cannot be found in either of our example stocks (AMD & NVIDIA). A visual proof of this can be found in the graphs for Percental Change. AMD and NVIDIA are marked of periods of high volatility and a retreat into less volatile times: The stock's variance is heteroskedastic. These fractions of high volatility timeframes (called volatility clusters) are often induced through autoregression of stock's own volatility development. The detailed nature of this behaviour outgrows the scope of this critique, but it is worth to note that a general practice for volatility analysis is the determination of autoregression and heteroskedastic tendency of a stock. Autoregressive Conditonal Heteroskedasticity (ARCH) models have been developed to allow forecasts to be made with these factors in mind (see `courses/datacamp--garch-models`).
156/107:
## Reflection
Looking back on the progress of this project, the scope and approach definitely changed more than I had anticipated! This project started out to be just on of the projects for my Data Science portfolio. The initial goal for this project was to allow me implement all the basic to advanced financial concepts I have learned over the semester. Once I discovered that this will be my main project for this semester, my approach to the scope of it has shifted significantly. I had to ask myself a few questions: What is it that I want to find out? Where was I heading before? Is there a specific message I feel inclined to convey (i.e. a bias)? What do I feel competent to analyze appropriately? To find answers to these questions, the guideline on Notion on how to form my own Data Science project was really helpful. I appended the first draft of my project outline in the `outline.md` file. Reviewing my initial goals, I can say that I underestimated the difficulty to highlight relevant data in what I considered "simple questions, simple answers", for example the proper visualization of volatility differences between both stocks. Furthermore, I included methods and questions I wanted to answer (e.g. performing an exhaustive value forecast with ARCH models) that stretched the scope of the project way too far: I couldn't justify fitting all things I wanted to show under _one_ major concern and thus, I felt the need to reduce the project to fewer subquestions that all cotribute to answer the overarching question. Further into exploring my options, I have discovered that my initial question had to be modified: I was only working with historical data, and I was deriving conclusions on the profitability of a stock solely based on this data. With no forecasting or other models, it was necessary to stronger underline the limited analysis of behaviours in the past and openly communicate the unpredictable factor of a stock's with regards to its heterogeneity. This clearer scope helped me to find an end to the analysis I am comfortable with, because with the previous _chance_ to include forecasting models, I could have turned my project into an endless multivariate analysis. That I experienced as both exciting and stressful, and for the sake of the quality of the project, I am happy I focused on less things but with more care.

I learned a lot with this self-guided project! First, as just stated in detail, I have learned about the importance of scoping a project and setting a clear goal. Then, I have found, it's important to spend a significant amount of time further researching and learning about the methods I have already identified as relevant for my analysis. I spend quite some time trying to analyze my data with highly complex volatility models (if you feel adventurous, try a read of [Volatility Trading](http://1.droppdf.com/files/gxQpD/volatility-trading-2013.pdf)'s chapter _Volatility Measurement_). Meanwhile, I just accepted the rule of thumb that "the standard deviation is basically the volatility" without questioning the validity or origin of this claim. When modelling volatility visualizations, I have come to the point of realization that less is sometimes more - and confidence in fundamentals is more important than being able to work with complex models. If I don't see that I can visualize the same fluctuation behaviour with plotting the simple first standard deviation area, a statistic graspable and relevant on all levels, what exactly am I trying to convey by modelling complex volatility calculations into it? My focus was rather set on "Show you can do something cool and complex, even if its a bit off!" rather than "Help the reader to receive your message with clear and strong evidence". This was a meaningful lesson to undergo!
156/108:
## Reflection
Looking back on the progress of this project, the scope and approach definitely changed more than I had anticipated! This project started out to be just on of the projects for my Data Science portfolio. The initial goal for this project was to allow me implement all the basic to advanced financial concepts I have learned over the semester. Once I discovered that this will be my main project for this semester, my approach to the scope of it has shifted significantly. I had to ask myself a few questions: What is it that I want to find out? Where was I heading before? Is there a specific message I feel inclined to convey (i.e. a bias)? What do I feel competent to analyze appropriately? To find answers to these questions, the guideline on Notion on how to form my own Data Science project was really helpful. I appended the first draft of my project outline in the `outline.md` file. Reviewing my initial goals, I can say that I underestimated the difficulty to highlight relevant data in what I considered "simple questions, simple answers", for example the proper visualization of volatility differences between both stocks. Furthermore, I included methods and questions I wanted to answer (e.g. performing an exhaustive value forecast with ARCH models) that stretched the scope of the project way too far: I couldn't justify fitting all things I wanted to show under _one_ major concern and thus, I felt the need to reduce the project to fewer subquestions that all cotribute to answer the overarching question. Further into exploring my options, I have discovered that my initial question had to be modified: I was only working with historical data, and I was deriving conclusions on the profitability of a stock solely based on this data. With no forecasting or other models, it was necessary to stronger underline the limited analysis of behaviours in the past and openly communicate the unpredictable factor of a stock's with regards to its heterogeneity. This clearer scope helped me to find an end to the analysis I am comfortable with, because with the previous _chance_ to include forecasting models, I could have turned my project into an endless multivariate analysis. That I experienced as both exciting and stressful, and for the sake of the quality of the project, I am happy I focused on less things but with more care.

I learned a lot with this self-guided project! First, as just stated in detail, I have learned about the importance of scoping a project and setting a clear goal. Then, I have found, it's important to spend a significant amount of time further researching and learning about the methods I have already identified as relevant for my analysis. I spend quite some time trying to analyze my data with highly complex volatility models (if you feel adventurous, try a read of [Volatility Trading](http://1.droppdf.com/files/gxQpD/volatility-trading-2013.pdf)'s chapter _Volatility Measurement_). Meanwhile, I just accepted the rule of thumb that "the standard deviation is basically the volatility" without questioning the validity or origin of this claim. When modelling volatility visualizations, I have come to the point of realization that less is sometimes more - and confidence in fundamentals is more important than being able to work with complex models. If I don't see that I can visualize the same fluctuation behaviour with plotting the simple first standard deviation area, a statistic graspable and relevant on all levels, what exactly am I trying to convey by modelling complex volatility calculations into it? My focus was rather set on "Show you can do something cool and complex, even if its a bit off!" rather than "Help the reader to receive your message with clear and strong evidence". This was a meaningful lesson to undergo!

A few more lessions I have learned:
* Good labels are crucial of making the message of a visualization easily graspable.
* If your visualization must be intensively described with words, your visualization partially failed it's purpose.
* Visualizations are a great help while exploring your data and preliminary findings.
* Choose the visualization simplest to understand that conveys the message (without a bias). You can always expand on that with more complex additions incrementally.
* Make use of more external packages! Trying an entire day to write up your own volatility model functions is a waste of time when a well-received Python package is available for that (in the context of your analysis, practicing to write complex math functions can be fun and educational!)
* It's more important to make a good analysis and fail to find your desired (or any relevant) outcome, than attempting a bad analysis that forces your desired outcome into it.
* Press CRTL + S to save occassionally (Goodbye, weekend progress!)
* You can restore your lost work by parsing the entire collection of all computed Jupyter cells by your IPython Kernel with `%history -g (-f filename)` (Welcome back, weekend progress!)
158/1:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
from scipy import stats

amd = pd.read_csv("./datasets/AMD.csv")
nvidia = pd.read_csv("./datasets/NVDA.csv")
intel = pd.read_csv("./datasets/INTC.csv")

combined = amd.assign(Stock="AMD").append(nvidia.assign(Stock="NVIDIA")).append(intel.assign(Stock="Intel"))

# adjust Date column to datetime standard
combined["Date"] = pd.to_datetime(combined["Date"])

# set index and sort by latest entry first
combined = combined.set_index(["Stock", "Date"]).sort_index(axis=0, level=1, ascending=True)
158/2: print(combined.head())
158/3:
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(ax=ax, x = "Date", y = "Adj Close", data=combined.loc[["AMD","NVIDIA"]],  hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Adjusted Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.legend(loc="upper left")
plt.title("AMD/NVIDIA Stock Price Growth in 5 year-period")

plt.show()
158/4:
combined.loc[["AMD"], "Discrete Return"] = combined.loc[["AMD"], "Adj Close"].pct_change()
combined.loc[["NVIDIA"], "Discrete Return"] = combined.loc[["NVIDIA"], "Adj Close"].pct_change()
158/5: print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].groupby("Stock").describe())
158/6:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define same y-limits (by previous statistical description: -0.25 ~ 0.55)
ax[0].set_ylim(-0.25,0.55)
ax[1].set_ylim(-0.25,0.55)

# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period");
plt.show()
158/7:
qi95 = combined.loc[["AMD"], "Discrete Return"].quantile([0.025, 0.975]) # peripheral 5% left out 
print(qi95)
158/8:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 95% quantile: -0.08 ~ 0.08)
ax[0].set_ylim(-0.08,0.08)
ax[1].set_ylim(-0.08,0.08)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 95% Quantile");
plt.show()
158/9:
qi99 = combined.loc[["AMD"], "Discrete Return"].quantile([0.005, 0.995]) # peripheral 1% left out 
print(qi99)
158/10:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99% quantile: -0.12 ~ 0.14)
ax[0].set_ylim(-0.12,0.14)
ax[1].set_ylim(-0.12,0.14)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99% Quantile");
plt.show()
158/11:
qi999 = combined.loc[["AMD"], "Discrete Return"].quantile([0.0005, 0.9995]) # peripheral 0.1% left out 
print(qi999)
158/12:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define new y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile");
plt.show()
158/13:
fig, ax = plt.subplots(1, 2, figsize=(24,8))
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["AMD"]], ax=ax[0])
sns.lineplot(x = "Date", y = "Discrete Return", data=combined.loc[["NVIDIA"]], ax=ax[1])

# describe axes
ax[0].set(xlabel="AMD Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")
ax[1].set(xlabel="NVIDIA Trading Days (Apr 2016 - Apr 2021)", ylabel="Percental Change (%)")

# define y-limits (by 99.9% quantile: -0.19 ~ 0.32)
ax[0].set_ylim(-0.19,0.32)
ax[1].set_ylim(-0.19,0.32)


# display mean as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["AMD"], "Discrete Return"].mean().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].mean(), linewidth=3.0, color="orange", label="Mean $\mu$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].mean().round(4)) + ")")

# display 1st std as horizontal line
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["AMD"], "Discrete Return"].std().round(4)) + ")")
ax[0].axhline(y=combined.loc[["AMD"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std(), linewidth=3.0, color="green", alpha=.5, label ="Std Dev 1${\sigma}$ (" + str(combined.loc[["NVIDIA"], "Discrete Return"].std().round(4)) + ")")
ax[1].axhline(y=combined.loc[["NVIDIA"], "Discrete Return"].std()*(-1), linewidth=3.0, color="green", alpha=.5)

# add x-axis description
ax[0].xaxis.set_major_formatter(md.DateFormatter("%Y"))
ax[1].xaxis.set_major_formatter(md.DateFormatter("%Y"))

# add legend
ax[0].legend(loc="upper right")
ax[1].legend(loc="upper right")

# define new title
fig.suptitle("AMD/NVIDIA Daily Percental Change in 5-year period in 99.9% Quantile with 1${\sigma}$ (Std Dev).");
plt.show()
158/14:
annual_trading_days = 252

def parkinson(data, window, annual_trading_days = 252, annualized= True):
    HL = ((data["High"] / data["Low"]).apply(np.log))**2
    variance = (1 / (4 * np.log(2))) * HL.rolling(window=window).sum()

    def annualize(v):
        return v * (annual_trading_days/window)

    if annualized:
        return np.sqrt(annualize(variance))
    else: return np.sqrt(variance)
158/15:
T = 60 # trading days window

# calculate annualized Parkinson Historical Volatility (APHV)
combined.loc[["AMD"], "APHV"] = parkinson(combined.loc[["AMD"]], window=T, annualized=True)
combined.loc[["NVIDIA"], "APHV"] = parkinson(combined.loc[["NVIDIA"]], window=T, annualized=True)

# create plot
fig, line = plt.subplots(figsize= (16, 8))
line = sns.lineplot(x= "Date", y="APHV", hue="Stock", data=combined.loc[["AMD","NVIDIA"]])

# describe axes
line.set(xlabel="Apr 2016 - Apr 2021", ylabel="Annualized Parkinson Historical Volatility")

# describe last data point
amd_last = combined.loc[["AMD"]].iloc[-1:]
nvidia_last = combined.loc[["NVIDIA"]].iloc[-1:]
line.text(x= amd_last.index.get_level_values("Date"), y=amd_last["APHV"], s=np.round(amd_last["APHV"][0],3), color="blue")
line.text(x= nvidia_last.index.get_level_values("Date"), y=nvidia_last["APHV"], s=np.round(nvidia_last["APHV"][0],3), color="orange")

plt.title("AMD/NVIDIA Historical Volatility (Parkinson) in 5-year period, " + str(T) + " days rolling, annualized")

plt.show()
158/16:
corrcoef = np.corrcoef(combined.loc[["AMD"], "Discrete Return"].dropna(), combined.loc[["NVIDIA"], "Discrete Return"].dropna())[0,1]
print("The correlation coefficient of AMD and NVIDIA is:",corrcoef)
158/17:
sp500 = pd.read_csv("./datasets/S&P500.csv")

# convert Date column to datetime standard
sp500["Date"] = pd.to_datetime(sp500["Date"])
sp500 = sp500.set_index("Date").sort_index(ascending=True)

# review dataframe structure
sp500.head()
158/18:
sp500["Datetime"] = pd.to_datetime(sp500.index.get_level_values("Date"))

fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(ax=ax, x = "Datetime", y = "Close", data=sp500).set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Closing Position ($)");

ax.xaxis.set_major_formatter(md.DateFormatter("%Y"))
plt.title("S&P 500 Index Development")

plt.show()
158/19:
sp500["Discrete Return"] = sp500["Close"].pct_change()

print("S&P 500 Daily Change");
print(sp500["Discrete Return"].tail())
print("\n")
print("AMD & NVIDIA Daily Change (respective to same stock)");
print(combined.loc[["AMD", "NVIDIA"], "Discrete Return"].tail());
158/20:
combined.loc[["AMD"], "Excess Return SP500"] = combined.loc[["AMD"], "Discrete Return"].sub(sp500["Discrete Return"])
combined.loc[["NVIDIA"], "Excess Return SP500"] = combined.loc[["NVIDIA"], "Discrete Return"].sub(sp500["Discrete Return"])

sns.lineplot(x = "Date", y = "Excess Return SP500", data=combined.loc[["AMD", "NVIDIA"]], hue="Stock").set(xlabel="Trading Days (Apr 2016 - Apr 2021)",ylabel="Excess Return to S&P500 (%)");
plt.show();

print(combined.loc[["AMD", "NVIDIA"], "Excess Return SP500"].groupby("Stock").describe())
158/21:
amd_mean_excess_return = combined.loc[["AMD"], "Discrete Return"].mean()
amd_excess_return_std = combined.loc[["AMD"], "Discrete Return"].std()
amd_sharpe_ratio = amd_mean_excess_return / amd_excess_return_std


nvidia_mean_excess_return = combined.loc[["NVIDIA"], "Discrete Return"].mean()
nvidia_excess_return_std = combined.loc[["NVIDIA"], "Discrete Return"].std()
nvidia_sharpe_ratio = nvidia_mean_excess_return / nvidia_excess_return_std

annualized_amd_sharpe_ratio = amd_sharpe_ratio * np.sqrt(annual_trading_days)
annualized_nvidia_sharpe_ratio = nvidia_sharpe_ratio * np.sqrt(annual_trading_days)

print("AMD's Sharpe-Ratio equals:",annualized_amd_sharpe_ratio)
print("NVIDIA's Sharpe-Ratio equals:", annualized_nvidia_sharpe_ratio)
158/22:
def VaR(data, confidence):
    return np.percentile(data.dropna(), (100 - confidence))
158/23:

confidence_level = 95
amd_HVaR95 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR95  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR95, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR95, 2)) + "% in one day based on historical data.")
158/24:
confidence_level = 99
amd_HVaR99 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR99 = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR99, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR99, 2)) + "% in one day based on historical data.")
158/25:

confidence_level = 99.9
amd_HVaR999 = VaR(combined.loc[["AMD"], "Discrete Return"], confidence_level)
nvidia_HVaR999  = VaR(combined.loc[["NVIDIA"], "Discrete Return"], confidence_level)

print("AMD Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * amd_HVaR999, 2)) + "% in one day based on historical data.")
print("NVIDIA Value at Risk: " + str(confidence_level) + "% certainty that losses will not exceed " + str(np.round(100 * nvidia_HVaR999, 2)) + "% in one day based on historical data.")
158/26:
days = 500
VaR95_estimate = -3.6

# Aggregate forecasted VaR
VaR95_forecasts = np.empty([days, 2])

# Loop through each forecast period
for i in range(days):
    # Save the time horizon i
    VaR95_forecasts[i, 0] = i + 1 # start with day 1
    # Save the forecasted VaR 95
    VaR95_forecasts[i, 1] = VaR95_estimate * np.sqrt(i + 1)

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=VaR95_forecasts[:, 0], y=(100 + VaR95_forecasts[:, 1]))
ax.set(xlabel="Days", ylabel="Forecasted Confidence in VaR for -3.6% (%)")
ax.set_yticklabels(['{:.0%}'.format(y/100) for y in ax.get_yticks()])

plt.title("Confidence in VaR95 scaled over time")
plt.show()
166/1: %history -g -f backupaberschnellalter.py
172/1: %history -g -f backupaberschnellalter.py
174/1: %history -g -f backupaberschnellalter.py
166/2: %history -g -f backupaberschnellalter.py
176/1: %history -g -f backupaberschnellalter.py
176/2: _ih[-100:]
176/3: print(_ih[-100:])
178/1: print(_ih[-100:])
158/27:
## Critique
The approaches to determine the preferability of investment choice as applied above have to discussed. As with all investment choices, the strength of the analysis depends the variety of defining markers, the identifiaction and selection of the relevant markers, as well as in the appropriate weighting of these markers. A uni or bivariate analysis in the domain of stock market investment cannot be considered of reliable significance due it's interrelated nature of various market mechanisms. A quick look on any stock report will highlight the noteworthy variety of different statistics and criteria which are deemed relevant to get a first impression of a stock's value development. It is therefore no coincidence that the attempt to predict the preferability of an investment based on data (e.g. "Quantitative Finance") has become a huge sector in the digital industry. 

A contextual flaw in the above approaches is the focus on determining limits of loss. The approach fails in its analysis to underline the necessity of promising returns, as the target of investment is the gain of _relevant_ value. Thus, a comparison between taken risk and implied profit chances can be better performed by looking at the typical downfalls (depreciations) and the deeper analysis of events promising good returns. To put it into other words: Is taking the decent chance for a 10% loss worth the expected 7% upsurge (as an example provided by an Earnings Call in the past ? A word has to be made about the investment strategy to determine the methods of risk-reward analysis: Is the intention to hold a value steady and accumulate profits moderately (mid- to long-term)? Then an investment with low volatility and equal tendencies to growth and depreciation is favorable. If rather the fast gain of a return is the intention of an investment, the chances for a value upsurge should clearly outweigh the probability of loss.

A word on the assumptions underlying the conclusions about the behaviour of both stocks: The forming of conclusions based on a large frame of historical data implies that all data is equally relevant. This approach assumes that the market stays the same. In reality, the market is _highly_ time-relevant and can take unexpected significant turns within the span of trading hours of just one day. Especially any decision based on the average volatility over large timeframe falls for the illusion that the variance of its values is homogenous, meaning that the variance between the data points is the same across all observations throughout the time-series. A homogeneity of a stock's variance, or in the market terms a _homoskedasticity_, cannot be found in either of our example stocks (AMD & NVIDIA). A visual proof of this can be found in the graphs for Percental Change. AMD and NVIDIA are marked of periods of high volatility and a retreat into less volatile times: The stock's variance is heteroskedastic. These fractions of high volatility timeframes (called volatility clusters) are often induced through autoregression of stock's own volatility development. The detailed nature of this behaviour outgrows the scope of this critique, but it is worth to note that a general practice for volatility analysis is the determination of autoregression and heteroskedastic tendency of a stock. Autoregressive Conditonal Heteroskedasticity (ARCH) models have been developed to allow forecasts to be made with these factors in mind (see `courses/datacamp--garch-models`).
158/28:
## Reflection
Looking back on the progress of this project, the scope and approach definitely changed more than I had anticipated! This project started out to be just on of the projects for my Data Science portfolio. The initial goal for this project was to allow me implement all the basic to advanced financial concepts I have learned over the semester. Once I discovered that this will be my main project for this semester, my approach to the scope of it has shifted significantly. I had to ask myself a few questions: What is it that I want to find out? Where was I heading before? Is there a specific message I feel inclined to convey (i.e. a bias)? What do I feel competent to analyze appropriately? To find answers to these questions, the guideline on Notion on how to form my own Data Science project was really helpful. I appended the first draft of my project outline in the `outline.md` file. Reviewing my initial goals, I can say that I underestimated the difficulty to highlight relevant data in what I considered "simple questions, simple answers", for example the proper visualization of volatility differences between both stocks. Furthermore, I included methods and questions I wanted to answer (e.g. performing an exhaustive value forecast with ARCH models) that stretched the scope of the project way too far: I couldn't justify fitting all things I wanted to show under _one_ major concern and thus, I felt the need to reduce the project to fewer subquestions that all cotribute to answer the overarching question. Further into exploring my options, I have discovered that my initial question had to be modified: I was only working with historical data, and I was deriving conclusions on the profitability of a stock solely based on this data. With no forecasting or other models, it was necessary to stronger underline the limited analysis of behaviours in the past and openly communicate the unpredictable factor of a stock's with regards to its heterogeneity. This clearer scope helped me to find an end to the analysis I am comfortable with, because with the previous _chance_ to include forecasting models, I could have turned my project into an endless multivariate analysis. That I experienced as both exciting and stressful, and for the sake of the quality of the project, I am happy I focused on less things but with more care.

I learned a lot with this self-guided project! First, as just stated in detail, I have learned about the importance of scoping a project and setting a clear goal. Then, I have found, it's important to spend a significant amount of time further researching and learning about the methods I have already identified as relevant for my analysis. I spend quite some time trying to analyze my data with highly complex volatility models (if you feel adventurous, try a read of [Volatility Trading](http://1.droppdf.com/files/gxQpD/volatility-trading-2013.pdf)'s chapter _Volatility Measurement_). Meanwhile, I just accepted the rule of thumb that "the standard deviation is basically the volatility" without questioning the validity or origin of this claim. When modelling volatility visualizations, I have come to the point of realization that less is sometimes more - and confidence in fundamentals is more important than being able to work with complex models. If I don't see that I can visualize the same fluctuation behaviour with plotting the simple first standard deviation area, a statistic graspable and relevant on all levels, what exactly am I trying to convey by modelling complex volatility calculations into it? My focus was rather set on "Show you can do something cool and complex, even if its a bit off!" rather than "Help the reader to receive your message with clear and strong evidence". This was a meaningful lesson to undergo!

A few more lessions I have learned:
* Good labels are crucial of making the message of a visualization easily graspable.
* If your visualization must be intensively described with words, your visualization partially failed it's purpose.
* Visualizations are a great help while exploring your data and preliminary findings.
* Choose the visualization simplest to understand that conveys the message (without a bias). You can always expand on that with more complex additions incrementally.
* Make use of more external packages! Trying an entire day to write up your own volatility model functions is a waste of time when a well-received Python package is available for that (in the context of your analysis, practicing to write complex math functions can be fun and educational!)
* It's more important to make a good analysis and fail to find your desired (or any relevant) outcome, than attempting a bad analysis that forces your desired outcome into it.
* Press CRTL + S to save occassionally (Goodbye, weekend progress!)
* You can restore your lost work by parsing the entire collection of all computed Jupyter cells by your IPython Kernel with `%history -g (-f filename)` (Welcome back, weekend progress!)
158/29:
With historical data, we were able to show that AMD had a higher fluctuation in value over time than NVIDIA. Both stocks share a similar development pattern in growth and depreciation. We can quantify their relation with a correlation coefficient of ~0.54, indicating a positive correlation between both datasets. This is a strong support for our initital assumption that both stocks are part of the same peer group, as furthermore the visualization of their volatilities indicates that both are affected by the same historical events.

In the pursuit of risk-determination, NVIDIA turned out to be the more desirable stock in regards to return-per-risk defined through the Sharpe Ratio. This tendency in NVIDIA's favor is underlined by the higher confidence in a maximum loss threshold of 20% compared to AMD. Both the Sharpe Ratio and Value at Risk estimates are a common factor for risk analysis and comparison and therefore form vital insights to make a preliminary conclusion about the preferability of one of the two stocks. 

To sum up: Based on the historical data of the last five years, including the intra-day variances of the stock values, NVIDIA is the more promising stock for our investment in regards to simple return-per-risk defined through the Sharpe Ratio with a probability of only 5% to exceed the 20% loss threshold in a period of one month (compared to AMD: 7% exceedance chance).
158/30:
#### Observations
Observation $A$: The standard deviation of daily return is higher for AMD.
Observation $B$: AMD's and NVIDIA's volatility indicate a similar development.
158/31:
#### Conclusions
Conclusion $I$: AMD and NVIDIA's historical value evolution is moderately positively correlated.

Conclusion $II$: NVIDIA shows a higher return-per-risk by Sharpe Ratio.

Conclusion $III$: NVIDIA has a historically lower chance to exceed a loss higher than 20% over one month.
158/32:
print("AMD Monthly Historical Value at Risk: {:.1%}".format(amd_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(amd_MHVaR))
print("NVIDIA Monthly Historical Value at Risk: {:.1%}".format(nvidia_confidence) + " certainty that losses will not exceed more than {:.0%} in one month based on historical data.".format(nvidia_MHVaR))
158/33:
nvidia_monthly_returns = combined.loc[["NVIDIA"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(nvidia_monthly_returns <= threshold) / len(nvidia_monthly_returns)

nvidia_confidence = 1 - q

nvidia_MHVaR = VaR(combined.loc[["NVIDIA"], "Discrete Return"], nvidia_confidence) * np.sqrt(monthly_trading_days)
158/34:
threshold = -0.20

amd_monthly_returns = combined.loc[["AMD"], "Discrete Return"] * np.sqrt(monthly_trading_days)
q = sum(amd_monthly_returns <= threshold) / len(amd_monthly_returns)

amd_confidence = 1 - q

amd_MHVaR = VaR(combined.loc[["AMD"], "Discrete Return"], amd_confidence) * np.sqrt(monthly_trading_days)
158/35:
# Loop through each forecast period
for i in range(500):
    # Save the time horizon i
    amd_forecast[i, 0] = i + 1
    # Save the forecasted VaR 95
    amd_forecast[i, 1] = 1- q

fig, ax = plt.subplots(figsize=(12, 8))

sns.lineplot(ax=ax, x=amd_forecast[:, 0], y=(1-amd_forecast[:, 1]))
ax.set(xlabel="Days", ylabel="Chance for more than 20% loss (%)")
ax.set_yticklabels(['{:.0%}'.format(y) for y in ax.get_yticks()])

plt.title("AMD, chance for losses greater than " + str(threshold * 100) + "% over time, based on historical data prior day 1")
   1: %history -g -f backup2.py
